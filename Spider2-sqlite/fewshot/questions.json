{
    "args": {},
    "costs": [],
    "questions": [
        {
            "question": "Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "evidence": "",
            "raw_question": "Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the total actual toy sales from January 1, 2017, to August 29, 2018? */\nSELECT SUM(actual_sales)\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2018-08-29';\n\n/* Answer the following: Which day in 2017 recorded the highest actual toy sales and what was the amount? */\nSELECT sale_date, actual_sales\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2017-12-31'\nORDER BY actual_sales DESC\nLIMIT 1;\n\n/* Answer the following: How many days between January 1, 2017, and August 29, 2018, had predicted sales exceeding actual sales by more than 10 units? */\nSELECT COUNT(*)\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2018-08-29'\n  AND predicted_sales - actual_sales > 10;\n\n/* Answer the following: What was the average daily actual toy sales for each month in 2017? */\nSELECT strftime('%Y-%m', sale_date) AS month,\n       AVG(actual_sales)             AS avg_daily_sales\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2017-12-31'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Using a simple linear regression on actual toy sales from January 1, 2017, to August 29, 2018, what is the predicted sales for September 1, 2018?  \n   (day_number = days since 2017-01-01; 608 is the day number for 2018-09-01) */\nSELECT REGR_INTERCEPT(actual_sales, day_number) +\n       REGR_SLOPE(actual_sales, day_number) * 608      AS predicted_sales_2018_09_01\nFROM (\n      SELECT actual_sales,\n             JULIANDAY(sale_date) - JULIANDAY('2017-01-01') AS day_number\n      FROM   daily_toy_sales\n      WHERE  sale_date BETWEEN '2017-01-01' AND '2018-08-29'\n) AS reg;\n\n/* Answer the following: What is the 5-day centered moving average of actual toy sales for July 15, 2018?  (Centered means two days before and two days after.) */\nSELECT AVG(actual_sales) AS centered_ma5\nFROM   daily_toy_sales\nWHERE  sale_date BETWEEN DATE('2018-07-15', '-2 day')\n                     AND DATE('2018-07-15', '+2 day');\n\n/* Answer the following: What is the sum of the 5-day centered moving averages of actual toy sales from July 15 to July 18, 2018? */\nWITH ma AS (\n     SELECT sale_date,\n            AVG(actual_sales) OVER (ORDER BY sale_date\n                                    ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS ma5\n     FROM   daily_toy_sales\n)\nSELECT SUM(ma5)\nFROM   ma\nWHERE  sale_date BETWEEN '2018-07-15' AND '2018-07-18';\n\n/* Answer the following: What is the mean absolute error between actual and predicted toy sales for the year 2017? */\nSELECT AVG(ABS(actual_sales - predicted_sales)) AS mean_absolute_error_2017\nFROM   daily_toy_sales\nWHERE  sale_date BETWEEN '2017-01-01' AND '2017-12-31';\n\n/* Answer the following: Between January 1, 2017, and August 29, 2018, on which weekday did the store sell the most toys on average?  (0 = Sunday, 6 = Saturday) */\nSELECT weekday,\n       AVG(actual_sales) AS avg_sales\nFROM (\n     SELECT actual_sales,\n            CAST(STRFTIME('%w', sale_date) AS INTEGER) AS weekday\n     FROM   daily_toy_sales\n     WHERE  sale_date BETWEEN '2017-01-01' AND '2018-08-29'\n) AS d\nGROUP BY weekday\nORDER BY avg_sales DESC\nLIMIT 1;\n\n/* Answer the following: Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "n_examples": 9,
            "db_id": "E_commerce"
        },
        {
            "question": "According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "evidence": "",
            "raw_question": "According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many \u201cdelivered\u201d orders has every customer placed during the last 30 days? 30 days refers to order_ts >= DATE('now','-30 day'); delivered refers to status = 'delivered'. */\nSELECT \n    customer_id,\n    COUNT(*) AS delivered_orders_last_30_days\nFROM orders\nWHERE status = 'delivered' \n  AND order_ts >= DATE('now','-30 day')\nGROUP BY customer_id;\n\n/* Answer the following: What is the overall average order value considering only delivered orders? order value refers to total_amount; delivered refers to status = 'delivered'. */\nSELECT \n    AVG(total_amount) AS avg_order_value_delivered\nFROM orders\nWHERE status = 'delivered';\n\n/* Answer the following: List the top 5 customers who spent the most money on delivered orders in the previous calendar year. previous calendar year refers to strftime('%Y', order_ts) = strftime('%Y','now','-1 year'); delivered refers to status = 'delivered'. */\nSELECT \n    c.customer_id,\n    c.name,\n    SUM(o.total_amount) AS total_spend_last_year\nFROM customers AS c\nJOIN orders AS o \n  ON c.customer_id = o.customer_id\nWHERE o.status = 'delivered'\n  AND strftime('%Y', o.order_ts) = strftime('%Y','now','-1 year')\nGROUP BY c.customer_id, c.name\nORDER BY total_spend_last_year DESC\nLIMIT 5;\n\n/* Answer the following: For every customer, calculate Recency in days based on the most recent delivered order. Recency refers to JULIANDAY('now') - JULIANDAY(MAX(order_ts)). */\nSELECT\n    customer_id,\n    CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency_days\nFROM orders\nWHERE status = 'delivered'\nGROUP BY customer_id;\n\n/* Answer the following: Classify each customer into an RFM segment using the following cut\u2013offs: Recency \u2264 30 days = 'Champions'; 31\u201390 = 'Potential'; 91\u2013180 = 'Hibernating'; > 180 = 'Lost'. Frequency refers to number of delivered orders; Monetary refers to total delivered spend. Produce the segment per customer. */\nWITH rfm AS (\n    SELECT\n        customer_id,\n        CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency,\n        COUNT(*) AS frequency,\n        SUM(total_amount) AS monetary\n    FROM orders\n    WHERE status = 'delivered'\n    GROUP BY customer_id\n)\nSELECT\n    customer_id,\n    CASE\n        WHEN recency <= 30  THEN 'Champions'\n        WHEN recency <= 90  THEN 'Potential'\n        WHEN recency <= 180 THEN 'Hibernating'\n        ELSE 'Lost'\n    END AS rfm_segment\nFROM rfm;\n\n/* Answer the following: Compute the average sales per delivered order for each customer and return the results together with the RFM segment defined in the previous query. average sales per order refers to SUM(total_amount)/COUNT(*). */\nWITH cust_orders AS (\n    SELECT\n        customer_id,\n        COUNT(*)                           AS delivered_orders,\n        SUM(total_amount)                  AS total_spend\n    FROM orders\n    WHERE status = 'delivered'\n    GROUP BY customer_id\n),\ncust_rfm AS (\n    SELECT\n        customer_id,\n        CASE\n            WHEN recency <= 30  THEN 'Champions'\n            WHEN recency <= 90  THEN 'Potential'\n            WHEN recency <= 180 THEN 'Hibernating'\n            ELSE 'Lost'\n        END AS rfm_segment\n    FROM (\n        SELECT\n            customer_id,\n            CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency\n        FROM orders\n        WHERE status = 'delivered'\n        GROUP BY customer_id\n    )\n)\nSELECT\n    o.customer_id,\n    o.total_spend * 1.0 / o.delivered_orders AS avg_sales_per_order,\n    r.rfm_segment\nFROM cust_orders AS o\nJOIN cust_rfm  AS r ON o.customer_id = r.customer_id;\n\n/* Answer the following: What is the average of \u201caverage sales per order\u201d within each RFM segment? */\nWITH cust_avg AS (\n    SELECT\n        customer_id,\n        SUM(total_amount) * 1.0 / COUNT(*) AS avg_sales_per_order\n    FROM orders\n    WHERE status = 'delivered'\n    GROUP BY customer_id\n),\ncust_segment AS (\n    SELECT\n        customer_id,\n        CASE\n            WHEN recency <= 30  THEN 'Champions'\n            WHEN recency <= 90  THEN 'Potential'\n            WHEN recency <= 180 THEN 'Hibernating'\n            ELSE 'Lost'\n        END AS rfm_segment\n    FROM (\n        SELECT\n            customer_id,\n            CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency\n        FROM orders\n        WHERE status = 'delivered'\n        GROUP BY customer_id\n    )\n)\nSELECT\n    s.rfm_segment,\n    AVG(a.avg_sales_per_order) AS avg_sales_per_order_segment\nFROM cust_avg     AS a\nJOIN cust_segment AS s ON a.customer_id = s.customer_id\nGROUP BY s.rfm_segment;\n\n/* Answer the following: Show the difference in average sales per order between \u201cChampions\u201d and \u201cHibernating\u201d segments. */\nWITH segment_avgs AS (\n    SELECT\n        s.rfm_segment,\n        AVG(a.avg_sales_per_order) AS seg_avg\n    FROM (\n        SELECT\n            customer_id,\n            SUM(total_amount) * 1.0 / COUNT(*) AS avg_sales_per_order\n        FROM orders\n        WHERE status = 'delivered'\n        GROUP BY customer_id\n    ) AS a\n    JOIN (\n        SELECT\n            customer_id,\n            CASE\n                WHEN recency <= 30  THEN 'Champions'\n                WHEN recency <= 90  THEN 'Potential'\n                WHEN recency <= 180 THEN 'Hibernating'\n                ELSE 'Lost'\n            END AS rfm_segment\n        FROM (\n            SELECT\n                customer_id,\n                CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency\n            FROM orders\n            WHERE status = 'delivered'\n            GROUP BY customer_id\n        )\n    ) AS s ON a.customer_id = s.customer_id\n    GROUP BY s.rfm_segment\n)\nSELECT\n    (SELECT seg_avg FROM segment_avgs WHERE rfm_segment = 'Champions') -\n    (SELECT seg_avg FROM segment_avgs WHERE rfm_segment = 'Hibernating') AS champions_minus_hibernating;\n\n/* Answer the following: Which customers had no delivered orders in the last 12 months? last 12 months refers to order_ts >= DATE('now','-12 month'). */\nSELECT\n    c.customer_id,\n    c.name\nFROM customers AS c\nLEFT JOIN (\n    SELECT DISTINCT customer_id\n    FROM orders\n    WHERE status = 'delivered'\n      AND order_ts >= DATE('now','-12 month')\n) AS recent ON c.customer_id = recent.customer_id\nWHERE recent.customer_id IS NULL;\n\n/* Answer the following: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "n_examples": 9,
            "db_id": "E_commerce"
        },
        {
            "question": "Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "evidence": "",
            "raw_question": "Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which customer has paid the largest total amount overall, and what is that amount? */\nSELECT SUM(P.amount) AS total_paid\nFROM customers AS C\nJOIN orders   AS O ON O.customer_id = C.customer_id\nJOIN payments AS P ON P.order_id   = O.order_id\nGROUP BY C.customer_id\nORDER BY total_paid DESC\nLIMIT 1;\n\n/* Answer the following: List the five orders with the highest single\u2013order total value.  Return the order id, customer id, and order total. */\nSELECT order_id ,\n       customer_id ,\n       total_amount\nFROM orders\nORDER BY total_amount DESC\nLIMIT 5;\n\n/* Answer the following: How many customers have not placed any orders during the last 12 months? */\nSELECT COUNT(*)\nFROM (\n    SELECT C.customer_id\n    FROM customers AS C\n    LEFT JOIN orders AS O ON O.customer_id = C.customer_id\n    GROUP BY C.customer_id\n    HAVING MAX(O.order_date) IS NULL\n        OR MAX(O.order_date) < DATE('now','-12 months')\n) AS t;\n\n/* Answer the following: For each customer, what is the average number of days that elapse between two consecutive orders?  Show customer id and the average gap in days, ordered from smallest to largest gap. */\nSELECT customer_id,\n       AVG(days_gap) AS avg_days_between_orders\nFROM (\n    SELECT O.customer_id,\n           JULIANDAY(O.order_date)\n         - JULIANDAY(LAG(O.order_date)\n                     OVER (PARTITION BY O.customer_id\n                           ORDER BY O.order_date)) AS days_gap\n    FROM orders AS O\n) AS g\nWHERE days_gap IS NOT NULL\nGROUP BY customer_id\nORDER BY avg_days_between_orders;\n\n/* Answer the following: For every product category, give the number of distinct customers who have purchased at least one product from that category. */\nSELECT C.category_name,\n       COUNT(DISTINCT O.customer_id) AS customer_cnt\nFROM categories   AS C\nJOIN products     AS P  ON P.category_id  = C.category_id\nJOIN order_items  AS OI ON OI.product_id  = P.product_id\nJOIN orders       AS O  ON O.order_id     = OI.order_id\nGROUP BY C.category_id , C.category_name;\n\n/* Answer the following: What are the earliest and the latest order dates recorded in the system? */\nSELECT MIN(order_date) AS earliest_order_date ,\n       MAX(order_date) AS latest_order_date\nFROM orders;\n\n/* Answer the following: During which month was the total revenue the highest?  Return the month in YYYY-MM format together with the revenue. */\nSELECT strftime('%Y-%m', O.order_date) AS year_month,\n       SUM(P.amount)                   AS total_revenue\nFROM orders   AS O\nJOIN payments AS P ON P.order_id = O.order_id\nGROUP BY year_month\nORDER BY total_revenue DESC\nLIMIT 1;\n\n/* Answer the following: Which customer showed the largest increase in total spending from 2020 to 2021, and how much was that increase? */\nSELECT customer_id,\n       (total_2021 - total_2020) AS spending_increase\nFROM (\n    SELECT O.customer_id,\n           SUM(CASE WHEN strftime('%Y', O.order_date) = '2020' THEN P.amount ELSE 0 END) AS total_2020,\n           SUM(CASE WHEN strftime('%Y', O.order_date) = '2021' THEN P.amount ELSE 0 END) AS total_2021\n    FROM orders   AS O\n    JOIN payments AS P ON P.order_id = O.order_id\n    GROUP BY O.customer_id\n) AS diff\nORDER BY spending_increase DESC\nLIMIT 1;\n\n/* Answer the following: Give the three weeks of 2021 that had the highest average order value.  Return week number (00\u201353) and the average value. */\nSELECT week_num,\n       AVG(order_total) AS avg_order_value\nFROM (\n    SELECT strftime('%W', order_date) AS week_num,\n           total_amount               AS order_total\n    FROM orders\n    WHERE strftime('%Y', order_date) = '2021'\n) AS w\nGROUP BY week_num\nORDER BY avg_order_value DESC\nLIMIT 3;\n\n/* Answer the following: Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "n_examples": 9,
            "db_id": "E_commerce"
        },
        {
            "question": "Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "evidence": "",
            "raw_question": "Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Could you help me calculate the average single career span value in years for all baseball players? First, for every player compute the span as  \n      years  +  (months/12)  +  (days/365),  \n   where years, months and days come from age(finalGame , debut) and each fraction is rounded to two decimal places before summing.  Finally, average those spans and return the result as a float. */\nWITH spans AS (\n    SELECT\n        playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT ROUND(AVG(career_span), 2) AS avg_career_span\nFROM spans;\n\n/* Answer the following: Which player owns the longest single-career span and what is that span (in years)? */\nWITH spans AS (\n    SELECT\n        playerID,\n        CONCAT(nameFirst, ' ', nameLast) AS full_name,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT full_name, career_span\nFROM spans\nORDER BY career_span DESC\nLIMIT 1;\n\n/* Answer the following: How many players had a single-career span longer than 20 years? */\nWITH spans AS (\n    SELECT\n        playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT COUNT(*) AS players_over_twenty_years\nFROM spans\nWHERE career_span > 20;\n\n/* Answer the following: List the names and spans of the five players with the longest careers who debuted after 1-Jan-2000. */\nWITH spans AS (\n    SELECT\n        playerID,\n        CONCAT(nameFirst, ' ', nameLast) AS full_name,\n        debut,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut >= DATE '2000-01-01'\n      AND finalGame IS NOT NULL\n)\nSELECT full_name, career_span\nFROM spans\nORDER BY career_span DESC\nLIMIT 5;\n\n/* Answer the following: What is the average single-career span for players whose primary position is pitcher ('P')? */\nWITH spans AS (\n    SELECT\n        P.playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(P.finalGame, P.debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(P.finalGame, P.debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(P.finalGame, P.debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People AS P\n    WHERE P.primaryPosition = 'P'\n      AND P.debut      IS NOT NULL\n      AND P.finalGame  IS NOT NULL\n)\nSELECT ROUND(AVG(career_span), 2) AS avg_pitcher_span\nFROM spans;\n\n/* Answer the following: For each debut decade (e.g., 1900s, 1910s), give the average single-career span of the players who debuted in that decade. */\nWITH spans AS (\n    SELECT\n        DATE_PART('year', debut) / 10 * 10 AS debut_decade,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT debut_decade || 's' AS decade,\n       ROUND(AVG(career_span), 2) AS avg_span\nFROM spans\nGROUP BY debut_decade\nORDER BY debut_decade;\n\n/* Answer the following: Which debut decade has the highest average single-career span? */\nWITH spans AS (\n    SELECT\n        DATE_PART('year', debut) / 10 * 10 AS debut_decade,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n),\ndecade_avgs AS (\n    SELECT debut_decade,\n           AVG(career_span) AS avg_span\n    FROM spans\n    GROUP BY debut_decade\n)\nSELECT debut_decade || 's' AS decade, ROUND(avg_span, 2) AS avg_span\nFROM decade_avgs\nORDER BY avg_span DESC\nLIMIT 1;\n\n/* Answer the following: Among players who were inducted into the Hall of Fame, what is the shortest single-career span? */\nWITH spans AS (\n    SELECT\n        P.playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(P.finalGame, P.debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(P.finalGame, P.debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(P.finalGame, P.debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People       AS P\n    JOIN HallOfFame   AS H  ON P.playerID = H.playerID\n    WHERE H.inducted = 'Y'\n      AND P.debut     IS NOT NULL\n      AND P.finalGame IS NOT NULL\n)\nSELECT MIN(career_span) AS shortest_HOF_span\nFROM spans;\n\n/* Answer the following: How many players have a single-career span between 5 years (inclusive) and 10 years (exclusive)? */\nWITH spans AS (\n    SELECT\n        playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT COUNT(*) AS players_5_to_10_years\nFROM spans\nWHERE career_span >= 5\n  AND career_span < 10;\n\n/* Answer the following: Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "n_examples": 9,
            "db_id": "Baseball"
        },
        {
            "question": "I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "evidence": "",
            "raw_question": "I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many players have hit at least 50 home runs in a single season? at least 50 home runs refers to HR >= 50 */\nSELECT COUNT(DISTINCT playerID)\nFROM Batting\nWHERE HR >= 50;\n\n/* Answer the following: What is the average height and weight of pitchers born in Texas? pitchers refers to those listed in Pitching; born in Texas refers to birthState = 'TX' */\nSELECT AVG(People.height)  AS avg_height,\n       AVG(People.weight)  AS avg_weight\nFROM People\nINNER JOIN Pitching ON People.playerID = Pitching.playerID\nWHERE People.birthState = 'TX';\n\n/* Answer the following: List the last names of players who have won the Most Valuable Player award more than once. Most Valuable Player award refers to awardID = 'MVP'; more than once refers to COUNT(*) > 1 */\nSELECT DISTINCT People.nameLast\nFROM People\nINNER JOIN AwardsPlayers ON People.playerID = AwardsPlayers.playerID\nWHERE AwardsPlayers.awardID = 'MVP'\nGROUP BY People.playerID\nHAVING COUNT(*) > 1;\n\n/* Answer the following: Which team had the highest average attendance in the 2019 season? highest average attendance refers to MAX(attendance); 2019 season refers to yearID = 2019 */\nSELECT teamID\nFROM Teams\nWHERE yearID = 2019\nORDER BY attendance DESC\nLIMIT 1;\n\n/* Answer the following: Find the player with the highest batting average (H divided by AB) in the 1980s, provided the player logged at least 2000 at-bats during that decade. 1980s refers to yearID BETWEEN 1980 AND 1989; at least 2000 at-bats refers to SUM(AB) >= 2000 */\nSELECT People.nameFirst,\n       People.nameLast\nFROM People\nINNER JOIN (\n        SELECT playerID,\n               SUM(H)   AS total_hits,\n               SUM(AB)  AS total_ab,\n               CAST(SUM(H) AS FLOAT) / SUM(AB) AS batting_avg\n        FROM Batting\n        WHERE yearID BETWEEN 1980 AND 1989\n        GROUP BY playerID\n        HAVING SUM(AB) >= 2000\n) AS Decade ON People.playerID = Decade.playerID\nORDER BY Decade.batting_avg DESC\nLIMIT 1;\n\n/* Answer the following: What was the total payroll of the New York Yankees in 2022? New York Yankees refers to teamID = 'NYY'; total payroll refers to SUM(salary) */\nSELECT SUM(salary) AS total_payroll\nFROM Salaries\nWHERE teamID = 'NYY'\n  AND yearID = 2022;\n\n/* Answer the following: How many distinct players have appeared both as a pitcher and as a designated hitter? appeared as a pitcher refers to G_p > 0; as a designated hitter refers to G_dh > 0 */\nSELECT COUNT(DISTINCT playerID)\nFROM Appearances\nWHERE G_p  > 0\n  AND G_dh > 0;\n\n/* Answer the following: Which ballpark hosted the most games in the year 2010? most games refers to SUM(G); 2010 refers to yearID = 2010 */\nSELECT park\nFROM Teams\nWHERE yearID = 2010\nGROUP BY park\nORDER BY SUM(G) DESC\nLIMIT 1;\n\n/* Answer the following: Who has the longest playing career, and how many seasons did it span? longest playing career refers to MAX(last_year - first_year + 1) */\nSELECT People.nameFirst,\n       People.nameLast,\n       (Career.last_year - Career.first_year + 1) AS seasons\nFROM People\nINNER JOIN (\n        SELECT playerID,\n               MIN(yearID) AS first_year,\n               MAX(yearID) AS last_year\n        FROM Batting\n        GROUP BY playerID\n) AS Career ON People.playerID = Career.playerID\nORDER BY seasons DESC\nLIMIT 1;\n\n/* Answer the following: I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "n_examples": 9,
            "db_id": "Baseball"
        },
        {
            "question": "What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "evidence": "",
            "raw_question": "What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many routes depart from the city of Abakan? */\nSELECT COUNT(*) \nFROM route AS R\nJOIN city  AS C\n     ON R.dep_city_id = C.id\nWHERE C.name = 'Abakan';\n\n/* Answer the following: How many different destination cities can be reached directly from Abakan? */\nSELECT COUNT(DISTINCT C2.name)\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE C1.name = 'Abakan';\n\n/* Answer the following: What is the average distance of all routes that start in Abakan (in kilometers)? */\nSELECT AVG(R.distance)\nFROM route AS R\nJOIN city AS C ON R.dep_city_id = C.id\nWHERE C.name = 'Abakan';\n\n/* Answer the following: List the names and distances of the three longest routes whose point of departure is Abakan. */\nSELECT C2.name,\n       R.distance\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE C1.name = 'Abakan'\nORDER BY R.distance DESC\nLIMIT 3;\n\n/* Answer the following: What is the minimum distance of any route in the entire network? */\nSELECT MIN(distance)\nFROM route;\n\n/* Answer the following: Which pair of cities is connected by the longest single route, and what is its distance? */\nSELECT C1.name  AS departure_city,\n       C2.name  AS destination_city,\n       R.distance\nFROM route AS R\nJOIN city  AS C1 ON R.dep_city_id  = C1.id\nJOIN city  AS C2 ON R.dest_city_id = C2.id\nORDER BY R.distance DESC\nLIMIT 1;\n\n/* Answer the following: Which city receives the highest number of incoming routes? */\nSELECT C.name\nFROM city  AS C\nJOIN route AS R ON R.dest_city_id = C.id\nGROUP BY C.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total combined length of all routes where Abakan is either the departure or the destination city (in kilometers)? */\nSELECT SUM(R.distance)\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id  = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE C1.name = 'Abakan'\n   OR C2.name = 'Abakan';\n\n/* Answer the following: How many routes longer than 1000 km involve Abakan either as the departure or destination city? */\nSELECT COUNT(*)\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id  = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE R.distance > 1000\n  AND (C1.name = 'Abakan' OR C2.name = 'Abakan');\n\n/* Answer the following: What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "n_examples": 9,
            "db_id": "Airlines"
        },
        {
            "question": "Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "evidence": "",
            "raw_question": "Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average distance (in kilometres) of every route that operates between the cities 'New York' and 'Los Angeles'?  Treat the two directions as the same city-pair. */\nSELECT AVG(distance_km)\nFROM routes\nWHERE (source_city = 'New York'  AND dest_city = 'Los Angeles')\n   OR (source_city = 'Los Angeles' AND dest_city = 'New York');\n\n/* Answer the following: List the five city-pairs that have the greatest average distance of all their routes.  Show the two city names and that average distance, ordering from the largest downward. */\nSELECT LEAST(source_city , dest_city)  AS city_a,\n       GREATEST(source_city , dest_city) AS city_b,\n       AVG(distance_km)                 AS avg_dist\nFROM routes\nGROUP BY city_a , city_b\nORDER BY avg_dist DESC\nLIMIT 5;\n\n/* Answer the following: How many unique city-pairs have an average distance that is strictly below 1 000 km? */\nSELECT COUNT(*)\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING AVG(distance_km) < 1000\n     ) AS short_pairs;\n\n/* Answer the following: Among the city-pairs whose average distance exceeds 4 000 km, which pair has the fewest distinct routes?  Return the two city names and that route count. */\nSELECT city_a, city_b, route_cnt\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b,\n               COUNT(*)                         AS route_cnt,\n               AVG(distance_km)                 AS avg_dist\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING avg_dist > 4000\n     ) AS long_pairs\nORDER BY route_cnt ASC\nLIMIT 1;\n\n/* Answer the following: What is the maximum value of the average distance among city-pairs that have at least ten different routes?  (At least ten routes refers to COUNT(*) >= 10.) */\nSELECT MAX(avg_dist)\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b,\n               AVG(distance_km)                 AS avg_dist\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING COUNT(*) >= 10\n     ) AS rich_pairs;\n\n/* Answer the following: For every 1 000-kilometre bucket (0-999, 1 000-1 999, \u2026, 6 000 km and above), count how many unique city-pairs fall into that bucket when binned by their average distance, and return the bucket that contains the largest number of pairs. */\nWITH pair_avg AS (\n     SELECT LEAST(source_city , dest_city)  AS city_a,\n            GREATEST(source_city , dest_city) AS city_b,\n            AVG(distance_km)                 AS avg_dist\n     FROM routes\n     GROUP BY city_a , city_b\n),\nbinned AS (\n     SELECT CASE\n              WHEN avg_dist < 1000 THEN 0\n              WHEN avg_dist < 2000 THEN 1000\n              WHEN avg_dist < 3000 THEN 2000\n              WHEN avg_dist < 4000 THEN 3000\n              WHEN avg_dist < 5000 THEN 4000\n              WHEN avg_dist < 6000 THEN 5000\n              ELSE 6000\n            END AS distance_bucket\n     FROM pair_avg\n)\nSELECT distance_bucket , COUNT(*) AS pair_count\nFROM binned\nGROUP BY distance_bucket\nORDER BY pair_count DESC\nLIMIT 1;\n\n/* Answer the following: Which airline operates the single longest route in the data set?  (Single longest route refers to MAX(distance_km) in routes.) */\nSELECT airline\nFROM routes\nWHERE distance_km = (SELECT MAX(distance_km) FROM routes)\nLIMIT 1;\n\n/* Answer the following: How many cities are directly connected (in either direction) to more than twenty distinct other cities?  Direct connection refers to the existence of at least one route. */\nWITH connections AS (\n     SELECT source_city AS city, dest_city AS other_city FROM routes\n     UNION\n     SELECT dest_city  AS city, source_city AS other_city FROM routes\n)\nSELECT COUNT(*)\nFROM (\n        SELECT city\n        FROM connections\n        GROUP BY city\n        HAVING COUNT(DISTINCT other_city) > 20\n     ) AS busy_cities;\n\n/* Answer the following: How many unique city-pairs have at least one route in both directions (A\u2192B and B\u2192A)? */\nWITH dir AS (\n     SELECT source_city, dest_city FROM routes GROUP BY source_city, dest_city\n),\nundirected AS (\n     SELECT LEAST(a.source_city , a.dest_city)  AS city_a,\n            GREATEST(a.source_city , a.dest_city) AS city_b\n     FROM dir AS a\n     INNER JOIN dir AS b\n       ON a.source_city = b.dest_city\n      AND a.dest_city  = b.source_city\n)\nSELECT COUNT(DISTINCT city_a || '\u2014' || city_b)  -- concatenation just to build a unique key\nFROM undirected;\n\n/* Answer the following: Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "n_examples": 9,
            "db_id": "Airlines"
        },
        {
            "question": "Please calculate, separately for motorcycle collisions involving riders who were wearing helmets and those who were not wearing helmets, the percentage of motorcyclist fatalities per collision. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group.",
            "evidence": "",
            "raw_question": "Please calculate, separately for motorcycle collisions involving riders who were wearing helmets and those who were not wearing helmets, the percentage of motorcyclist fatalities per collision. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many fatal collisions occurred under rainy weather conditions? Rainy weather refers to weather_1 = 'Rain'; fatal collisions refers to collision_severity = 'Fatal'. */\nSELECT COUNT(*) \nFROM collisions \nWHERE weather_1 = 'Rain' \n  AND collision_severity = 'Fatal';\n\n/* Answer the following: List the 3 cities with the highest number of motorcycle-involved collisions. Motorcycle-involved refers to party_type = 'Motorcycle'. */\nSELECT C.city, COUNT(*) AS num_collisions\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE P.party_type = 'Motorcycle'\nGROUP BY C.city\nORDER BY num_collisions DESC\nLIMIT 3;\n\n/* Answer the following: What percentage of all collisions occurred at an intersection? Intersection collisions are those with intersection = 'Y'. */\nSELECT 100.0 * SUM(CASE WHEN intersection = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS pct_at_intersection\nFROM collisions;\n\n/* Answer the following: What is the average age of drivers involved in fatal collisions? Drivers are rows with party_role = 'Driver'; fatal collisions have collision_severity = 'Fatal'. */\nSELECT AVG(P.age) AS avg_driver_age\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE C.collision_severity = 'Fatal'\n  AND P.party_role = 'Driver';\n\n/* Answer the following: For each year, give the number of collisions that involved at least one heavy truck. Heavy truck refers to party_type = 'Truck'. */\nSELECT C.year, COUNT(DISTINCT C.collision_id) AS truck_collisions\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE P.party_type = 'Truck'\nGROUP BY C.year\nORDER BY C.year;\n\n/* Answer the following: What is the highest number of victims injured in any single collision that took place on a state highway? A state highway collision is one with state_highway_route IS NOT NULL. */\nSELECT MAX(victims_injured) AS max_injured_on_state_hwy\nFROM collisions\nWHERE state_highway_route IS NOT NULL;\n\n/* Answer the following: What is the average number of parties per collision across the entire data set? */\nSELECT AVG(party_cnt) AS avg_parties_per_collision\nFROM (\n    SELECT collision_id, COUNT(*) AS party_cnt\n    FROM parties\n    GROUP BY collision_id\n) AS sub;\n\n/* Answer the following: Among collisions that occurred between 10 PM and 4 AM, what proportion resulted in at least one fatality? A fatality is number_killed > 0. */\nSELECT 100.0 *\n       SUM(CASE WHEN number_killed > 0 THEN 1 ELSE 0 END) /\n       COUNT(*) AS pct_fatal_night\nFROM collisions\nWHERE (collision_time BETWEEN '22:00:00' AND '23:59:59')\n   OR (collision_time BETWEEN '00:00:00' AND '04:00:00');\n\n/* Answer the following: Which weekday has the lowest average number of injuries per collision? Weekday is derived from collision_date. */\nSELECT weekday, AVG(number_injured) AS avg_injuries\nFROM collisions\nGROUP BY weekday\nORDER BY avg_injuries ASC\nLIMIT 1;\n\n/* Answer the following: Please calculate the fatality rate for motorcycle collisions, separated by helmet usage. Specifically, calculate two percentages: 1) the percentage of motorcyclist fatalities in collisions where parties (drivers or passengers) were wearing helmets, and 2) the percentage of motorcyclist fatalities in collisions where parties were not wearing helmets. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group. Use the parties table to determine helmet usage (from party_safety_equipment fields).",
            "n_examples": 9,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "In which year were the two most common causes of traffic accidents different from those in other years?",
            "evidence": "",
            "raw_question": "In which year were the two most common causes of traffic accidents different from those in other years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What were the three most frequent causes of traffic accidents in 2015? three most frequent refers to ORDER BY accident_count DESC LIMIT 3; */\nSELECT C.cause\nFROM accidents AS A\nJOIN causes AS C ON A.cause_id = C.id\nWHERE A.year = 2015\nGROUP BY C.cause\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: How many accidents were attributed to speeding in the state of Texas during the year 2017? speeding refers to C.cause = 'Speeding'; */\nSELECT COUNT(*)\nFROM accidents AS A\nJOIN causes  AS C ON A.cause_id = C.id\nJOIN cities  AS CI ON A.city_id  = CI.id\nJOIN states  AS S  ON CI.state_id = S.id\nWHERE A.year = 2017\n  AND C.cause = 'Speeding'\n  AND S.name = 'Texas';\n\n/* Answer the following: Which state recorded the highest number of drunk-driving accidents in 2019? drunk-driving refers to C.cause = 'Drunk Driving'; highest number refers to MAX(COUNT(*)); */\nSELECT S.name\nFROM accidents AS A\nJOIN causes  AS C ON A.cause_id = C.id\nJOIN cities  AS CI ON A.city_id  = CI.id\nJOIN states  AS S  ON CI.state_id = S.id\nWHERE A.year = 2019\n  AND C.cause = 'Drunk Driving'\nGROUP BY S.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average number of vehicles involved in accidents that happened during rainy weather? rainy weather refers to weather_condition = 'Rain'; */\nSELECT AVG(A.vehicles_involved)\nFROM accidents AS A\nWHERE A.weather_condition = 'Rain';\n\n/* Answer the following: List all years after 2010 in which the total number of accidents exceeded 5,000. total number of accidents refers to COUNT(*); exceeded 5,000 refers to > 5000; */\nSELECT A.year\nFROM accidents AS A\nWHERE A.year > 2010\nGROUP BY A.year\nHAVING COUNT(*) > 5000\nORDER BY A.year;\n\n/* Answer the following: What is the total number of fatalities caused by distracted driving between 2010 and 2020 inclusive? distracted driving refers to C.cause = 'Distracted Driving'; fatalities refers to SUM(A.deaths); */\nSELECT SUM(A.deaths)\nFROM accidents AS A\nJOIN causes AS C ON A.cause_id = C.id\nWHERE C.cause = 'Distracted Driving'\n  AND A.year BETWEEN 2010 AND 2020;\n\n/* Answer the following: Which city had the lowest accident rate per 100,000 inhabitants in 2018? accident rate per 100,000 = COUNT(*) / (CI.population / 100000); lowest refers to MIN(rate); */\nSELECT CI.name\nFROM accidents AS A\nJOIN cities AS CI ON A.city_id = CI.id\nWHERE A.year = 2018\nGROUP BY CI.id, CI.name, CI.population\nORDER BY COUNT(*) * 100000.0 / CI.population\nLIMIT 1;\n\n/* Answer the following: Among causes with more than 1,000 total accidents across all years, which cause has the highest proportion of fatal accidents? more than 1,000 total accidents refers to HAVING COUNT(*) > 1000; proportion of fatal accidents = SUM(deaths) / COUNT(*); */\nSELECT C.cause\nFROM accidents AS A\nJOIN causes AS C ON A.cause_id = C.id\nGROUP BY C.id, C.cause\nHAVING COUNT(*) > 1000\nORDER BY SUM(A.deaths) * 1.0 / COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For each year, show the most common cause of traffic accidents and the number of accidents attributed to that cause. most common refers to MAX(COUNT(*)); */\nSELECT X.year,\n       X.cause,\n       X.accident_count\nFROM (\n    SELECT A.year,\n           C.cause,\n           COUNT(*) AS accident_count,\n           RANK() OVER (PARTITION BY A.year ORDER BY COUNT(*) DESC) AS rnk\n    FROM accidents AS A\n    JOIN causes AS C ON A.cause_id = C.id\n    GROUP BY A.year, C.cause\n) AS X\nWHERE X.rnk = 1\nORDER BY X.year;\n\n/* Answer the following: In which year were the two most common causes of traffic accidents different from those in other years?",
            "n_examples": 9,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "evidence": "",
            "raw_question": "For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the total number of traffic accidents recorded in 2021? */\nSELECT total_incidents\nFROM yearly_accident_totals\nWHERE year = 2021;\n\n/* Answer the following: Which primary collision factor accounted for the greatest share of accidents in 2019? greatest share refers to MAX(share_percent) */\nSELECT factor\nFROM annual_factor_share\nWHERE year = 2019\nORDER BY share_percent DESC\nLIMIT 1;\n\n/* Answer the following: What percent of all 2020 accidents were attributed to the speeding violation category? */\nSELECT share_percent\nFROM annual_factor_share\nWHERE year = 2020\n  AND factor = 'Speeding';\n\n/* Answer the following: List the three violation categories that showed the largest increase in share between 2011 and 2021.  largest increase refers to (share_2021 \u2013 share_2011) ordered DESC */\nSELECT a.factor\nFROM annual_factor_share AS a\nJOIN annual_factor_share AS b\n     ON a.factor = b.factor\nWHERE a.year = 2021\n  AND b.year = 2011\nORDER BY (a.share_percent - b.share_percent) DESC\nLIMIT 3;\n\n/* Answer the following: What was the average annual share (in percent) of the DUI category from 2010 through 2021 inclusive? */\nSELECT AVG(share_percent)\nFROM annual_factor_share\nWHERE factor = 'DUI'\n  AND year BETWEEN 2010 AND 2021;\n\n/* Answer the following: During which year did the Right-of-way Violation category record its lowest share of annual accidents? lowest share refers to MIN(share_percent) */\nSELECT year\nFROM annual_factor_share\nWHERE factor = 'Right-of-way Violation'\nORDER BY share_percent ASC\nLIMIT 1;\n\n/* Answer the following: By how many percentage points did the share of accidents caused by Cell-Phone Use rise from 2015 to 2020? */\nSELECT\n    (SELECT share_percent\n     FROM annual_factor_share\n     WHERE year = 2020 AND factor = 'Cell-Phone Use')\n  - (SELECT share_percent\n     FROM annual_factor_share\n     WHERE year = 2015 AND factor = 'Cell-Phone Use')    AS pct_point_change;\n\n/* Answer the following: For every year since 2015, what was the rank of Speeding among all primary factors based on share (1 = highest share)? */\nSELECT year,\n       RANK() OVER (PARTITION BY year ORDER BY share_percent DESC) AS speeding_rank\nFROM annual_factor_share\nWHERE factor = 'Speeding'\n  AND year >= 2015\nORDER BY year;\n\n/* Answer the following: In which year did the combined share of Speeding and DUI first exceed 40 percent of all accidents? combined share refers to SUM(share_percent) > 40 */\nSELECT year\nFROM annual_factor_share\nWHERE factor IN ('Speeding', 'DUI')\nGROUP BY year\nHAVING SUM(share_percent) > 40\nORDER BY year\nLIMIT 1;\n\n/* Answer the following: For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "n_examples": 9,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "evidence": "",
            "raw_question": "For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the average length (in minutes) of NXT title matches in which the title actually changed hands? */\nSELECT AVG(M.match_length) \nFROM matches AS M\nWHERE M.is_title_change = 'Yes';\n\n/* Answer the following: Which wrestler has appeared in the greatest number of NXT title matches?  */\nSELECT W.name\nFROM wrestlers AS W\nJOIN match_wrestlers AS MW ON W.wrestler_id = MW.wrestler_id\nJOIN matches AS M ON M.match_id = MW.match_id\nGROUP BY W.wrestler_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List every NXT title that has never changed hands. */\nSELECT T.name\nFROM titles AS T\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM matches AS M\n    WHERE M.title_id = T.title_id \n      AND M.is_title_change = 'Yes'\n);\n\n/* Answer the following: How many NXT title matches lasted longer than 25 minutes? 25 minutes refers to match_length > 25. */\nSELECT COUNT(*) \nFROM matches \nWHERE match_length > 25;\n\n/* Answer the following: On what earliest date was the \u201cNXT Women\u2019s Championship\u201d defended? */\nSELECT MIN(M.date) \nFROM matches AS M\nJOIN titles  AS T ON T.title_id = M.title_id\nWHERE T.name = 'NXT Women''s Championship';\n\n/* Answer the following: Which pair of wrestlers have faced each other the most times in NXT title matches? (return the two names together once) */\nSELECT CONCAT(W1.name,' vs ',W2.name) AS rivalry\nFROM match_wrestlers AS A\nJOIN match_wrestlers AS B   ON A.match_id = B.match_id AND A.wrestler_id < B.wrestler_id\nJOIN wrestlers       AS W1  ON W1.wrestler_id = A.wrestler_id\nJOIN wrestlers       AS W2  ON W2.wrestler_id = B.wrestler_id\nGROUP BY A.wrestler_id, B.wrestler_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For every NXT title, what is the longest match length on record? */\nSELECT T.name   AS title_name,\n       MAX(M.match_length) AS longest_match\nFROM titles  AS T\nJOIN matches AS M ON M.title_id = T.title_id\nGROUP BY T.title_id;\n\n/* Answer the following: Show the total number of NXT title matches for each calendar year. */\nSELECT STRFTIME('%Y', M.date) AS year,\n       COUNT(*)               AS num_title_matches\nFROM matches AS M\nGROUP BY year\nORDER BY year;\n\n/* Answer the following: Which wrestler won the \u201cNXT Championship\u201d in the shortest amount of time? winner means result = 'win', shortest refers to MIN(match_length) */\nSELECT W.name\nFROM matches         AS M\nJOIN titles          AS T  ON T.title_id = M.title_id\nJOIN match_wrestlers AS MW ON MW.match_id = M.match_id AND MW.result = 'win'\nJOIN wrestlers       AS W  ON W.wrestler_id = MW.wrestler_id\nWHERE T.name = 'NXT Championship'\nORDER BY M.match_length\nLIMIT 1\n\n/* Answer the following: For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "n_examples": 9,
            "db_id": "WWE"
        },
        {
            "question": "Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "evidence": "",
            "raw_question": "Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which three bowlers have delivered the most maiden overs across all matches? */\nSELECT P.player_name\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nGROUP BY B.player_id\nORDER BY SUM(B.maidens) DESC\nLIMIT 3;\n\n/* Answer the following: What is the greatest number of wickets taken by a single bowler in any one match? */\nSELECT MAX(wickets_taken)\nFROM bowler;\n\n/* Answer the following: List the name of every bowler who has never conceded a no-ball.  */\nSELECT DISTINCT P.player_name\nFROM bowler AS B\nJOIN player  AS P ON P.player_id = B.player_id\nGROUP BY B.player_id\nHAVING SUM(B.no_balls) = 0;\n\n/* Answer the following: How many runs has James Anderson conceded in total? */\nSELECT SUM(B.runs_conceded)\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nWHERE P.player_name = 'James Anderson';\n\n/* Answer the following: Which bowler has the best (lowest) economy rate in the tournament \u201cWorld Cup 2011\u201d?  \n   Economy rate is defined as total runs conceded divided by total overs bowled.                */\nSELECT P.player_name\nFROM bowler      AS B\nJOIN player      AS P ON P.player_id = B.player_id\nJOIN match       AS M ON M.match_id   = B.match_id\nJOIN tournament  AS T ON T.tournament_id = M.tournament_id\nWHERE T.tournament_name = 'World Cup 2011'\nGROUP BY B.player_id\nORDER BY SUM(B.runs_conceded) * 1.0 / SUM(B.overs_bowled) ASC\nLIMIT 1;\n\n/* Answer the following: Give the average number of wides bowled per innings by bowlers from Australia. */\nSELECT AVG(B.wides)\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nJOIN country AS C ON C.country_id = P.country_id\nWHERE C.country_name = 'Australia';\n\n/* Answer the following: What is the total count of bowlers who have taken at least 50 career wickets? */\nSELECT COUNT(*)\nFROM (\n      SELECT player_id\n      FROM bowler\n      GROUP BY player_id\n      HAVING SUM(wickets_taken) >= 50\n     ) AS sub;\n\n/* Answer the following: Which bowler has the lowest strike-rate (balls per wicket) among those who have bowled at least 100 overs in total?  \n   Strike-rate is defined as (overs \u00d7 6) divided by wickets taken.                                     */\nSELECT P.player_name\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nGROUP BY B.player_id\nHAVING SUM(B.overs_bowled) >= 100\n   AND SUM(B.wickets_taken) > 0\nORDER BY (SUM(B.overs_bowled) * 6.0) / SUM(B.wickets_taken) ASC\nLIMIT 1;\n\n/* Answer the following: For each country, show the total number of wickets taken by its bowlers during the \u201cAshes 2005\u201d tournament. */\nSELECT C.country_name, SUM(B.wickets_taken) AS total_wkts\nFROM bowler AS B\nJOIN player     AS P ON P.player_id = B.player_id\nJOIN country    AS C ON C.country_id = P.country_id\nJOIN match      AS M ON M.match_id   = B.match_id\nJOIN tournament AS T ON T.tournament_id = M.tournament_id\nWHERE T.tournament_name = 'Ashes 2005'\nGROUP BY C.country_name;\n\n/* Answer the following: Which bowler has the lowest bowling average per wicket taken?",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Which bowler has the lowest bowling average per wicket taken?",
            "evidence": "",
            "raw_question": "Which bowler has the lowest bowling average per wicket taken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum number of runs scored by any striker in a single match? runs scored refers to SUM(Batsman_Scored) over all balls faced by the striker in that match */\nSELECT MAX(runs_scored) \nFROM (\n    SELECT Striker, Match_id, SUM(Batsman_Scored) AS runs_scored\n    FROM ball_by_ball\n    GROUP BY Striker, Match_id\n) AS T\n\n/* Answer the following: List the top 5 strikers who have the highest aggregate runs across all seasons. aggregate runs refers to SUM(Batsman_Scored) grouped by Striker */\nSELECT Striker \nFROM ball_by_ball\nGROUP BY Striker\nORDER BY SUM(Batsman_Scored) DESC\nLIMIT 5\n\n/* Answer the following: How many matches were won by the team that also won the toss? toss winner equals match winner refers to Toss_winner = Match_winner */\nSELECT COUNT(*) \nFROM match\nWHERE Toss_winner = Match_winner\n\n/* Answer the following: Which stadium has hosted the greatest number of matches? greatest number refers to MAX(COUNT(*)) over Stadium_name */\nSELECT Stadium_name \nFROM match\nGROUP BY Stadium_name\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: How many centuries were scored in the 2015 season? century refers to SUM(Batsman_Scored) >= 100 for a striker within a match; season refers to Season_year = 2015 */\nSELECT COUNT(*) \nFROM (\n    SELECT Match_id, Striker, SUM(Batsman_Scored) AS runs_scored\n    FROM ball_by_ball\n    WHERE Match_id IN (SELECT Match_id FROM match WHERE Season_year = 2015)\n    GROUP BY Match_id, Striker\n    HAVING SUM(Batsman_Scored) >= 100\n) AS Century_Innings\n\n/* Answer the following: What is the average number of boundaries hit per match across all seasons? boundaries refers to Batsman_Scored IN (4, 6) */\nSELECT AVG(boundary_count) \nFROM (\n    SELECT Match_id, COUNT(*) AS boundary_count\n    FROM ball_by_ball\n    WHERE Batsman_Scored IN (4, 6)\n    GROUP BY Match_id\n) AS Boundaries_Per_Match\n\n/* Answer the following: Which bowler has the lowest economy rate among those who have bowled at least 50 overs in total? economy rate refers to (total runs conceded) / (total overs bowled); runs conceded refers to Batsman_Scored + Extra_Runs */\nSELECT Bowler \nFROM (\n    SELECT Bowler,\n           SUM(COALESCE(Batsman_Scored, 0) + COALESCE(Extra_Runs, 0)) AS runs_conceded,\n           COUNT(DISTINCT CONCAT(Match_id, '-', Innings_no, '-', Over_id)) AS overs_bowled\n    FROM ball_by_ball\n    GROUP BY Bowler\n    HAVING COUNT(DISTINCT CONCAT(Match_id, '-', Innings_no, '-', Over_id)) >= 50\n) AS S\nORDER BY (runs_conceded * 1.0) / overs_bowled\nLIMIT 1\n\n/* Answer the following: How many matches ended with a result margin of exactly 1 run? result margin refers to Result_margin = 1 and Match_result = 'runs' */\nSELECT COUNT(*) \nFROM match\nWHERE Match_result = 'runs' AND Result_margin = 1\n\n/* Answer the following: In which year did the first super-over occur? super-over refers to Eliminator = 'Y'; first year refers to MIN(Season_year) */\nSELECT MIN(Season_year) \nFROM match\nWHERE Eliminator = 'Y'\n\n/* Answer the following: Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "evidence": "",
            "raw_question": "Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match. no less than 100 runs refers to runs_scored >= 100; team lost refers to s.team_id <> m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.runs_scored >= 100\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: Which players scored at least 150 runs in a match that their team went on to win? at least 150 runs refers to runs_scored >= 150; team won refers to s.team_id = m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.runs_scored >= 150\n  AND s.team_id = m.winner_team_id;\n\n/* Answer the following: Retrieve the date and venue of every game where some player scored a century but the match ended in a tie. a century refers to runs_scored >= 100; a tie refers to winner_team_id IS NULL */\nSELECT DISTINCT m.date,\n       m.venue\nFROM Match AS m\nJOIN Player_Match_Stats AS s ON m.match_id = s.match_id\nWHERE s.runs_scored >= 100\n  AND m.winner_team_id IS NULL;\n\n/* Answer the following: List the names of players who hit at least 10 sixes in a single match while their side still lost that match. at least 10 sixes refers to sixes >= 10; lost refers to s.team_id <> m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.sixes >= 10\n  AND m.winner_team_id IS NOT NULL\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: How many matches did 'Virat Kohli' score more than 75 runs and yet his team did not win? more than 75 runs refers to runs_scored > 75; team did not win refers to s.team_id <> m.winner_team_id */\nSELECT COUNT(DISTINCT s.match_id)\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE p.name = 'Virat Kohli'\n  AND s.runs_scored > 75\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: Provide the list of teams that lost a match despite one of their players scoring 120 or more runs. lost refers to t.team_id <> m.winner_team_id; 120 or more runs refers to runs_scored >= 120 */\nSELECT DISTINCT t.name\nFROM Team  AS t\nJOIN Match AS m ON t.team_id IN (m.team1_id, m.team2_id)\nJOIN Player_Match_Stats AS s ON s.match_id = m.match_id\nWHERE s.team_id = t.team_id\n  AND s.runs_scored >= 120\n  AND t.team_id <> m.winner_team_id;\n\n/* Answer the following: What is the highest individual score made by a player whose team ended up losing the match? */\nSELECT MAX(s.runs_scored)\nFROM Player_Match_Stats AS s\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.team_id <> m.winner_team_id;\n\n/* Answer the following: Give the names of bowlers who took at least 5 wickets in a match their team lost. at least 5 wickets refers to wickets >= 5; lost refers to s.team_id <> m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.wickets >= 5\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: Which player scored the fastest century (100 or more runs in the fewest balls) in a match that his team lost? 100 or more runs refers to runs_scored >= 100; fastest refers to MIN(balls_faced); lost refers to s.team_id <> m.winner_team_id */\nSELECT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.runs_scored >= 100\n  AND s.team_id <> m.winner_team_id\nORDER BY s.balls_faced ASC\nLIMIT 1;\n\n/* Answer the following: Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "evidence": "",
            "raw_question": "Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which bowler has taken the highest number of wickets in season 3? highest number of wickets refers to MAX(SUM(wickets_taken)) */\nSELECT P.player_name\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 3\nGROUP BY P.player_id , P.player_name\nORDER BY SUM(S.wickets_taken) DESC\nLIMIT 1\n\n/* Answer the following: List the top 10 teams that have scored the greatest total runs across all seasons. greatest total runs refers to MAX(SUM(runs_scored)) */\nSELECT T.team_name\nFROM Teams AS T\nINNER JOIN Team_Match_Stats AS S ON T.team_id = S.team_id\nGROUP BY T.team_id , T.team_name\nORDER BY SUM(S.runs_scored) DESC\nLIMIT 10\n\n/* Answer the following: How many matches were played in season 6? */\nSELECT COUNT(*) \nFROM Matches \nWHERE season = 6\n\n/* Answer the following: Which player has the highest strike-rate in games played at the venue \u2018Mumbai\u2019? strike-rate refers to SUM(runs_scored)*100 / SUM(balls_faced) */\nSELECT P.player_name\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.venue = 'Mumbai'\nGROUP BY P.player_id , P.player_name\nHAVING SUM(S.balls_faced) > 0\nORDER BY (SUM(S.runs_scored) * 100.0 / SUM(S.balls_faced)) DESC\nLIMIT 1\n\n/* Answer the following: Show each bowler\u2019s average runs conceded per over in season 2. average runs conceded per over refers to SUM(runs_conceded) / SUM(overs_bowled) */\nSELECT P.player_name ,\n       SUM(S.runs_conceded) * 1.0 / SUM(S.overs_bowled) AS avg_runs_per_over\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 2\nGROUP BY P.player_id , P.player_name\n\n/* Answer the following: Which team won the most matches in season 4? most matches refers to MAX(COUNT(*)) where result = 'Win' */\nSELECT T.team_name\nFROM Teams AS T\nINNER JOIN Team_Match_Stats AS S ON T.team_id = S.team_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 4\n  AND S.result = 'Win'\nGROUP BY T.team_id , T.team_name\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: List all players who scored a century in season 1. century refers to runs_scored >= 100 */\nSELECT DISTINCT P.player_name\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 1\n  AND S.runs_scored >= 100\n\n/* Answer the following: What is the total number of sixes hit in final matches across all seasons? final matches refer to match_type = 'Final' */\nSELECT SUM(S.sixes)\nFROM Player_Match_Stats AS S\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.match_type = 'Final'\n\n/* Answer the following: Who is the youngest player to make his debut in season 7? youngest player refers to MAX(birth_date) among debut_season = 7 */\nSELECT P.player_name\nFROM Players AS P\nWHERE P.debut_season = 7\nORDER BY P.birth_date DESC\nLIMIT 1\n\n/* Answer the following: Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "evidence": "",
            "raw_question": "Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For each country, how many distinct players have appeared in at least one match? appeared in at least one match refers to COUNT(DISTINCT player_id) over Player_Match  */\nSELECT C.name,\n       COUNT(DISTINCT P.id) AS player_count\nFROM Countries AS C\nJOIN Players AS P ON P.country_id = C.id\nJOIN Player_Match AS PM ON PM.player_id = P.id\nGROUP BY C.name;\n\n/* Answer the following: Which player has the highest average runs per match in the 2019 season, considering only players who played 5 or more matches? highest average refers to MAX(AVG(runs)); 2019 season refers to Seasons.year = 2019; played 5 or more matches refers to COUNT(match_id) >= 5 */\nSELECT P.name\nFROM Players AS P\nJOIN Player_Match AS PM ON PM.player_id = P.id\nJOIN Matches AS M ON M.id = PM.match_id\nJOIN Seasons AS S ON S.id = M.season_id\nWHERE S.year = 2019\nGROUP BY P.id, P.name\nHAVING COUNT(PM.match_id) >= 5\nORDER BY AVG(PM.runs) DESC\nLIMIT 1;\n\n/* Answer the following: List the 10 matches that produced the highest total runs by all players combined. highest total runs refers to SUM(runs) ORDER BY DESC LIMIT 10 */\nSELECT M.id,\n       SUM(PM.runs) AS total_runs\nFROM Matches AS M\nJOIN Player_Match AS PM ON PM.match_id = M.id\nGROUP BY M.id\nORDER BY total_runs DESC\nLIMIT 10;\n\n/* Answer the following: What is the average number of wickets per match taken by players from Australia across all seasons? wickets per match per player refers to AVG(PM.wickets) grouped by player first, then averaged; Australia refers to Countries.name = 'Australia' */\nSELECT AVG(player_wkts_per_match)\nFROM (\n    SELECT P.id,\n           AVG(PM.wickets) AS player_wkts_per_match\n    FROM Players AS P\n    JOIN Countries AS C ON C.id = P.country_id\n    JOIN Player_Match AS PM ON PM.player_id = P.id\n    WHERE C.name = 'Australia'\n    GROUP BY P.id\n) AS sub;\n\n/* Answer the following: Give every season and the number of matches played in that season, ordered by the season that had the most matches. */\nSELECT S.year,\n       COUNT(M.id) AS matches_played\nFROM Seasons AS S\nJOIN Matches AS M ON M.season_id = S.id\nGROUP BY S.year\nORDER BY matches_played DESC;\n\n/* Answer the following: Which country does the player belong to who bowled the most balls in a single match, and how many balls did he bowl? most balls in a single match refers to MAX(PM.balls) */\nSELECT C.name,\n       PM.balls AS max_balls_in_match\nFROM Players AS P\nJOIN Countries AS C ON C.id = P.country_id\nJOIN Player_Match AS PM ON PM.player_id = P.id\nORDER BY PM.balls DESC\nLIMIT 1;\n\n/* Answer the following: For every season, what is Virat Kohli's strike rate (runs per 100 balls faced)? strike rate refers to (SUM(runs)*100)/SUM(balls) */\nSELECT S.year,\n       (SUM(PM.runs) * 100.0) / SUM(PM.balls) AS strike_rate\nFROM Players AS P\nJOIN Player_Match AS PM ON PM.player_id = P.id\nJOIN Matches AS M ON M.id = PM.match_id\nJOIN Seasons AS S ON S.id = M.season_id\nWHERE P.name = 'Virat Kohli'\nGROUP BY S.year\nORDER BY S.year;\n\n/* Answer the following: Which bowler has the best career economy rate (runs conceded per over) among those who have bowled at least 200 overs? best refers to MIN(economy), 200 overs refers to SUM(balls) >= 1200 */\nSELECT P.name\nFROM Players AS P\nJOIN Player_Match AS PM ON PM.player_id = P.id\nGROUP BY P.id, P.name\nHAVING SUM(PM.balls) >= 1200\nORDER BY (SUM(PM.runs) / (SUM(PM.balls) / 6.0)) ASC\nLIMIT 1;\n\n/* Answer the following: How many players have scored more than 1000 total runs across all their matches? */\nSELECT COUNT(*)\nFROM (\n    SELECT P.id\n    FROM Players AS P\n    JOIN Player_Match AS PM ON PM.player_id = P.id\n    GROUP BY P.id\n    HAVING SUM(PM.runs) > 1000\n) AS big_scorers;\n\n/* Answer the following: Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "evidence": "",
            "raw_question": "Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For every match, who was the bowler that took the most wickets, and on what date was the match played? */\nSELECT M.match_id ,\n       M.match_date ,\n       P.player_name\nFROM matches AS M\nJOIN (\n     /* count wickets for every bowler in every match */\n     SELECT match_id ,\n            bowler_id ,\n            COUNT(*) AS wkts\n     FROM ball_by_ball\n     WHERE wicket_type IS NOT NULL\n     GROUP BY match_id , bowler_id\n) AS W ON W.match_id = M.match_id\nJOIN players AS P ON P.player_id = W.bowler_id\n/* keep only the max-wicket bowler inside each match */\nWHERE (W.match_id , W.wkts) IN (\n     SELECT match_id ,\n            MAX(wkts)\n     FROM (\n          SELECT match_id ,\n                 bowler_id ,\n                 COUNT(*) AS wkts\n          FROM ball_by_ball\n          WHERE wicket_type IS NOT NULL\n          GROUP BY match_id , bowler_id\n     ) AS X\n     GROUP BY match_id\n);\n\n/* Answer the following: What is the average number of runs scored in power-play overs (overs 1-6) per innings across all matches? */\nSELECT AVG(pp_runs) \nFROM (\n     SELECT match_id ,\n            inning_no ,\n            SUM(runs_off_bat + extras) AS pp_runs\n     FROM ball_by_ball\n     WHERE over_id BETWEEN 1 AND 6\n     GROUP BY match_id , inning_no\n) AS P;\n\n/* Answer the following: Which team recorded the highest average runs per innings in the 2015 season? */\nSELECT T.team_name\nFROM teams   AS T\nJOIN (\n     /* average innings total for every batting team in 2015 */\n     SELECT batting_team_id ,\n            AVG(total_runs) AS avg_runs\n     FROM (\n          SELECT B.match_id ,\n                 B.inning_no ,\n                 B.batting_team_id ,\n                 SUM(B.runs_off_bat + B.extras) AS total_runs\n          FROM ball_by_ball AS B\n          JOIN matches AS M ON M.match_id = B.match_id\n          WHERE M.season_year = 2015\n          GROUP BY B.match_id , B.inning_no , B.batting_team_id\n     ) AS Inn\n     GROUP BY batting_team_id\n) AS A ON A.batting_team_id = T.team_id\nORDER BY A.avg_runs DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 batsmen who hit the most sixes during power-play overs. */\nSELECT P.player_name ,\n       COUNT(*) AS sixes\nFROM ball_by_ball AS B\nJOIN players     AS P ON P.player_id = B.batsman_id\nWHERE B.runs_off_bat = 6\n  AND B.over_id BETWEEN 1 AND 6\nGROUP BY P.player_name\nORDER BY sixes DESC\nLIMIT 5;\n\n/* Answer the following: For every season, which bowler had the best (minimum) economy rate, considering only bowlers who bowled at least 20 overs? */\nSELECT S.season_year ,\n       P.player_name\nFROM (\n     /* economy for eligible bowlers */\n     SELECT M.season_year ,\n            B.bowler_id ,\n            SUM(B.runs_off_bat + B.extras) /\n            (COUNT(*) / 6.0)                          AS econ\n     FROM ball_by_ball AS B\n     JOIN matches     AS M ON M.match_id = B.match_id\n     GROUP BY M.season_year , B.bowler_id\n     HAVING COUNT(*) >= 120            /* 120 balls = 20 overs */\n) AS S\nJOIN (\n     /* pick the minimum economy per season */\n     SELECT season_year ,\n            MIN(econ) AS best_econ\n     FROM (\n          SELECT M.season_year ,\n                 B.bowler_id ,\n                 SUM(B.runs_off_bat + B.extras) /\n                 (COUNT(*) / 6.0) AS econ\n          FROM ball_by_ball AS B\n          JOIN matches     AS M ON M.match_id = B.match_id\n          GROUP BY M.season_year , B.bowler_id\n          HAVING COUNT(*) >= 120\n     ) AS E\n     GROUP BY season_year\n) AS B ON B.season_year = S.season_year\n       AND B.best_econ  = S.econ\nJOIN players AS P ON P.player_id = S.bowler_id\nORDER BY S.season_year;\n\n/* Answer the following: Which match had the highest total number of extra runs (both innings combined) and how many extras were there? */\nSELECT M.match_id ,\n       E.total_extras\nFROM (\n     SELECT match_id ,\n            SUM(extras) AS total_extras\n     FROM ball_by_ball\n     GROUP BY match_id\n) AS E\nJOIN matches AS M ON M.match_id = E.match_id\nORDER BY E.total_extras DESC\nLIMIT 1;\n\n/* Answer the following: Who took the most catches in death overs (overs 17-20) across all seasons? */\nSELECT P.player_name\nFROM ball_by_ball AS B\nJOIN players     AS P ON P.player_id = B.fielder_id\nWHERE B.wicket_type = 'caught'\n  AND B.over_id BETWEEN 17 AND 20\nGROUP BY P.player_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average of the highest individual batsman scores for every innings across all matches? */\nSELECT AVG(top_runs)\nFROM (\n     /* highest run tally by a batsman in each (match, innings) */\n     SELECT match_id ,\n            inning_no ,\n            MAX(runs) AS top_runs\n     FROM (\n          SELECT match_id ,\n                 inning_no ,\n                 batsman_id ,\n                 SUM(runs_off_bat) AS runs\n          FROM ball_by_ball\n          GROUP BY match_id , inning_no , batsman_id\n     ) AS R\n     GROUP BY match_id , inning_no\n) AS T;\n\n/* Answer the following: Show the top 10 bowlers of the 2016 season with the highest percentage of dot balls bowled. */\nSELECT P.player_name ,\n       100.0 * SUM(CASE\n                     WHEN B.runs_off_bat + B.extras = 0 THEN 1\n                     ELSE 0\n                   END) / COUNT(*)  AS dot_ball_pct\nFROM ball_by_ball AS B\nJOIN matches     AS M ON M.match_id  = B.match_id\nJOIN players     AS P ON P.player_id = B.bowler_id\nWHERE M.season_year = 2016\nGROUP BY P.player_name\nORDER BY dot_ball_pct DESC\nLIMIT 10;\n\n/* Answer the following: For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "evidence": "",
            "raw_question": "For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which bowler conceded the highest number of runs in one single over in any match, and in which match did that over occur? */\nSELECT p.player_name ,\n       x.match_id ,\n       x.runs_in_over\nFROM   (\n          SELECT   d.match_id ,\n                   d.over_no ,\n                   d.bowler_id ,\n                   SUM(d.total_runs) AS runs_in_over\n          FROM     deliveries AS d\n          GROUP BY d.match_id ,\n                   d.over_no ,\n                   d.bowler_id\n          ORDER BY runs_in_over DESC\n          LIMIT    1\n       ) AS x\nJOIN   players AS p ON p.player_id = x.bowler_id;\n\n/* Answer the following: For each season, which batsman hit the most fours?  (a four is recorded when boundary_type = '4') */\nSELECT   m.season ,\n         p.player_name ,\n         MAX(four_cnt) AS total_fours\nFROM     (\n            SELECT   d.batsman_id ,\n                     m.season ,\n                     COUNT(*) AS four_cnt\n            FROM     deliveries AS d\n            JOIN     matches    AS m ON m.match_id = d.match_id\n            WHERE    d.boundary_type = '4'\n            GROUP BY d.batsman_id ,\n                     m.season\n         ) AS t\nJOIN     players AS p ON p.player_id = t.batsman_id\nGROUP BY m.season\nORDER BY m.season;\n\n/* Answer the following: List the five overs that produced the most total runs across all matches.  Show match id, innings, over number and total runs in that over. */\nSELECT d.match_id ,\n       d.innings_no ,\n       d.over_no ,\n       SUM(d.total_runs) AS runs_in_over\nFROM   deliveries AS d\nGROUP BY d.match_id ,\n         d.innings_no ,\n         d.over_no\nORDER BY runs_in_over DESC\nLIMIT 5;\n\n/* Answer the following: For every match, how many maiden overs (overs that gave away 0 runs) were bowled? */\nSELECT  d.match_id ,\n        COUNT(*) AS maiden_overs\nFROM    (\n          SELECT   match_id ,\n                   innings_no ,\n                   over_no ,\n                   SUM(total_runs) AS runs_in_over\n          FROM     deliveries\n          GROUP BY match_id ,\n                   innings_no ,\n                   over_no\n        ) AS d\nWHERE   d.runs_in_over = 0\nGROUP BY d.match_id\nORDER BY d.match_id;\n\n/* Answer the following: Which team has the highest average runs scored per over across all matches it has played? */\nSELECT   t.team_name ,\n         AVG(over_runs) AS avg_runs_per_over\nFROM     (\n            SELECT   m.team1_id  AS batting_team ,\n                     d.match_id ,\n                     d.innings_no ,\n                     d.over_no ,\n                     SUM(d.total_runs) AS over_runs\n            FROM     deliveries AS d\n            JOIN     matches    AS m ON m.match_id = d.match_id\n            GROUP BY d.match_id ,\n                     d.innings_no ,\n                     d.over_no\n         ) AS o\nJOIN     teams AS t ON t.team_id = o.batting_team\nGROUP BY t.team_id\nORDER BY avg_runs_per_over DESC\nLIMIT 1;\n\n/* Answer the following: Name the top three bowlers with the best economy rate (fewest runs conceded per over) among those who have bowled at least 20 overs. */\nWITH bowler_stats AS (\n     SELECT   bowler_id ,\n              COUNT(DISTINCT CONCAT(match_id,'-',innings_no,'-',over_no))          AS overs_bowled ,\n              SUM(total_runs)                                                     AS runs_conceded ,\n              SUM(total_runs)*1.0 / COUNT(DISTINCT CONCAT(match_id,'-',innings_no,'-',over_no)) AS econ\n     FROM     deliveries\n     GROUP BY bowler_id\n     HAVING   overs_bowled >= 20\n)\nSELECT  p.player_name ,\n        b.econ\nFROM    bowler_stats AS b\nJOIN    players       AS p ON p.player_id = b.bowler_id\nORDER BY b.econ\nLIMIT 3;\n\n/* Answer the following: List all matches where any single over contained at least three boundaries (4s or 6s) off the same bowler.  Show match id, bowler and over number. */\nSELECT DISTINCT\n       d.match_id ,\n       p.player_name AS bowler ,\n       d.over_no\nFROM   deliveries AS d\nJOIN   players    AS p ON p.player_id = d.bowler_id\nWHERE  d.boundary_type IN ('4','6')\nGROUP BY d.match_id ,\n         d.bowler_id ,\n         d.over_no\nHAVING COUNT(*) >= 3\nORDER BY d.match_id , d.over_no;\n\n/* Answer the following: What is the highest partnership (total runs scored by a pair of batsmen without getting out) in any innings, and who were the two batsmen involved? */\nWITH ball_seq AS (\n     SELECT   match_id ,\n              innings_no ,\n              over_no ,\n              ball_no ,\n              batsman_id ,\n              non_striker_id ,\n              total_runs ,\n              wicket_type\n     FROM     deliveries\n),\npartnerships AS (\n     SELECT   match_id ,\n              innings_no ,\n              batsman_id ,\n              non_striker_id ,\n              SUM(total_runs) AS partnership_runs\n     FROM     ball_seq\n     GROUP BY match_id ,\n              innings_no ,\n              batsman_id ,\n              non_striker_id\n)\nSELECT  p1.player_name AS striker ,\n        p2.player_name AS non_striker ,\n        pr.match_id ,\n        pr.innings_no ,\n        pr.partnership_runs\nFROM    partnerships AS pr\nJOIN    players       AS p1 ON p1.player_id = pr.batsman_id\nJOIN    players       AS p2 ON p2.player_id = pr.non_striker_id\nORDER BY pr.partnership_runs DESC\nLIMIT 1;\n\n/* Answer the following: Which bowler has taken the most wickets in death overs (overs 16-20) across all matches?  Return bowler name and number of wickets. */\nSELECT  p.player_name ,\n        COUNT(*) AS wickets_in_death\nFROM    deliveries AS d\nJOIN    players    AS p ON p.player_id = d.bowler_id\nWHERE   d.over_no BETWEEN 16 AND 20\n  AND   d.wicket_type IS NOT NULL\nGROUP BY d.bowler_id\nORDER BY wickets_in_death DESC\nLIMIT 1;\n\n/* Answer the following: Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "evidence": "",
            "raw_question": "Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many orders were placed in 2018? */\nSELECT COUNT(*) \nFROM orders\nWHERE strftime('%Y', order_date) = '2018';\n\n/* Answer the following: What is the total sales amount for each product category in 2017? */\nSELECT c.name AS category,\n       SUM(oi.quantity * oi.unit_price) AS total_sales\nFROM orders AS o\nJOIN order_items AS oi ON o.id = oi.order_id\nJOIN products AS p      ON p.id = oi.product_id\nJOIN categories AS c    ON c.id = p.category\nWHERE strftime('%Y', o.order_date) = '2017'\nGROUP BY c.name\nORDER BY total_sales DESC;\n\n/* Answer the following: List the five customers who spent the most in 2016. */\nSELECT c.first_name || ' ' || c.last_name AS customer,\n       SUM(o.total_amount) AS total_spent\nFROM customers AS c\nJOIN orders    AS o ON o.customer_id = c.id\nWHERE strftime('%Y', o.order_date) = '2016'\nGROUP BY c.id\nORDER BY total_spent DESC\nLIMIT 5;\n\n/* Answer the following: What was the average delivery time (in days) for each month of 2018? */\nSELECT strftime('%m', o.order_date) AS month,\n       AVG(julianday(o.delivered_date) - julianday(o.order_date)) AS avg_delivery_days\nFROM orders AS o\nWHERE strftime('%Y', o.order_date) = '2018'\n  AND o.delivered_date IS NOT NULL\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Which product has the highest number of returned orders? */\nSELECT p.name\nFROM products AS p\nJOIN order_items AS oi ON oi.product_id = p.id\nJOIN orders      AS o  ON o.id = oi.order_id\nWHERE o.status = 'returned'\nGROUP BY p.id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which supplier shipped the largest number of products in 2017? */\nSELECT s.name,\n       SUM(oi.quantity) AS total_units_shipped\nFROM suppliers  AS s\nJOIN products   AS p  ON p.supplier_id = s.id\nJOIN order_items AS oi ON oi.product_id = p.id\nJOIN orders      AS o  ON o.id = oi.order_id\nWHERE strftime('%Y', o.order_date) = '2017'\nGROUP BY s.id\nORDER BY total_units_shipped DESC\nLIMIT 1;\n\n/* Answer the following: For each year from 2016 to 2018, what percentage of orders were delivered within three days? */\nSELECT strftime('%Y', order_date) AS year,\n       ROUND(\n           100.0 * SUM(CASE\n                           WHEN julianday(delivered_date) - julianday(order_date) <= 3\n                           THEN 1 ELSE 0 END) / COUNT(*),\n           2\n       ) AS pct_delivered_within_3_days\nFROM orders\nWHERE strftime('%Y', order_date) BETWEEN '2016' AND '2018'\n  AND delivered_date IS NOT NULL\nGROUP BY year\nORDER BY year;\n\n/* Answer the following: How many unique customers placed more than five orders in 2018? */\nSELECT COUNT(DISTINCT customer_id)\nFROM (\n    SELECT customer_id,\n           COUNT(*) AS num_orders\n    FROM orders\n    WHERE strftime('%Y', order_date) = '2018'\n    GROUP BY customer_id\n    HAVING num_orders > 5\n);\n\n/* Answer the following: Show the total revenue for each month from 2016-2018. */\nSELECT strftime('%Y', order_date) AS year,\n       strftime('%m', order_date) AS month,\n       SUM(total_amount)          AS revenue\nFROM orders\nWHERE strftime('%Y', order_date) IN ('2016','2017','2018')\nGROUP BY year, month\nORDER BY year, month;\n\n/* Answer the following: Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "evidence": "",
            "raw_question": "What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many customers have placed more than 5 orders overall? */\nSELECT COUNT(*) \nFROM (\n    SELECT C.customer_unique_id\n    FROM customers AS C\n    JOIN orders AS O ON O.customer_id = C.customer_id\n    GROUP BY C.customer_unique_id\n    HAVING COUNT(O.order_id) > 5\n);\n\n/* Answer the following: Which product category has the highest average item price among products weighing less than 1000 grams? */\nSELECT P.product_category_name\nFROM products AS P\nJOIN order_items AS OI ON OI.product_id = P.product_id\nWHERE P.product_weight_g < 1000\nGROUP BY P.product_category_name\nORDER BY AVG(OI.price) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average review score for orders that were purchased in 2017? */\nSELECT AVG(R.review_score)\nFROM orders AS O\nJOIN order_reviews AS R ON R.order_id = O.order_id\nWHERE strftime('%Y', O.order_purchase_timestamp) = '2017';\n\n/* Answer the following: List the top 10 sellers who have collected the highest total freight value. */\nSELECT S.seller_id\nFROM sellers AS S\nJOIN order_items AS OI ON OI.seller_id = S.seller_id\nGROUP BY S.seller_id\nORDER BY SUM(OI.freight_value) DESC\nLIMIT 10;\n\n/* Answer the following: How many orders were delivered after their estimated delivery date? */\nSELECT COUNT(*)\nFROM orders\nWHERE order_delivered_customer_date IS NOT NULL\n  AND order_estimated_delivery_date IS NOT NULL\n  AND order_delivered_customer_date > order_estimated_delivery_date;\n\n/* Answer the following: What is the most frequently used payment type by customers from the state 'SP'? */\nSELECT OP.payment_type\nFROM customers AS C\nJOIN orders AS O  ON O.customer_id = C.customer_id\nJOIN order_payments AS OP ON OP.order_id = O.order_id\nWHERE C.customer_state = 'SP'\nGROUP BY OP.payment_type\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Find the average number of days between order approval and the shipping-limit date for orders whose status is 'shipped'. */\nSELECT AVG(julianday(OI.shipping_limit_date) - julianday(O.order_approved_at)) AS avg_days\nFROM orders AS O\nJOIN order_items AS OI ON OI.order_id = O.order_id\nWHERE O.order_status = 'shipped'\n  AND O.order_approved_at IS NOT NULL;\n\n/* Answer the following: Which city has the largest number of registered sellers, and how many sellers are there in that city? */\nSELECT seller_city, COUNT(*) AS seller_count\nFROM sellers\nGROUP BY seller_city\nORDER BY seller_count DESC\nLIMIT 1;\n\n/* Answer the following: What is the average number of payment installments for credit-card transactions on orders whose total payment value exceeds 1000? */\nSELECT AVG(installments)\nFROM (\n    SELECT MAX(OP.payment_installments) AS installments\n    FROM order_payments AS OP\n    WHERE OP.payment_type = 'credit_card'\n    GROUP BY OP.order_id\n    HAVING SUM(OP.payment_value) > 1000\n);\n\n/* Answer the following: Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "evidence": "",
            "raw_question": "Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which five customers have spent the least in total on delivered orders, and what is the average of those five customers\u2019 total payments together with the average number of their delivered orders? */\nSELECT\n        AVG(total_spent)  AS avg_of_least_spent,\n        AVG(order_cnt)    AS avg_of_order_cnt\nFROM   (\n        SELECT  customer_id,\n                SUM(payment_amount) AS total_spent,\n                COUNT(*)            AS order_cnt\n        FROM    orders\n        WHERE   status = 'Delivered'\n        GROUP BY customer_id\n        ORDER BY total_spent ASC\n        LIMIT   5\n) least_five;\n\n\n/* Answer the following: What is the total payment amount made with a credit card for delivered orders in the year 2023? 2023 refers to order_date between '2023-01-01' and '2023-12-31'. */\nSELECT SUM(payment_amount)\nFROM   orders\nWHERE  status = 'Delivered'\n  AND  payment_method = 'Credit Card'\n  AND  order_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n\n/* Answer the following: List the three cities that received the highest number of orders (of any status). Show only the city names. */\nSELECT c.city_name\nFROM   cities AS c\nJOIN   orders AS o ON o.city_id = c.city_id\nGROUP  BY c.city_id\nORDER  BY COUNT(*) DESC\nLIMIT  3;\n\n\n/* Answer the following: How many customers have placed at least ten delivered orders in total? at least ten refers to HAVING COUNT(*) >= 10. */\nSELECT COUNT(*)\nFROM  (\n       SELECT customer_id\n       FROM   orders\n       WHERE  status = 'Delivered'\n       GROUP  BY customer_id\n       HAVING COUNT(*) >= 10\n) AS freq_customers;\n\n\n/* Answer the following: Which month in 2022 had the smallest total payment amount for delivered orders? Return the month number. */\nSELECT strftime('%m', order_date) AS month\nFROM   orders\nWHERE  status = 'Delivered'\n  AND  order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP  BY month\nORDER  BY SUM(payment_amount) ASC\nLIMIT  1;\n\n\n/* Answer the following: What percentage of all orders were returned? Returned refers to status = 'Returned'. */\nSELECT \n       100.0 * SUM(CASE WHEN status = 'Returned' THEN 1 ELSE 0 END) / COUNT(*) \n       AS return_percentage\nFROM   orders;\n\n\n/* Answer the following: Provide the average payment amount for each of the following payment methods: \u2018Credit Card\u2019, \u2018PayPal\u2019, and \u2018Cash\u2019. */\nSELECT payment_method,\n       AVG(payment_amount) AS avg_payment\nFROM   orders\nWHERE  payment_method IN ('Credit Card','PayPal','Cash')\nGROUP  BY payment_method;\n\n\n/* Answer the following: For each city in the state of 'California', give the number of delivered orders when that count exceeds 50. Return city name and the count. */\nSELECT c.city_name,\n       COUNT(*) AS delivered_cnt\nFROM   cities  AS c\nJOIN   orders  AS o ON o.city_id = c.city_id\nWHERE  c.state  = 'California'\n  AND  o.status = 'Delivered'\nGROUP  BY c.city_id\nHAVING COUNT(*) > 50;\n\n\n/* Answer the following: Which cities have no orders with a status other than 'Delivered'? List their names. */\nSELECT c.city_name\nFROM   cities AS c\nWHERE  NOT EXISTS (\n        SELECT 1\n        FROM   orders AS o\n        WHERE  o.city_id = c.city_id\n          AND  o.status <> 'Delivered'\n);\n\n\n/* Answer the following: Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "evidence": "",
            "raw_question": "Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which month recorded the highest delivered-orders volume in the year that had the highest annual delivered-orders volume among 2015, 2016 and 2017? the year that had the highest annual delivered-orders volume refers to MAX(volume) in annual_delivered_orders */\nSELECT MAX(volume)\nFROM monthly_delivered_orders\nWHERE year = (\n    SELECT year\n    FROM annual_delivered_orders\n    WHERE year IN (2015, 2016, 2017)\n    ORDER BY volume DESC\n    LIMIT 1\n);\n\n/* Answer the following: What is the lowest monthly delivered-orders volume in 2018? lowest monthly refers to MIN(volume) */\nSELECT MIN(volume)\nFROM monthly_delivered_orders\nWHERE year = 2018;\n\n/* Answer the following: Find the average monthly delivered-orders volume for 2017. average monthly refers to AVG(volume) */\nSELECT AVG(volume)\nFROM monthly_delivered_orders\nWHERE year = 2017;\n\n/* Answer the following: How many months in 2016 saw delivered-orders volume greater than 40,000? */\nSELECT COUNT(*)\nFROM monthly_delivered_orders\nWHERE year = 2016\n  AND volume > 40000;\n\n/* Answer the following: In 2018, which month had the second-highest delivered-orders volume? second-highest refers to the value after ordering by volume DESC and skipping the first row */\nSELECT month\nFROM monthly_delivered_orders\nWHERE year = 2018\nORDER BY volume DESC\nLIMIT 1 OFFSET 1;\n\n/* Answer the following: Between 2016 and 2018, which year experienced the highest average monthly delivered-orders volume? highest average monthly refers to MAX(AVG(volume)) across years */\nSELECT year\nFROM monthly_delivered_orders\nWHERE year IN (2016, 2017, 2018)\nGROUP BY year\nORDER BY AVG(volume) DESC\nLIMIT 1;\n\n/* Answer the following: What was the total delivered-orders volume in the fourth quarter (October\u2013December) of 2017? total refers to SUM(volume) */\nSELECT SUM(volume)\nFROM monthly_delivered_orders\nWHERE year = 2017\n  AND month IN (10, 11, 12);\n\n/* Answer the following: List the months in 2018 where the delivered-orders volume was lower than the annual average for 2016. annual average for 2016 refers to AVG(volume) in 2016 */\nSELECT month\nFROM monthly_delivered_orders\nWHERE year = 2018\n  AND volume < (\n      SELECT AVG(volume)\n      FROM monthly_delivered_orders\n      WHERE year = 2016\n  );\n\n/* Answer the following: Which year between 2016 and 2018 had the largest gap between its highest and lowest monthly delivered-orders volume? largest gap refers to MAX(max(volume) - min(volume)) */\nSELECT year\nFROM monthly_delivered_orders\nWHERE year IN (2016, 2017, 2018)\nGROUP BY year\nORDER BY (MAX(volume) - MIN(volume)) DESC\nLIMIT 1;\n\n/* Answer the following: What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me find the sellers respectively with the highest number of distinct customers, highest profit, highest number of distinct orders, and most 5-star ratings, in delivered orders, along with their corresponding values? ",
            "evidence": "",
            "raw_question": "Could you help me find the sellers respectively with the highest number of distinct customers, highest profit, highest number of distinct orders, and most 5-star ratings, in delivered orders, along with their corresponding values? ",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which product category has the highest average item price among orders that were delivered? delivered refers to order_status = 'delivered'. */\nSELECT P.product_category_name\nFROM products AS P\nJOIN order_items AS OI ON P.product_id = OI.product_id\nJOIN orders AS O ON O.order_id = OI.order_id\nWHERE O.order_status = 'delivered'\nGROUP BY P.product_category_name\nORDER BY AVG(OI.price) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers have placed more than 3 orders? more than 3 orders refers to COUNT(order_id) > 3. */\nSELECT COUNT(DISTINCT customer_id)\nFROM (\n    SELECT customer_id\n    FROM orders\n    GROUP BY customer_id\n    HAVING COUNT(order_id) > 3\n) AS frequent_buyers;\n\n/* Answer the following: Which seller has received the highest total freight value from delivered orders? delivered refers to order_status = 'delivered'. */\nSELECT OI.seller_id\nFROM order_items AS OI\nJOIN orders AS O ON O.order_id = OI.order_id\nWHERE O.order_status = 'delivered'\nGROUP BY OI.seller_id\nORDER BY SUM(OI.freight_value) DESC\nLIMIT 1;\n\n/* Answer the following: During which month (format YYYY-MM) were the most orders canceled? canceled refers to order_status = 'canceled'. */\nSELECT strftime('%Y-%m', order_purchase_timestamp) AS month,\n       COUNT(*) AS canceled_orders\nFROM orders\nWHERE order_status = 'canceled'\nGROUP BY month\nORDER BY canceled_orders DESC\nLIMIT 1;\n\n/* Answer the following: What is the average review score of orders paid with a credit card? credit card refers to payment_type = 'credit_card'. */\nSELECT AVG(R.review_score)\nFROM order_reviews AS R\nJOIN orders AS O ON O.order_id = R.order_id\nJOIN order_payments AS P ON P.order_id = O.order_id\nWHERE P.payment_type = 'credit_card';\n\n/* Answer the following: Which Brazilian state has the largest number of sellers? */\nSELECT seller_state\nFROM sellers\nGROUP BY seller_state\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which product has the highest quantity of items sold in delivered orders? delivered refers to order_status = 'delivered'. */\nSELECT OI.product_id\nFROM order_items AS OI\nJOIN orders AS O ON O.order_id = OI.order_id\nWHERE O.order_status = 'delivered'\nGROUP BY OI.product_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many orders were fulfilled by more than one distinct seller? */\nSELECT COUNT(*)\nFROM (\n    SELECT order_id\n    FROM order_items\n    GROUP BY order_id\n    HAVING COUNT(DISTINCT seller_id) > 1\n) AS multi_seller_orders;\n\n/* Answer the following: What percentage of reviews for delivered orders are 5-star reviews? delivered refers to order_status = 'delivered'. */\nSELECT 100.0 * SUM(CASE WHEN R.review_score = 5 THEN 1 ELSE 0 END) / COUNT(*) AS percent_five_star\nFROM order_reviews AS R\nJOIN orders AS O ON O.order_id = R.order_id\nWHERE O.order_status = 'delivered';\n\n/* Answer the following: Could you help me find the sellers who excel in the following categories, considering only delivered orders: the seller with the highest number of distinct customer unique IDs, the seller with the highest profit (calculated as price minus freight value), the seller with the highest number of distinct orders, and the seller with the most 5-star ratings? For each category, please provide the seller ID and the corresponding value, labeling each row with a description of the achievement.",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "evidence": "",
            "raw_question": "Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the average price of the most expensive product in each product category? most expensive product refers to MAX(price) in every category */\nSELECT AVG(MaxPrice) \nFROM (\n    SELECT MAX(price) AS MaxPrice\n    FROM products\n    GROUP BY category_id\n) AS sub;\n\n/* Answer the following: For every year, how many payments were processed by the payment method that handled the greatest number of payments in that same year? greatest number of payments refers to MAX(cnt) per year */\nSELECT order_year , SUM(top_cnt) AS total_payments\nFROM (\n    SELECT order_year ,\n           MAX(cnt) AS top_cnt\n    FROM (\n        SELECT strftime('%Y', payment_date) AS order_year ,\n               payment_method ,\n               COUNT(*) AS cnt\n        FROM payments\n        GROUP BY order_year , payment_method\n    ) AS yearly\n    GROUP BY order_year\n) AS top_per_year\nGROUP BY order_year;\n\n/* Answer the following: Give the supplier id that provides the largest number of products in each product category. largest number of products refers to MAX(product_cnt) in every category */\nSELECT category_id , supplier_id\nFROM (\n    SELECT category_id ,\n           supplier_id ,\n           COUNT(*) AS product_cnt ,\n           RANK() OVER (PARTITION BY category_id ORDER BY COUNT(*) DESC) AS rk\n    FROM products\n    JOIN product_suppliers USING (product_id)\n    GROUP BY category_id , supplier_id\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: What is the average quantity sold of the best-selling product (highest total quantity) in each product category? highest total quantity refers to MAX(total_qty) in a category */\nSELECT AVG(best_qty)\nFROM (\n    SELECT MAX(total_qty) AS best_qty\n    FROM (\n        SELECT category_id ,\n               product_id ,\n               SUM(quantity) AS total_qty\n        FROM orders\n        JOIN products USING (product_id)\n        GROUP BY category_id , product_id\n    ) AS cat_prod\n    GROUP BY category_id\n) AS best_per_cat;\n\n/* Answer the following: Which employee has the longest tenure in every department? longest tenure refers to earliest hire_date */\nSELECT department_id , employee_name\nFROM (\n    SELECT department_id ,\n           employee_name ,\n           hire_date ,\n           RANK() OVER (PARTITION BY department_id ORDER BY hire_date) AS rk\n    FROM employees\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: For each customer, how much did they spend in their favourite category, where favourite category is the one on which the customer spent the most money?  */\nSELECT customer_id ,\n       category_spend AS favourite_category_spend\nFROM (\n    SELECT customer_id ,\n           category_id ,\n           SUM(amount) AS category_spend ,\n           RANK() OVER (PARTITION BY customer_id ORDER BY SUM(amount) DESC) AS rk\n    FROM orders\n    JOIN payments  USING (order_id)\n    JOIN products  USING (product_id)\n    GROUP BY customer_id , category_id\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: What is the average rating of the highest-rated product in each category? highest-rated product refers to MAX(rating) in every category */\nSELECT AVG(max_rating)\nFROM (\n    SELECT MAX(rating) AS max_rating\n    FROM reviews\n    JOIN products USING (product_id)\n    GROUP BY category_id\n) AS best_in_cat;\n\n/* Answer the following: Which region generated the greatest sales from its single best-selling product? best-selling product refers to product with MAX(quantity) in the region; greatest sales means MAX(product_sales) across regions */\nSELECT region_name\nFROM (\n    SELECT region_id ,\n           region_name ,\n           SUM(price * quantity) AS product_sales ,\n           RANK() OVER (ORDER BY SUM(price * quantity) DESC) AS rk\n    FROM (\n        SELECT region_id ,\n               product_id ,\n               SUM(quantity) AS quantity\n        FROM orders\n        JOIN customers USING (customer_id)\n        GROUP BY region_id , product_id\n    ) AS region_best\n    JOIN products USING (product_id)\n    JOIN regions  USING (region_id)\n    GROUP BY region_id\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: What is the total revenue generated by the payment method that is the most preferred overall, where most preferred means the payment method with the highest number of payments in the whole database? */\nSELECT SUM(amount)\nFROM payments\nWHERE payment_method = (\n    SELECT payment_method\n    FROM payments\n    GROUP BY payment_method\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n\n/* Answer the following: Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "evidence": "",
            "raw_question": "Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different cities are present in the olist_geolocation table? different cities refers to COUNT(DISTINCT geolocation_city) */\nSELECT COUNT(DISTINCT geolocation_city) AS num_cities\nFROM olist_geolocation;\n\n/* Answer the following: Which state has the highest number of geolocation rows in the dataset? highest number refers to MAX(record_count) */\nSELECT geolocation_state\nFROM olist_geolocation\nGROUP BY geolocation_state\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: In the state 'SP', which city is located furthest north? furthest north refers to MAX(geolocation_lat); 'SP' refers to geolocation_state = 'SP' */\nSELECT geolocation_city\nFROM olist_geolocation\nWHERE geolocation_state = 'SP'\nORDER BY geolocation_lat DESC\nLIMIT 1;\n\n/* Answer the following: What is the average longitude of all geolocations whose zip code prefix is between 1000 and 1999? between 1000 and 1999 refers to geolocation_zip_code_prefix BETWEEN 1000 AND 1999 */\nSELECT AVG(geolocation_lng) AS avg_longitude\nFROM olist_geolocation\nWHERE geolocation_zip_code_prefix BETWEEN 1000 AND 1999;\n\n/* Answer the following: List the first 10 distinct zip code prefixes that occur in state 'MG' in ascending order. state 'MG' refers to geolocation_state = 'MG' */\nSELECT DISTINCT geolocation_zip_code_prefix\nFROM olist_geolocation\nWHERE geolocation_state = 'MG'\nORDER BY geolocation_zip_code_prefix\nLIMIT 10;\n\n/* Answer the following: What is the difference between the maximum and minimum latitude recorded in the table? difference refers to MAX(geolocation_lat) - MIN(geolocation_lat) */\nSELECT MAX(geolocation_lat) - MIN(geolocation_lat) AS latitude_range\nFROM olist_geolocation;\n\n/* Answer the following: How many states have at least one geolocation south of latitude -30? south of latitude -30 refers to geolocation_lat < -30 */\nSELECT COUNT(*)\nFROM (\n    SELECT geolocation_state\n    FROM olist_geolocation\n    GROUP BY geolocation_state\n    HAVING MIN(geolocation_lat) < -30\n) AS sub;\n\n/* Answer the following: Which state\u2013city pair shows the greatest spread in longitude? greatest spread refers to (MAX(geolocation_lng) - MIN(geolocation_lng)) being the largest */\nSELECT geolocation_state,\n       geolocation_city\nFROM olist_geolocation\nGROUP BY geolocation_state, geolocation_city\nORDER BY (MAX(geolocation_lng) - MIN(geolocation_lng)) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average number of geolocation records per city? average number refers to AVG(city_count) where city_count is COUNT(*) per city */\nSELECT AVG(city_count) AS avg_records_per_city\nFROM (\n    SELECT geolocation_city, COUNT(*) AS city_count\n    FROM olist_geolocation\n    GROUP BY geolocation_city\n) AS city_counts;\n\n/* Answer the following: In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "evidence": "",
            "raw_question": "In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which customer has placed the highest number of orders that were paid using the 'Credit Card' payment type? */\nSELECT o.customer_id\nFROM orders AS o\nJOIN payments AS p ON p.order_id = o.order_id\nWHERE p.payment_type = 'Credit Card'\nGROUP BY o.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: What is the total revenue generated from products in the 'Home Appliances' category during the first quarter of 2023? */\nSELECT SUM(oi.quantity * oi.unit_price) AS total_revenue\nFROM order_items AS oi\nJOIN products      AS pr ON pr.product_id   = oi.product_id\nJOIN categories    AS c  ON c.category_id   = pr.category_id\nJOIN orders        AS o  ON o.order_id      = oi.order_id\nWHERE c.category_name = 'Home Appliances'\n  AND o.order_date BETWEEN '2023-01-01' AND '2023-03-31'\n\n/* Answer the following: List the top three payment types ranked by number of transactions. */\nSELECT p.payment_type , COUNT(*) AS num_payments\nFROM payments AS p\nGROUP BY p.payment_type\nORDER BY num_payments DESC\nLIMIT 3\n\n/* Answer the following: Give the names of three products that have never appeared in any order. */\nSELECT pr.name\nFROM products AS pr\nLEFT JOIN order_items AS oi ON oi.product_id = pr.product_id\nWHERE oi.product_id IS NULL\nLIMIT 3\n\n/* Answer the following: For every product category, what is the average list price of the products that belong to it? */\nSELECT c.category_name , AVG(pr.price) AS avg_product_price\nFROM categories AS c\nJOIN products  AS pr ON pr.category_id = c.category_id\nGROUP BY c.category_name\n\n/* Answer the following: Which month of the year 2022 recorded the highest total number of payments, and how many payments were made then? */\nSELECT strftime('%Y-%m', p.payment_date) AS month , COUNT(*) AS payment_count\nFROM payments AS p\nWHERE p.payment_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY month\nORDER BY payment_count DESC\nLIMIT 1\n\n/* Answer the following: Identify the customer who purchased the largest total quantity of items across all of their orders. */\nSELECT o.customer_id\nFROM orders AS o\nJOIN order_items AS oi ON oi.order_id = o.order_id\nGROUP BY o.customer_id\nORDER BY SUM(oi.quantity) DESC\nLIMIT 1\n\n/* Answer the following: Which product category has the lowest total sales revenue, and what is that revenue? */\nSELECT c.category_name , SUM(oi.quantity * oi.unit_price) AS total_revenue\nFROM categories   AS c\nJOIN products     AS pr ON pr.category_id = c.category_id\nJOIN order_items  AS oi ON oi.product_id  = pr.product_id\nGROUP BY c.category_name\nORDER BY total_revenue ASC\nLIMIT 1\n\n/* Answer the following: How many distinct customers have made at least one purchase using BOTH 'Debit Card' and 'Credit Card' payment types? */\nSELECT COUNT(*) \nFROM (\n    SELECT o.customer_id\n    FROM orders AS o\n    JOIN payments AS p1 ON p1.order_id = o.order_id AND p1.payment_type = 'Debit Card'\n    JOIN payments AS p2 ON p2.order_id = o.order_id AND p2.payment_type = 'Credit Card'\n    GROUP BY o.customer_id\n) AS dual_payers\n\n/* Answer the following: Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "n_examples": 9,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "evidence": "",
            "raw_question": "Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the longest French-language film that belongs to the \u201cDocumentary\u201d category? */\nSELECT f.title\nFROM film AS f\nJOIN film_category AS fc ON f.film_id = fc.film_id\nJOIN category AS c ON c.category_id = fc.category_id\nJOIN language AS l ON l.language_id = f.language_id\nWHERE c.name = 'Documentary' AND l.name = 'French'\nORDER BY f.length DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct actors have appeared in films rated \u201cR\u201d that were released before 2005? */\nSELECT COUNT(DISTINCT fa.actor_id)\nFROM film_actor AS fa\nJOIN film AS f ON f.film_id = fa.film_id\nWHERE f.rating = 'R' AND f.release_year < 2005;\n\n/* Answer the following: What is the average running time of all \u201cAnimation\u201d films released in 2006? */\nSELECT AVG(f.length)\nFROM film AS f\nJOIN film_category AS fc ON f.film_id = fc.film_id\nJOIN category AS c ON c.category_id = fc.category_id\nWHERE c.name = 'Animation' AND f.release_year = 2006;\n\n/* Answer the following: List the three categories that contain the largest number of films (show category names only). */\nSELECT c.name\nFROM category AS c\nJOIN film_category AS fc ON c.category_id = fc.category_id\nGROUP BY c.category_id, c.name\nORDER BY COUNT(fc.film_id) DESC\nLIMIT 3;\n\n/* Answer the following: Which language has the smallest number of films that are rated \u201cPG-13\u201d? */\nSELECT l.name\nFROM language AS l\nJOIN film AS f ON l.language_id = f.language_id\nWHERE f.rating = 'PG-13'\nGROUP BY l.language_id, l.name\nORDER BY COUNT(f.film_id) ASC\nLIMIT 1;\n\n/* Answer the following: Give the full name of the actor who appeared in the greatest number of films released in 2006. */\nSELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name\nFROM actor AS a\nJOIN film_actor AS fa ON a.actor_id = fa.actor_id\nJOIN film AS f ON f.film_id = fa.film_id\nWHERE f.release_year = 2006\nGROUP BY a.actor_id\nORDER BY COUNT(fa.film_id) DESC\nLIMIT 1;\n\n/* Answer the following: How many films are rated \u201cNC-17\u201d and have a running time longer than 180 minutes? */\nSELECT COUNT(film_id)\nFROM film\nWHERE rating = 'NC-17' AND length > 180;\n\n/* Answer the following: List all category names that do not have any films released after 2004. */\nSELECT c.name\nFROM category AS c\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM film_category AS fc\n    JOIN film AS f ON f.film_id = fc.film_id\n    WHERE fc.category_id = c.category_id\n      AND f.release_year > 2004\n);\n\n/* Answer the following: What are the titles of all English-language \u201cSports\u201d films whose running time is under 60 minutes? */\nSELECT f.title\nFROM film AS f\nJOIN language AS l ON l.language_id = f.language_id\nJOIN film_category AS fc ON fc.film_id = f.film_id\nJOIN category AS c ON c.category_id = fc.category_id\nWHERE l.name = 'English' AND c.name = 'Sports' AND f.length < 60;\n\n/* Answer the following: Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "n_examples": 9,
            "db_id": "Pagila"
        },
        {
            "question": "Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "evidence": "",
            "raw_question": "Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which film category has the highest number of rentals made by customers that live in cities whose name starts with 'B'?  starts with 'B' refers to ci.city LIKE 'B%' */\nSELECT c.name\nFROM category         AS c\nJOIN film_category    AS fc ON fc.category_id = c.category_id\nJOIN inventory        AS i  ON i.film_id      = fc.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE 'B%'\nGROUP BY c.category_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total rental-hours for the category \u201cDrama\u201d in all cities whose name contains a hyphen?  contains a hyphen refers to ci.city LIKE '%-%' ; rental-hours refers to SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) */\nSELECT SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) AS total_hours\nFROM category         AS c\nJOIN film_category    AS fc ON fc.category_id = c.category_id\nJOIN inventory        AS i  ON i.film_id      = fc.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE c.name = 'Drama'\n  AND ci.city LIKE '%-%';\n\n/* Answer the following: Give the average film length (in minutes) of movies rented by customers living in cities that start with 'A'.  starts with 'A' refers to ci.city LIKE 'A%' */\nSELECT AVG(f.length)\nFROM film             AS f\nJOIN inventory        AS i  ON i.film_id      = f.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE 'A%';\n\n/* Answer the following: Which city that contains a hyphen has the highest total rental-hours?  contains a hyphen refers to ci.city LIKE '%-%' ; highest total rental-hours refers to MAX(SUM hours) */\nSELECT ci.city\nFROM rental           AS r\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE '%-%'\nGROUP BY ci.city_id\nORDER BY SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct film categories have at least 100 rentals in cities whose name starts with 'A' or contains a hyphen?  starts with 'A' refers to ci.city LIKE 'A%' ; contains a hyphen refers to ci.city LIKE '%-%' ; at least 100 rentals refers to HAVING COUNT(*) >= 100 */\nSELECT COUNT(*)\nFROM (\n      SELECT c.category_id\n      FROM category         AS c\n      JOIN film_category    AS fc ON fc.category_id = c.category_id\n      JOIN inventory        AS i  ON i.film_id      = fc.film_id\n      JOIN rental           AS r  ON r.inventory_id = i.inventory_id\n      JOIN customer         AS cu ON cu.customer_id = r.customer_id\n      JOIN address          AS ad ON ad.address_id  = cu.address_id\n      JOIN city             AS ci ON ci.city_id     = ad.city_id\n      WHERE ci.city LIKE 'A%' OR ci.city LIKE '%-%'\n      GROUP BY c.category_id\n      HAVING COUNT(*) >= 100\n) AS sub;\n\n/* Answer the following: List the five most rented films (titles) in cities whose name contains a hyphen.  contains a hyphen refers to ci.city LIKE '%-%' */\nSELECT f.title\nFROM film             AS f\nJOIN inventory        AS i  ON i.film_id      = f.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE '%-%'\nGROUP BY f.film_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: What is the total number of customers that live in cities starting with 'A' and have never made a rental?  starts with 'A' refers to ci.city LIKE 'A%' ; never made a rental refers to r.rental_id IS NULL */\nSELECT COUNT(DISTINCT cu.customer_id)\nFROM customer         AS cu\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nLEFT JOIN rental      AS r  ON r.customer_id  = cu.customer_id\nWHERE ci.city LIKE 'A%'\n  AND r.rental_id IS NULL;\n\n/* Answer the following: Which film category contains the most films longer than 2 hours?  longer than 2 hours refers to f.length > 120 */\nSELECT c.name\nFROM category         AS c\nJOIN film_category    AS fc ON fc.category_id = c.category_id\nJOIN film             AS f  ON f.film_id      = fc.film_id\nWHERE f.length > 120\nGROUP BY c.category_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Give the percentage of rentals in which the return was later than the film\u2019s rental_duration days.  later than rental_duration refers to DATEDIFF(r.return_date , r.rental_date) > f.rental_duration */\nSELECT ROUND(\n       100.0 * SUM(CASE WHEN DATEDIFF(r.return_date , r.rental_date) > f.rental_duration THEN 1 ELSE 0 END)\n       / COUNT(*)\n,2) AS late_return_percentage\nFROM rental           AS r\nJOIN inventory        AS i  ON i.inventory_id = r.inventory_id\nJOIN film             AS f  ON f.film_id      = i.film_id;\n\n/* Answer the following: Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "n_examples": 9,
            "db_id": "Pagila"
        },
        {
            "question": "In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "evidence": "",
            "raw_question": "In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trees are recorded in ZIP codes whose mean income is at least 80,000 dollars? */\nSELECT COUNT(*) \nFROM tree_income\nWHERE mean_income >= 80000;\n\n/* Answer the following: Among the five most common tree species in Manhattan, what is the average median income attached to each species? */\nSELECT species_name, AVG(median_income) AS avg_median_income\nFROM tree_income\nWHERE borough = 'Manhattan'\nGROUP BY species_name\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: Which ZIP code in Brooklyn that contains more than 500 recorded trees has the lowest average mean income, and what is that income? */\nSELECT zip_code, AVG(mean_income) AS avg_mean_income\nFROM tree_income\nWHERE borough = 'Brooklyn'\nGROUP BY zip_code\nHAVING COUNT(*) > 500\nORDER BY avg_mean_income ASC\nLIMIT 1;\n\n/* Answer the following: Give the number of distinct ZIP codes in each borough where the median income is above 100,000 dollars. */\nSELECT borough, COUNT(DISTINCT zip_code) AS zip_count\nFROM tree_income\nWHERE median_income > 100000\nGROUP BY borough;\n\n/* Answer the following: What fraction of trees in Queens whose mean income exceeds the median income are rated in \u201cPoor\u201d health? */\nSELECT \n    1.0 * SUM(CASE WHEN health = 'Poor' THEN 1 ELSE 0 END) / COUNT(*) AS poor_health_ratio\nFROM tree_income\nWHERE borough = 'Queens' \n  AND mean_income > median_income;\n\n/* Answer the following: For every borough, identify the most common tree species among records whose median income is between 60,000 and 80,000 dollars and show its count. */\nWITH filtered AS (\n    SELECT borough, species_name, COUNT(*) AS cnt\n    FROM tree_income\n    WHERE median_income BETWEEN 60000 AND 80000\n    GROUP BY borough, species_name\n), ranked AS (\n    SELECT borough, species_name, cnt,\n           ROW_NUMBER() OVER (PARTITION BY borough ORDER BY cnt DESC) AS rn\n    FROM filtered\n)\nSELECT borough, species_name, cnt\nFROM ranked\nWHERE rn = 1;\n\n/* Answer the following: What is the average mean income of records whose borough field is missing or empty? */\nSELECT AVG(mean_income) AS avg_mean_income\nFROM tree_income\nWHERE borough IS NULL OR borough = '';\n\n/* Answer the following: How many trees fall within ZIP codes whose median income lies in the lowest 10 percent of all median-income values? */\nWITH boundary AS (\n    SELECT PERCENTILE_CONT(0.10) WITHIN GROUP (ORDER BY median_income) AS p10\n    FROM tree_income\n)\nSELECT COUNT(*)\nFROM tree_income, boundary\nWHERE median_income <= boundary.p10;\n\n/* Answer the following: List all boroughs that have at least 1,000 recorded trees, ordering them by their average median income in descending order. */\nSELECT borough, AVG(median_income) AS avg_median_income\nFROM tree_income\nWHERE borough IS NOT NULL AND borough <> ''\nGROUP BY borough\nHAVING COUNT(*) >= 1000\nORDER BY avg_median_income DESC;\n\n/* Answer the following: In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "What percentage of trees in the Bronx have a health status of Good?",
            "evidence": "",
            "raw_question": "What percentage of trees in the Bronx have a health status of Good?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trees in Staten Island have a status of 'Dead'? */\nSELECT COUNT(*) \nFROM trees \nWHERE boroname = 'Staten Island' \n  AND status = 'Dead';\n\n/* Answer the following: List the three species that have the greatest number of trees city-wide. */\nSELECT spc_common \nFROM trees \nGROUP BY spc_common \nORDER BY COUNT(*) DESC \nLIMIT 3;\n\n/* Answer the following: What is the average diameter (dbh) of Ginkgo trees in Queens? */\nSELECT AVG(dbh) \nFROM trees \nWHERE spc_common = 'Ginkgo' \n  AND boroname = 'Queens';\n\n/* Answer the following: Which borough has the smallest percentage of trees whose health is 'Poor'? */\nSELECT boroname\nFROM trees\nGROUP BY boroname\nORDER BY SUM(CASE WHEN health = 'Poor' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) ASC\nLIMIT 1;\n\n/* Answer the following: What is the total number of distinct tree species recorded in the Bronx? */\nSELECT COUNT(DISTINCT spc_common) \nFROM trees \nWHERE boroname = 'Bronx';\n\n/* Answer the following: Among trees whose diameter is greater than 20 inches, what is the most frequent health status? */\nSELECT health\nFROM trees\nWHERE dbh > 20\nGROUP BY health\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: In which year were the most trees planted (based on the created_at timestamp)? */\nSELECT strftime('%Y', created_at) AS year\nFROM trees\nGROUP BY year\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For Honeylocust trees, what is the average health score across all boroughs? (Use Good = 3, Fair = 2, Poor = 1.) */\nSELECT AVG(\n           CASE health\n                WHEN 'Good' THEN 3\n                WHEN 'Fair' THEN 2\n                WHEN 'Poor' THEN 1\n           END\n       ) AS avg_health_score\nFROM trees\nWHERE spc_common = 'Honeylocust';\n\n/* Answer the following: How many trees are stewarded by volunteers in Manhattan? */\nSELECT COUNT(*)\nFROM trees\nWHERE steward = 'Volunteer'\n  AND boroname = 'Manhattan';\n\n/* Answer the following: What percentage of trees in the Bronx have a health status of Good?",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "evidence": "",
            "raw_question": "Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many unicorn companies are located in the United States? */\nSELECT COUNT(*) \nFROM unicorn_companies \nWHERE country = 'United States';\n\n/* Answer the following: List the name and valuation of the five highest-valued unicorns in the FinTech industry. highest-valued refers to biggest valuation_usd_billion */\nSELECT name, valuation_usd_billion \nFROM unicorn_companies \nWHERE industry = 'FinTech' \nORDER BY valuation_usd_billion DESC \nLIMIT 5;\n\n/* Answer the following: What is the average valuation (in billion USD) of unicorns that gained unicorn status in 2020? gained unicorn status refers to YEAR(date_joined) = 2020 */\nSELECT AVG(valuation_usd_billion) \nFROM unicorn_companies \nWHERE YEAR(date_joined) = 2020;\n\n/* Answer the following: Which country has produced the largest number of unicorns in the Artificial Intelligence industry? largest number refers to MAX(COUNT(*)) */\nSELECT country \nFROM unicorn_companies \nWHERE industry = 'Artificial Intelligence' \nGROUP BY country \nORDER BY COUNT(*) DESC \nLIMIT 1;\n\n/* Answer the following: How many new unicorn companies emerged each year between 2018 and 2022? emerged refers to YEAR(date_joined) */\nSELECT YEAR(date_joined) AS year, COUNT(*) AS new_unicorns \nFROM unicorn_companies \nWHERE YEAR(date_joined) BETWEEN 2018 AND 2022 \nGROUP BY YEAR(date_joined) \nORDER BY year;\n\n/* Answer the following: What is the minimum valuation of unicorn companies that became unicorns before 2010? became unicorns before 2010 refers to date_joined < '2010-01-01' */\nSELECT MIN(valuation_usd_billion) \nFROM unicorn_companies \nWHERE date_joined < '2010-01-01';\n\n/* Answer the following: List all industries that have at least 10 unicorn companies, along with the corresponding count. at least 10 refers to COUNT(*) >= 10 */\nSELECT industry, COUNT(*) AS total \nFROM unicorn_companies \nGROUP BY industry \nHAVING COUNT(*) >= 10 \nORDER BY total DESC;\n\n/* Answer the following: Which industry has the highest average valuation among its unicorn companies? highest average refers to MAX(AVG(valuation_usd_billion)) */\nSELECT industry \nFROM unicorn_companies \nGROUP BY industry \nORDER BY AVG(valuation_usd_billion) DESC \nLIMIT 1;\n\n/* Answer the following: Give the average number of unicorns created per year in China from 2019 to 2021. created per year refers to COUNT(*) grouped by year */\nSELECT AVG(cnt) \nFROM (\n    SELECT YEAR(date_joined) AS yr, COUNT(*) AS cnt\n    FROM unicorn_companies\n    WHERE country = 'China' \n      AND YEAR(date_joined) BETWEEN 2019 AND 2021\n    GROUP BY YEAR(date_joined)\n) AS yearly_counts;\n\n/* Answer the following: Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "evidence": "",
            "raw_question": "Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the percentage growth in total sales (in USD) for Germany from 2019 to 2020 when promo_total_id = 1 and channel_total_id = 1? */\nSELECT \n    ( SUM(CASE WHEN s.year = 2020 THEN s.sales_value / cr.usd_rate END) -\n      SUM(CASE WHEN s.year = 2019 THEN s.sales_value / cr.usd_rate END) ) * 100.0 /\n      SUM(CASE WHEN s.year = 2019 THEN s.sales_value / cr.usd_rate END)  AS pct_growth_19_20\nFROM sales            AS s\nJOIN currency_rate    AS cr\n  ON cr.currency_code = s.currency_code \n AND cr.year          = s.year\nWHERE s.country         = 'Germany'\n  AND s.year IN (2019, 2020)\n  AND s.promo_total_id  = 1\n  AND s.channel_total_id= 1;\n\n\n/* Answer the following: Which months in 2020 did France record higher sales (in USD) than the same months in 2019 under promo_total_id = 1 and channel_total_id = 1? */\nSELECT s20.month\nFROM   sales AS s19\nJOIN   sales AS s20\n       ON s20.country = s19.country\n      AND s20.month   = s19.month\n      AND s19.year    = 2019\n      AND s20.year    = 2020\n      AND s19.promo_total_id = 1 AND s19.channel_total_id = 1\n      AND s20.promo_total_id = 1 AND s20.channel_total_id = 1\nJOIN currency_rate AS c19 ON c19.currency_code = s19.currency_code AND c19.year = 2019\nJOIN currency_rate AS c20 ON c20.currency_code = s20.currency_code AND c20.year = 2020\nWHERE  s20.country = 'France'\n  AND (s20.sales_value / c20.usd_rate) > (s19.sales_value / c19.usd_rate);\n\n\n/* Answer the following: What was the average monthly sales in USD for Spain in 2020 when promo_total_id = 1 and channel_total_id = 1? */\nSELECT \n    AVG(s.sales_value / cr.usd_rate) AS avg_monthly_sales_usd_2020\nFROM sales         AS s\nJOIN currency_rate AS cr\n  ON cr.currency_code = s.currency_code\n AND cr.year          = s.year\nWHERE s.country         = 'Spain'\n  AND s.year            = 2020\n  AND s.promo_total_id  = 1\n  AND s.channel_total_id= 1;\n\n\n/* Answer the following: Which European country had the highest average monthly sales in USD in 2020 for promo_total_id = 1 and channel_total_id = 1? */\nSELECT s.country\nFROM   sales AS s\nJOIN   currency_rate AS cr\n       ON cr.currency_code = s.currency_code AND cr.year = s.year\nWHERE  s.year            = 2020\n  AND  s.promo_total_id  = 1\n  AND  s.channel_total_id= 1\nGROUP BY s.country\nORDER BY AVG(s.sales_value / cr.usd_rate) DESC\nLIMIT 1;\n\n\n/* Answer the following: For Italy, what is the projected total sales in USD for 2021 after applying each month\u2019s 2019\u21922020 growth rate (promo_total_id = 1, channel_total_id = 1)? */\nWITH month_growth AS (\n    SELECT m19.month,\n           (m20.sales_value / c20.usd_rate) / (m19.sales_value / c19.usd_rate) AS growth_rate\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'Italy'\n), projected_2021 AS (\n    SELECT s20.month,\n           (s20.sales_value / c20.usd_rate) * g.growth_rate AS projected_sales_usd\n    FROM   sales AS s20\n    JOIN   currency_rate AS c20\n           ON c20.currency_code = s20.currency_code AND c20.year = 2020\n    JOIN   month_growth  AS g ON g.month = s20.month\n    WHERE  s20.country         = 'Italy'\n      AND  s20.year            = 2020\n      AND  s20.promo_total_id  = 1\n      AND  s20.channel_total_id= 1\n)\nSELECT SUM(projected_sales_usd) AS projected_total_usd_2021\nFROM   projected_2021;\n\n\n/* Answer the following: What is the median of the month-over-month percentage growth rates in USD sales for France from 2019 to 2020 (promo_total_id = 1, channel_total_id = 1)? */\nWITH growth AS (\n    SELECT m19.month,\n           ((m20.sales_value / c20.usd_rate) - (m19.sales_value / c19.usd_rate))\n           / (m19.sales_value / c19.usd_rate) AS pct_growth\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'France'\n)\nSELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY pct_growth) AS median_pct_growth\nFROM   growth;\n\n\n/* Answer the following: List the top 3 months with the highest projected 2021 sales in USD for France (promo_total_id = 1, channel_total_id = 1). */\nWITH month_growth AS (\n    SELECT m19.month,\n           (m20.sales_value / c20.usd_rate) / (m19.sales_value / c19.usd_rate) AS growth_rate\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'France'\n), projected_2021 AS (\n    SELECT s20.month,\n           (s20.sales_value / c20.usd_rate) * g.growth_rate AS projected_sales_usd\n    FROM   sales AS s20\n    JOIN   currency_rate AS c20\n           ON c20.currency_code = s20.currency_code AND c20.year = 2020\n    JOIN   month_growth  AS g ON g.month = s20.month\n    WHERE  s20.country         = 'France'\n      AND  s20.year            = 2020\n      AND  s20.promo_total_id  = 1\n      AND  s20.channel_total_id= 1\n)\nSELECT month\nFROM   projected_2021\nORDER BY projected_sales_usd DESC\nLIMIT 3;\n\n\n/* Answer the following: What is the combined total sales in local currency for France in 2019 and 2020 for promo_total_id = 1 and channel_total_id = 1? */\nSELECT \n    SUM(s.sales_value) AS total_local_19_20\nFROM sales AS s\nWHERE s.country          = 'France'\n  AND s.year IN (2019, 2020)\n  AND s.promo_total_id   = 1\n  AND s.channel_total_id = 1;\n\n\n/* Answer the following: For France, what is the ratio of the projected average monthly sales in USD for 2021 to the actual average monthly sales in USD in 2020 (promo_total_id = 1, channel_total_id = 1)? */\nWITH month_growth AS (\n    SELECT m19.month,\n           (m20.sales_value / c20.usd_rate) / (m19.sales_value / c19.usd_rate) AS growth_rate\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'France'\n), projected_2021 AS (\n    SELECT s20.month,\n           (s20.sales_value / c20.usd_rate) * g.growth_rate AS projected_sales_usd\n    FROM   sales AS s20\n    JOIN   currency_rate AS c20\n           ON c20.currency_code = s20.currency_code AND c20.year = 2020\n    JOIN   month_growth  AS g ON g.month = s20.month\n    WHERE  s20.country         = 'France'\n      AND  s20.year            = 2020\n      AND  s20.promo_total_id  = 1\n      AND  s20.channel_total_id= 1\n), avg_2020 AS (\n    SELECT AVG(s.sales_value / cr.usd_rate) AS avg_2020_usd\n    FROM   sales AS s\n    JOIN   currency_rate AS cr\n           ON cr.currency_code = s.currency_code AND cr.year = s.year\n    WHERE  s.country         = 'France'\n      AND  s.year            = 2020\n      AND  s.promo_total_id  = 1\n      AND  s.channel_total_id= 1\n)\nSELECT (SELECT AVG(projected_sales_usd) FROM projected_2021) /\n       (SELECT avg_2020_usd        FROM avg_2020)            AS ratio_2021_to_2020;\n\n\n/* Answer the following: What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "evidence": "",
            "raw_question": "Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which artist has sold the greatest number of tracks? greatest number of tracks refers to MAX(SUM(InvoiceLine.Quantity)) */\nSELECT ar.Name\nFROM artists AS ar\nJOIN albums AS al ON al.ArtistId = ar.ArtistId\nJOIN tracks AS t ON t.AlbumId = al.AlbumId\nJOIN invoicelines AS il ON il.TrackId = t.TrackId\nGROUP BY ar.ArtistId\nORDER BY SUM(il.Quantity) DESC\nLIMIT 1;\n\n/* Answer the following: List the first and last names of the five customers who have spent the most money, together with the total amount each spent. */\nSELECT c.FirstName,\n       c.LastName,\n       SUM(i.Total) AS TotalSpent\nFROM customers AS c\nJOIN invoices  AS i ON i.CustomerId = c.CustomerId\nGROUP BY c.CustomerId\nORDER BY TotalSpent DESC\nLIMIT 5;\n\n/* Answer the following: How many tracks does each genre contain?  Return the genre name and track count, ordered from most to fewest tracks. */\nSELECT g.Name,\n       COUNT(t.TrackId) AS TrackCount\nFROM genres AS g\nLEFT JOIN tracks AS t ON t.GenreId = g.GenreId\nGROUP BY g.GenreId\nORDER BY TrackCount DESC;\n\n/* Answer the following: Which country accounts for the highest total invoice revenue, and what is that total? */\nSELECT i.BillingCountry,\n       SUM(i.Total) AS CountryRevenue\nFROM invoices AS i\nGROUP BY i.BillingCountry\nORDER BY CountryRevenue DESC\nLIMIT 1;\n\n/* Answer the following: Who is the support representative that handles the largest number of customers?  Return the employee\u2019s first and last names together with the number of customers. */\nSELECT e.FirstName,\n       e.LastName,\n       COUNT(c.CustomerId) AS CustomerCount\nFROM employees AS e\nJOIN customers AS c ON c.SupportRepId = e.EmployeeId\nGROUP BY e.EmployeeId\nORDER BY CustomerCount DESC\nLIMIT 1;\n\n/* Answer the following: What is the average unit price of tracks for each media type? Return media-type name and average price. */\nSELECT mt.Name,\n       ROUND(AVG(t.UnitPrice), 2) AS AvgUnitPrice\nFROM mediatypes AS mt\nJOIN tracks     AS t  ON t.MediaTypeId = mt.MediaTypeId\nGROUP BY mt.MediaTypeId;\n\n/* Answer the following: Which album has the greatest total running time, and what is that length in milliseconds? greatest total running time refers to MAX(SUM(tracks.Milliseconds)) */\nSELECT al.Title,\n       SUM(t.Milliseconds) AS TotalRunTime\nFROM albums AS al\nJOIN tracks AS t ON t.AlbumId = al.AlbumId\nGROUP BY al.AlbumId\nORDER BY TotalRunTime DESC\nLIMIT 1;\n\n/* Answer the following: List every playlist that contains more than 50 tracks, showing the playlist name together with the track count. */\nSELECT p.Name,\n       COUNT(pt.TrackId) AS TrackCount\nFROM playlists      AS p\nJOIN playlisttrack  AS pt ON pt.PlaylistId = p.PlaylistId\nGROUP BY p.PlaylistId\nHAVING TrackCount > 50\nORDER BY TrackCount DESC;\n\n/* Answer the following: Which artist\u2019s tracks have generated the highest total revenue, and how much revenue is that? revenue refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) */\nSELECT ar.Name,\n       SUM(il.UnitPrice * il.Quantity) AS TotalRevenue\nFROM artists      AS ar\nJOIN albums       AS al ON al.ArtistId = ar.ArtistId\nJOIN tracks       AS t  ON t.AlbumId   = al.AlbumId\nJOIN invoicelines AS il ON il.TrackId  = t.TrackId\nGROUP BY ar.ArtistId\nORDER BY TotalRevenue DESC\nLIMIT 1;\n\n/* Answer the following: Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "n_examples": 9,
            "db_id": "chinook"
        },
        {
            "question": "Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "evidence": "",
            "raw_question": "Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the total revenue generated from tracks in the 'Rock' genre?  \n   Total revenue refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT SUM(IL.UnitPrice * IL.Quantity) AS RockRevenue\nFROM InvoiceLine AS IL\nJOIN Track      AS T  ON IL.TrackId  = T.TrackId\nJOIN Genre      AS G  ON T.GenreId   = G.GenreId\nWHERE G.Name = 'Rock';\n\n/* Answer the following: List the top 5 tracks by total sales amount, showing each track's name and its total sales, ordered from highest to lowest.  \n   Total sales refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT T.Name,\n       SUM(IL.UnitPrice * IL.Quantity) AS TotalSales\nFROM Track       AS T\nJOIN InvoiceLine AS IL ON T.TrackId = IL.TrackId\nGROUP BY T.TrackId, T.Name\nORDER BY TotalSales DESC\nLIMIT 5;\n\n/* Answer the following: Which customer has purchased the highest number of distinct albums?  \n   Return the customer's full name and the number of distinct albums purchased. */\nSELECT C.FirstName || ' ' || C.LastName AS CustomerName,\n       COUNT(DISTINCT A.AlbumId)        AS AlbumsBought\nFROM Customer    AS C\nJOIN Invoice     AS I  ON C.CustomerId  = I.CustomerId\nJOIN InvoiceLine AS IL ON I.InvoiceId   = IL.InvoiceId\nJOIN Track       AS T  ON IL.TrackId    = T.TrackId\nJOIN Album       AS A  ON T.AlbumId     = A.AlbumId\nGROUP BY C.CustomerId\nORDER BY AlbumsBought DESC, CustomerName\nLIMIT 1;\n\n/* Answer the following: For each artist, compute the total revenue generated by all of their albums and list the top 3 artists with the highest revenue.  \n   Total revenue refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT AR.Name AS Artist,\n       SUM(IL.UnitPrice * IL.Quantity) AS Revenue\nFROM Artist      AS AR\nJOIN Album       AS AL ON AR.ArtistId = AL.ArtistId\nJOIN Track       AS T  ON AL.AlbumId  = T.AlbumId\nJOIN InvoiceLine AS IL ON T.TrackId   = IL.TrackId\nGROUP BY AR.ArtistId\nORDER BY Revenue DESC, Artist\nLIMIT 3;\n\n/* Answer the following: Compute the average invoice total for each billing country and list the countries whose average invoice total is higher than the overall average invoice total of all countries. */\nWITH country_avg AS (\n    SELECT BillingCountry AS Country,\n           AVG(Total)      AS AvgTotal\n    FROM Invoice\n    GROUP BY BillingCountry\n),\noverall_avg AS (\n    SELECT AVG(Total) AS AvgTotalAll\n    FROM Invoice\n)\nSELECT CA.Country,\n       CA.AvgTotal\nFROM country_avg AS CA, overall_avg AS OA\nWHERE CA.AvgTotal > OA.AvgTotalAll\nORDER BY CA.AvgTotal DESC, CA.Country;\n\n/* Answer the following: Which invoice contains the fewest tracks but still has a total amount greater than 5 USD?  \n   Return the InvoiceId and the number of tracks. In case of a tie, return the earliest invoice by InvoiceDate. */\nSELECT I.InvoiceId,\n       COUNT(IL.InvoiceLineId) AS TrackCount\nFROM Invoice     AS I\nJOIN InvoiceLine AS IL ON I.InvoiceId = IL.InvoiceId\nWHERE I.Total > 5\nGROUP BY I.InvoiceId, I.InvoiceDate\nORDER BY TrackCount ASC, I.InvoiceDate ASC\nLIMIT 1;\n\n/* Answer the following: For each customer, compute the total amount spent in 2012 and list those customers who spent nothing in 2011.  \n   Return customer full name and their 2012 spending, ordered from highest to lowest. */\nWITH spend AS (\n    SELECT C.CustomerId,\n           SUM(CASE WHEN strftime('%Y', I.InvoiceDate) = '2012' THEN I.Total ELSE 0 END) AS Spend2012,\n           SUM(CASE WHEN strftime('%Y', I.InvoiceDate) = '2011' THEN I.Total ELSE 0 END) AS Spend2011\n    FROM Customer AS C\n    LEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId\n    GROUP BY C.CustomerId\n)\nSELECT C.FirstName || ' ' || C.LastName AS CustomerName,\n       S.Spend2012\nFROM spend    AS S\nJOIN Customer AS C ON C.CustomerId = S.CustomerId\nWHERE S.Spend2011 = 0\n  AND S.Spend2012 > 0\nORDER BY S.Spend2012 DESC, CustomerName;\n\n/* Answer the following: Which sales support agent handled the highest number of invoices?  \n   Return the employee's full name and the count of invoices. */\nSELECT E.FirstName || ' ' || E.LastName AS EmployeeName,\n       COUNT(I.InvoiceId)               AS InvoiceCount\nFROM Employee AS E\nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId\nJOIN Invoice  AS I ON C.CustomerId = I.CustomerId\nGROUP BY E.EmployeeId\nORDER BY InvoiceCount DESC, EmployeeName\nLIMIT 1;\n\n/* Answer the following: What percentage of the total revenue is contributed by customers from Brazil?  \n   Return the percentage rounded to two decimal places. */\nWITH brazil_revenue AS (\n    SELECT SUM(Total) AS Revenue\n    FROM Invoice\n    WHERE BillingCountry = 'Brazil'\n),\ntotal_revenue AS (\n    SELECT SUM(Total) AS Revenue\n    FROM Invoice\n)\nSELECT ROUND((BR.Revenue * 100.0) / TR.Revenue, 2) AS PercentageFromBrazil\nFROM brazil_revenue AS BR, total_revenue AS TR;\n\n/* Answer the following: Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "n_examples": 9,
            "db_id": "chinook"
        },
        {
            "question": "Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "evidence": "",
            "raw_question": "Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which customer made the single largest payment? */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nORDER BY p.amount DESC\nLIMIT 1;\n\n/* Answer the following: What is the total amount that customer \u201cJohn Doe\u201d paid during the year 2023? */\nSELECT SUM(p.amount) AS total_paid_2023\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nWHERE c.first_name = 'John'\n  AND c.last_name  = 'Doe'\n  AND YEAR(p.payment_date) = 2023;\n\n/* Answer the following: List the three customers with the highest average payment amount. */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY AVG(p.amount) DESC\nLIMIT 3;\n\n/* Answer the following: For each month of 2022, what was the average payment amount? */\nSELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month,\n       AVG(p.amount)                        AS avg_amount\nFROM payments AS p\nWHERE YEAR(p.payment_date) = 2022\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Which customer has made payments in the greatest number of distinct months? */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(DISTINCT DATE_FORMAT(p.payment_date, '%Y-%m')) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers made at least one payment in each quarter of 2022? */\nSELECT COUNT(*) AS customers_all_quarters_2022\nFROM (\n    SELECT customer_id\n    FROM payments\n    WHERE YEAR(payment_date) = 2022\n    GROUP BY customer_id\n    HAVING COUNT(DISTINCT QUARTER(payment_date)) = 4\n) AS t;\n\n/* Answer the following: What is the average payment amount difference between 2021 and 2022 (average of 2022 minus average of 2021)? */\nSELECT AVG(CASE WHEN YEAR(payment_date) = 2022 THEN amount END) -\n       AVG(CASE WHEN YEAR(payment_date) = 2021 THEN amount END) AS avg_diff_22_minus_21\nFROM payments\nWHERE YEAR(payment_date) IN (2021, 2022);\n\n/* Answer the following: Which month had the highest total payment amount overall? Return the month in \u201cYYYY-MM\u201d format. */\nSELECT DATE_FORMAT(payment_date, '%Y-%m') AS month\nFROM payments\nGROUP BY month\nORDER BY SUM(amount) DESC\nLIMIT 1;\n\n/* Answer the following: List the customers who did not make any payment in March 2023. */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nLEFT JOIN (\n    SELECT DISTINCT customer_id\n    FROM payments\n    WHERE payment_date >= '2023-03-01' AND payment_date < '2023-04-01'\n) AS m\nON c.customer_id = m.customer_id\nWHERE m.customer_id IS NULL;\n\n/* Answer the following: Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "evidence": "",
            "raw_question": "Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which hardware product segments had at least a 20 % increase in the number of unique products sold from 2020 to 2021, and how many unique products did they sell in 2021? 20 % increase refers to percentage growth \u2265 20. */\nSELECT hp.segment,\n       COUNT(DISTINCT CASE WHEN fs.year = 2021 THEN fs.product_id END) AS unique_products_2021\nFROM hardware_products AS hp\nJOIN fact_sales         AS fs ON fs.product_id = hp.product_id\nGROUP BY hp.segment\nHAVING COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END) > 0\n   AND (COUNT(DISTINCT CASE WHEN fs.year = 2021 THEN fs.product_id END)\n        - COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END)) * 100.0\n        / COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END) >= 20;\n\n/* Answer the following: Which hardware product segment showed the largest growth in total revenue from 2020 to 2021? */\nSELECT hp.segment\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nORDER  BY SUM(CASE WHEN fs.year = 2021 THEN fs.revenue END)\n        -  SUM(CASE WHEN fs.year = 2020 THEN fs.revenue END) DESC\nLIMIT  1;\n\n/* Answer the following: Give the percentage change in average selling price for every segment between 2020 and 2021. Average selling price refers to revenue / units_sold. */\nSELECT hp.segment,\n       (AVG(CASE WHEN fs.year = 2021 THEN fs.revenue * 1.0 / fs.units_sold END)\n      -  AVG(CASE WHEN fs.year = 2020 THEN fs.revenue * 1.0 / fs.units_sold END)) * 100.0\n      /  AVG(CASE WHEN fs.year = 2020 THEN fs.revenue * 1.0 / fs.units_sold END)   AS pct_change_avg_price\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nORDER  BY pct_change_avg_price DESC;\n\n/* Answer the following: List the segments that had no sales in 2019 but recorded sales in 2020. */\nSELECT DISTINCT hp.segment\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nWHERE  fs.year = 2020\n  AND  hp.segment NOT IN (\n        SELECT DISTINCT hp2.segment\n        FROM   hardware_products AS hp2\n        JOIN   fact_sales        AS fs2 ON fs2.product_id = hp2.product_id\n        WHERE  fs2.year = 2019);\n\n/* Answer the following: For every month in 2021, how many unique hardware products were sold? */\nSELECT fs.month,\n       COUNT(DISTINCT fs.product_id) AS unique_products_2021\nFROM   fact_sales AS fs\nWHERE  fs.year = 2021\nGROUP  BY fs.month\nORDER  BY fs.month;\n\n/* Answer the following: What percentage of total 2021 revenue was earned by the top-3 revenue-generating segments in 2021? */\nWITH seg_rev AS (\n     SELECT hp.segment, SUM(fs.revenue) AS rev_2021\n     FROM   hardware_products AS hp\n     JOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\n     WHERE  fs.year = 2021\n     GROUP  BY hp.segment\n), top3 AS (\n     SELECT SUM(rev_2021) AS top3_rev\n     FROM   (SELECT rev_2021\n             FROM   seg_rev\n             ORDER  BY rev_2021 DESC\n             LIMIT  3)\n), total AS (\n     SELECT SUM(rev_2021) AS total_rev FROM seg_rev\n)\nSELECT top3_rev * 100.0 / total_rev AS pct_top3_of_2021_revenue\nFROM   top3, total;\n\n/* Answer the following: Which hardware brand had the highest average units sold per product in 2021? */\nSELECT hp.brand\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nWHERE  fs.year = 2021\nGROUP  BY hp.brand\nORDER  BY AVG(fs.units_sold) DESC\nLIMIT  1;\n\n/* Answer the following: Provide the list of segments whose number of distinct customers declined from 2020 to 2021. Distinct customers refers to COUNT(DISTINCT customer_id). */\nSELECT hp.segment\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nHAVING COUNT(DISTINCT CASE WHEN fs.year = 2021 THEN fs.customer_id END)\n     < COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.customer_id END);\n\n/* Answer the following: Show the units sold in 2020 and 2021 for every segment together with their difference, ordered by the largest increase. */\nSELECT hp.segment,\n       SUM(CASE WHEN fs.year = 2020 THEN fs.units_sold END) AS units_2020,\n       SUM(CASE WHEN fs.year = 2021 THEN fs.units_sold END) AS units_2021,\n       SUM(CASE WHEN fs.year = 2021 THEN fs.units_sold END)\n     - SUM(CASE WHEN fs.year = 2020 THEN fs.units_sold END) AS diff_units\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nORDER  BY diff_units DESC;\n\n/* Answer the following: Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "n_examples": 9,
            "db_id": "education_business"
        },
        {
            "question": "For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "evidence": "",
            "raw_question": "For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which hardware product had the highest total quantity sold in 2020? */\nSELECT P.product_name\nFROM Sales AS S\nJOIN Products AS P ON S.product_id = P.product_id\nWHERE strftime('%Y', S.sale_date) = '2020'\nGROUP BY S.product_id\nORDER BY SUM(S.quantity) DESC\nLIMIT 1;\n\n/* Answer the following: For every division, what was the total revenue generated in calendar year 2022? */\nSELECT D.division_name,\n       SUM(S.revenue) AS total_revenue_2022\nFROM Sales   AS S\nJOIN Divisions AS D ON S.division_id = D.division_id\nWHERE strftime('%Y', S.sale_date) = '2022'\nGROUP BY D.division_id;\n\n/* Answer the following: List the five suppliers that provide the largest number of distinct products. */\nSELECT Sup.supplier_name\nFROM Products AS P\nJOIN Suppliers AS Sup ON P.supplier_id = Sup.supplier_id\nGROUP BY Sup.supplier_id\nORDER BY COUNT(DISTINCT P.product_id) DESC\nLIMIT 5;\n\n/* Answer the following: How many distinct customers placed more than five orders during 2021? */\nSELECT COUNT(*)\nFROM (\n    SELECT O.customer_id\n    FROM Orders AS O\n    WHERE strftime('%Y', O.order_date) = '2021'\n    GROUP BY O.customer_id\n    HAVING COUNT(DISTINCT O.order_id) > 5\n) AS ActiveCustomers;\n\n/* Answer the following: What is the average unit price of all software products introduced after 1-Jan-2019? */\nSELECT AVG(P.unit_price)\nFROM Products AS P\nWHERE P.category = 'Software'\n  AND P.introduction_date > '2019-01-01';\n\n/* Answer the following: Which calendar month of 2022 recorded the highest total sales quantity across all products? */\nSELECT strftime('%m', S.sale_date) AS month,\n       SUM(S.quantity)             AS total_qty\nFROM Sales AS S\nWHERE strftime('%Y', S.sale_date) = '2022'\nGROUP BY month\nORDER BY total_qty DESC\nLIMIT 1;\n\n/* Answer the following: Which division experienced the greatest year-over-year increase in quantity sold from 2020 to 2021? */\nSELECT D.division_name\nFROM Divisions AS D\nJOIN (\n      SELECT division_id,\n             SUM(CASE WHEN strftime('%Y', sale_date) = '2021' THEN quantity END) -\n             SUM(CASE WHEN strftime('%Y', sale_date) = '2020' THEN quantity END) AS qty_delta\n      FROM Sales\n      WHERE strftime('%Y', sale_date) IN ('2020', '2021')\n      GROUP BY division_id\n) AS T ON D.division_id = T.division_id\nORDER BY T.qty_delta DESC\nLIMIT 1;\n\n/* Answer the following: For each product category, what is the average quantity per order line (order item)? */\nSELECT P.category,\n       AVG(OI.quantity) AS avg_qty_per_item\nFROM Order_Items AS OI\nJOIN Products    AS P  ON OI.product_id = P.product_id\nGROUP BY P.category;\n\n/* Answer the following: What is the total quantity sold for products that have never been returned? */\nSELECT SUM(S.quantity)\nFROM Sales AS S\nWHERE S.product_id NOT IN (\n      SELECT DISTINCT OI.product_id\n      FROM Returns     AS R\n      JOIN Order_Items AS OI ON R.order_item_id = OI.order_item_id\n);\n\n/* Answer the following: For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "n_examples": 9,
            "db_id": "education_business"
        },
        {
            "question": "In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "evidence": "",
            "raw_question": "In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which product experienced the greatest absolute increase in sales (excluding promotions) from Q3 2019 to Q3 2020? */\nSELECT product_id\nFROM (\n    SELECT product_id,\n           SUM(CASE WHEN year = 2020 AND quarter = 'Q3' AND promotion_flag = 0 THEN sales_amount END) -\n           SUM(CASE WHEN year = 2019 AND quarter = 'Q3' AND promotion_flag = 0 THEN sales_amount END) AS diff\n    FROM sales\n    GROUP BY product_id\n) AS t\nORDER BY diff DESC\nLIMIT 1;\n\n/* Answer the following: List the cities where total sales with no promotions grew at least 25 % from Q2 2019 to Q2 2020. */\nSELECT city\nFROM (\n    SELECT city,\n           SUM(CASE WHEN year = 2020 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s20,\n           SUM(CASE WHEN year = 2019 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s19\n    FROM sales\n    GROUP BY city\n) AS c\nWHERE s19 > 0\n  AND (s20 - s19) * 100.0 / s19 >= 25;\n\n/* Answer the following: Among the cities that cleared the 25 % growth hurdle above, what are the five products with the highest combined non-promotional sales in those two quarters? */\nSELECT product_id\nFROM sales\nWHERE promotion_flag = 0\n  AND ((year = 2019 AND quarter = 'Q2') OR (year = 2020 AND quarter = 'Q2'))\n  AND city IN (\n        SELECT city\n        FROM (\n            SELECT city,\n                   SUM(CASE WHEN year = 2020 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s20,\n                   SUM(CASE WHEN year = 2019 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s19\n            FROM sales\n            GROUP BY city\n        ) AS g\n        WHERE s19 > 0\n          AND (s20 - s19) * 100.0 / s19 >= 25\n  )\nGROUP BY product_id\nORDER BY SUM(sales_amount) DESC\nLIMIT 5;\n\n/* Answer the following: For each product category, show 2020 totals of promotional sales versus non-promotional sales. */\nSELECT p.category,\n       SUM(CASE WHEN s.promotion_flag = 1 THEN s.sales_amount END)  AS promo_sales_2020,\n       SUM(CASE WHEN s.promotion_flag = 0 THEN s.sales_amount END)  AS nopromo_sales_2020\nFROM sales AS s\nJOIN products AS p ON p.product_id = s.product_id\nWHERE s.year = 2020\nGROUP BY p.category;\n\n/* Answer the following: Which city had the highest percentage of promotional sales out of its total sales in Q4 2020? */\nSELECT city\nFROM (\n    SELECT city,\n           SUM(CASE WHEN promotion_flag = 1 THEN sales_amount END) * 100.0 /\n           SUM(sales_amount) AS promo_share\n    FROM sales\n    WHERE year = 2020\n      AND quarter = 'Q4'\n    GROUP BY city\n) AS x\nORDER BY promo_share DESC\nLIMIT 1;\n\n/* Answer the following: How many products recorded zero non-promotional sales but at least one promotional sale during 2020? */\nSELECT COUNT(DISTINCT product_id)\nFROM sales\nWHERE year = 2020\n  AND promotion_flag = 1\n  AND product_id NOT IN (\n        SELECT DISTINCT product_id\n        FROM sales\n        WHERE year = 2020 AND promotion_flag = 0\n);\n\n/* Answer the following: What was the average amount of non-promotional sales per city in California in 2020? California refers to state = 'CA'. */\nSELECT AVG(city_total) \nFROM (\n    SELECT city,\n           SUM(sales_amount) AS city_total\n    FROM sales\n    JOIN cities ON cities.city = sales.city\n    WHERE sales.year = 2020\n      AND sales.promotion_flag = 0\n      AND cities.state = 'CA'\n    GROUP BY city\n) AS cal_data;\n\n/* Answer the following: List the three states with the highest growth in total non-promotional sales from 2019 to 2020. */\nSELECT state,\n       ((s20 - s19) * 100.0 / s19) AS growth_pct\nFROM (\n    SELECT cities.state,\n           SUM(CASE WHEN year = 2020 AND promotion_flag = 0 THEN sales_amount END) AS s20,\n           SUM(CASE WHEN year = 2019 AND promotion_flag = 0 THEN sales_amount END) AS s19\n    FROM sales\n    JOIN cities ON cities.city = sales.city\n    GROUP BY cities.state\n) AS t\nWHERE s19 > 0\nORDER BY growth_pct DESC\nLIMIT 3;\n\n/* Answer the following: Identify the quarter of 2020 that registered the highest nationwide non-promotional sales. */\nSELECT quarter\nFROM sales\nWHERE year = 2020\n  AND promotion_flag = 0\nGROUP BY quarter\nORDER BY SUM(sales_amount) DESC\nLIMIT 1;\n\n/* Answer the following: In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "evidence": "",
            "raw_question": "Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What were the total sales in USD for Germany during 2020 on channel 2? */\nSELECT SUM(S.sales_amount * E.usd_rate) AS total_sales_usd\nFROM sales AS S\nJOIN exchange_rates AS E\n  ON S.currency_code = E.currency_code\n AND S.year = E.year\n AND S.month = E.month\nWHERE S.country = 'Germany'\n  AND S.year = 2020\n  AND S.channel_total_id = 2;\n\n/* Answer the following: Which 5 products had the highest average monthly promotion sales in France in 2019 for promotion 1? */\nSELECT P.product_name,\n       AVG(S.sales_amount) AS avg_monthly_sales\nFROM sales AS S\nJOIN products AS P ON S.product_id = P.product_id\nWHERE S.country = 'France'\n  AND S.year = 2019\n  AND S.promo_total_id = 1\nGROUP BY P.product_name\nORDER BY avg_monthly_sales DESC\nLIMIT 5;\n\n/* Answer the following: For each month, what was the average growth rate of sales in the United Kingdom from 2019 to 2020 for products promoted with promo 3? */\nSELECT T2019.month,\n       AVG( (T2020.total_sales - T2019.total_sales) / NULLIF(T2019.total_sales,0) ) AS avg_growth_rate\nFROM (\n      SELECT product_id, month, SUM(sales_amount) AS total_sales\n      FROM sales\n      WHERE country = 'United Kingdom'\n        AND year = 2019\n        AND promo_total_id = 3\n      GROUP BY product_id, month\n) AS T2019\nJOIN (\n      SELECT product_id, month, SUM(sales_amount) AS total_sales\n      FROM sales\n      WHERE country = 'United Kingdom'\n        AND year = 2020\n        AND promo_total_id = 3\n      GROUP BY product_id, month\n) AS T2020\n  ON T2019.product_id = T2020.product_id\n AND T2019.month = T2020.month\nGROUP BY T2019.month;\n\n/* Answer the following: List month and product where projected 2021 sales (using 2019\u21922020 growth) exceed 100000 USD for Spain on channel 1 and promotion 2. */\nSELECT proj.month,\n       P.product_name,\n       SUM(proj.projected_sales_local * E.usd_rate) AS projected_sales_usd\nFROM (\n     SELECT T2019.product_id,\n            T2019.month,\n            (T2019.total_sales * CASE \n                    WHEN T2019.total_sales = 0 THEN 0\n                    ELSE (T2020.total_sales / T2019.total_sales) \n             END) AS projected_sales_local,\n            T2019.currency_code\n     FROM (\n          SELECT product_id, month, currency_code, SUM(sales_amount) AS total_sales\n          FROM sales\n          WHERE country = 'Spain'\n            AND year = 2019\n            AND channel_total_id = 1\n            AND promo_total_id = 2\n          GROUP BY product_id, month, currency_code\n     ) AS T2019\n     JOIN (\n          SELECT product_id, month, SUM(sales_amount) AS total_sales\n          FROM sales\n          WHERE country = 'Spain'\n            AND year = 2020\n            AND channel_total_id = 1\n            AND promo_total_id = 2\n          GROUP BY product_id, month\n     ) AS T2020\n       ON T2019.product_id = T2020.product_id\n      AND T2019.month     = T2020.month\n) AS proj\nJOIN exchange_rates AS E\n  ON proj.currency_code = E.currency_code\n AND E.year = 2021\n AND E.month = proj.month\nJOIN products AS P ON P.product_id = proj.product_id\nGROUP BY proj.month, P.product_name\nHAVING projected_sales_usd > 100000;\n\n/* Answer the following: How many distinct products were sold in the United States across all channels in 2020? */\nSELECT COUNT(DISTINCT product_id)\nFROM sales\nWHERE country = 'United States'\n  AND year = 2020;\n\n/* Answer the following: Which channel had the highest total promotion sales in Europe (France, Germany, Italy, Spain, United Kingdom) during Black Friday (promo 4) in November 2020? */\nSELECT C.channel_name\nFROM sales AS S\nJOIN channels AS C ON S.channel_total_id = C.channel_total_id\nWHERE S.country IN ('France','Germany','Italy','Spain','United Kingdom')\n  AND S.year = 2020\n  AND S.month = 11\n  AND S.promo_total_id = 4\nGROUP BY C.channel_name\nORDER BY SUM(S.sales_amount) DESC\nLIMIT 1;\n\n/* Answer the following: Which month in 2019 had the lowest average sales per product in Canada? */\nSELECT month\nFROM (\n    SELECT month, AVG(total_sales) AS avg_sales\n    FROM (\n         SELECT product_id, month, SUM(sales_amount) AS total_sales\n         FROM sales\n         WHERE country = 'Canada' \n           AND year = 2019\n         GROUP BY product_id, month\n    ) AS monthly_product_sales\n    GROUP BY month\n) AS monthly_avg\nORDER BY avg_sales ASC\nLIMIT 1;\n\n/* Answer the following: What were the total 2021 sales converted to USD for each currency used? */\nSELECT S.currency_code,\n       SUM(S.sales_amount * E.usd_rate) AS total_usd_sales\nFROM sales AS S\nJOIN exchange_rates AS E\n  ON S.currency_code = E.currency_code\n AND S.year = E.year\n AND S.month = E.month\nWHERE S.year = 2021\nGROUP BY S.currency_code;\n\n/* Answer the following: For each country, what percentage of sales in 2020 came from promotions (promo id not null)? */\nSELECT country,\n       100.0 * SUM(CASE WHEN promo_total_id IS NOT NULL THEN sales_amount ELSE 0 END) / \n       SUM(sales_amount) AS promo_share_percent\nFROM sales\nWHERE year = 2020\nGROUP BY country;\n\n/* Answer the following: What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "evidence": "",
            "raw_question": "What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which three products brought the highest total profit from Italian customers in the whole year 2021? profit is (quantity * (unit_price - unit_cost)) */\nSELECT p.product_name\nFROM products AS p\nJOIN order_items AS oi ON oi.product_id = p.product_id\nJOIN orders AS o ON o.order_id = oi.order_id\nJOIN customers AS c ON c.customer_id = o.customer_id\nWHERE c.country = 'Italy'\n  AND o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY p.product_name\nORDER BY SUM(oi.quantity * (oi.unit_price - oi.unit_cost)) DESC\nLIMIT 3;\n\n/* Answer the following: What is the total quantity of items that were sold to French customers during the first quarter (January\u2013March) of 2020? */\nSELECT SUM(oi.quantity)\nFROM customers AS c\nJOIN orders AS o     ON o.customer_id = c.customer_id\nJOIN order_items AS oi ON oi.order_id   = o.order_id\nWHERE c.country = 'France'\n  AND o.order_date >= '2020-01-01'\n  AND o.order_date <  '2020-04-01';\n\n/* Answer the following: In 2021, which month had the lowest average order-level profit? (order-level profit is summed over its items, average calculated across all orders of the month) */\nSELECT strftime('%Y-%m', o.order_date) AS month,\n       AVG(order_profit)                AS avg_month_profit\nFROM (\n    SELECT o.order_id,\n           o.order_date,\n           SUM(oi.quantity * (oi.unit_price - oi.unit_cost)) AS order_profit\n    FROM orders AS o\n    JOIN order_items AS oi ON oi.order_id = o.order_id\n    WHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY o.order_id\n) AS sub\nGROUP BY month\nORDER BY avg_month_profit ASC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers placed more than 5 orders during the calendar year 2020? */\nSELECT COUNT(*)\nFROM (\n    SELECT c.customer_id\n    FROM customers AS c\n    JOIN orders AS o ON o.customer_id = c.customer_id\n    WHERE o.order_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY c.customer_id\n    HAVING COUNT(o.order_id) > 5\n) AS heavy_buyers;\n\n/* Answer the following: What was the average profit per order item for products in the 'Electronics' category during 2019? profit per item is quantity * (unit_price - unit_cost) */\nSELECT AVG(oi.quantity * (oi.unit_price - oi.unit_cost)) AS avg_item_profit\nFROM order_items AS oi\nJOIN orders  AS o ON o.order_id  = oi.order_id\nJOIN products AS p ON p.product_id = oi.product_id\nWHERE p.product_category = 'Electronics'\n  AND o.order_date BETWEEN '2019-01-01' AND '2019-12-31';\n\n/* Answer the following: Which supplier incurred the highest total cost (quantity * unit_cost) across all items sold in 2021? */\nSELECT s.supplier_name\nFROM suppliers AS s\nJOIN products     AS p  ON p.supplier_id = s.supplier_id\nJOIN order_items  AS oi ON oi.product_id = p.product_id\nJOIN orders       AS o  ON o.order_id    = oi.order_id\nWHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY s.supplier_id, s.supplier_name\nORDER BY SUM(oi.quantity * oi.unit_cost) DESC\nLIMIT 1;\n\n/* Answer the following: Provide, for each customer country, the total revenue (quantity * unit_price) generated during June 2021. */\nSELECT c.country,\n       SUM(oi.quantity * oi.unit_price) AS total_revenue\nFROM customers AS c\nJOIN orders    AS o  ON o.customer_id = c.customer_id\nJOIN order_items AS oi ON oi.order_id   = o.order_id\nWHERE o.order_date BETWEEN '2021-06-01' AND '2021-06-30'\nGROUP BY c.country;\n\n/* Answer the following: Identify the customer who recorded the single most-profitable order in 2021 and show the order\u2019s profit value. */\nSELECT c.customer_name,\n       o.order_id,\n       SUM(oi.quantity * (oi.unit_price - oi.unit_cost)) AS order_profit\nFROM orders AS o\nJOIN order_items AS oi ON oi.order_id  = o.order_id\nJOIN customers   AS c  ON c.customer_id = o.customer_id\nWHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY o.order_id, c.customer_name\nORDER BY order_profit DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 customers who have placed the highest number of orders overall, showing each customer\u2019s name and order count. */\nSELECT c.customer_name,\n       COUNT(o.order_id) AS order_count\nFROM customers AS c\nJOIN orders AS o ON o.customer_id = c.customer_id\nGROUP BY c.customer_id, c.customer_name\nORDER BY order_count DESC\nLIMIT 5;\n\n/* Answer the following: Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "evidence": "",
            "raw_question": "What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which U.S. city recorded the greatest percentage growth in total sales of promo_id = 999 products from Q4 2019 (calendar_quarter_id = 1772) to Q4 2020 (calendar_quarter_id = 1776)? */\nWITH q19 AS (\n    SELECT city_id ,\n           SUM(sales_amount) AS s19\n    FROM sales  AS S\n    JOIN city   AS C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY city_id\n),\nq20 AS (\n    SELECT city_id ,\n           SUM(sales_amount) AS s20\n    FROM sales  AS S\n    JOIN city   AS C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY city_id\n),\npct AS (\n    SELECT q20.city_id ,\n           (q20.s20 - q19.s19) * 100.0 / NULLIF(q19.s19,0) AS pct_growth\n    FROM q20\n    JOIN q19 USING (city_id)\n)\nSELECT C.city_name\nFROM pct\nJOIN city C USING (city_id)\nORDER BY pct_growth DESC\nLIMIT 1;\n\n/* Answer the following: What was the overall percentage change in total U.S. sales of promo_id = 999 products from Q4 2019 to Q4 2020? */\nWITH totals AS (\n    SELECT calendar_quarter_id,\n           SUM(sales_amount) AS amt\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id IN (1772,1776)\n      AND C.country = 'United States'\n    GROUP BY calendar_quarter_id\n)\nSELECT (MAX(CASE WHEN calendar_quarter_id = 1776 THEN amt END) -\n        MAX(CASE WHEN calendar_quarter_id = 1772 THEN amt END)) * 100.0\n        / MAX(CASE WHEN calendar_quarter_id = 1772 THEN amt END)  AS pct_change\nFROM totals;\n\n/* Answer the following: What is the average Q4 2020 sales amount for products whose U.S. sales grew by at least 50 % between the two quarters under promo_id = 999? */\nWITH q19 AS (\n    SELECT product_id ,\n           SUM(sales_amount) AS s19\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\nq20 AS (\n    SELECT product_id ,\n           SUM(sales_amount) AS s20\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n)\nSELECT AVG(q20.s20) AS avg_sales_2020\nFROM q20\nJOIN q19 USING (product_id)\nWHERE (q20.s20 - q19.s19) * 100.0 / NULLIF(q19.s19,0) >= 50;\n\n/* Answer the following: List the five products that gained the most absolute sales dollars in the United States between Q4 2019 and Q4 2020 for promo_id = 999. */\nWITH q19 AS (\n    SELECT product_id , SUM(sales_amount) AS s19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\nq20 AS (\n    SELECT product_id , SUM(sales_amount) AS s20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n)\nSELECT P.product_name ,\n       (q20.s20 - COALESCE(q19.s19,0)) AS growth_amount\nFROM q20\nLEFT JOIN q19 USING (product_id)\nJOIN product P USING (product_id)\nORDER BY growth_amount DESC\nLIMIT 5;\n\n/* Answer the following: How many products had zero U.S. sales in Q4 2019 but registered some sales in Q4 2020 under promo_id = 999? */\nWITH q19 AS (\n    SELECT DISTINCT product_id\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n),\nq20 AS (\n    SELECT DISTINCT product_id\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n)\nSELECT COUNT(*)\nFROM q20\nWHERE product_id NOT IN (SELECT product_id FROM q19);\n\n/* Answer the following: Among U.S. products whose share of promo 999 sales decreased between the two quarters, which product had the smallest decline (i.e., least negative change in share)? */\nWITH tot19 AS (\n    SELECT SUM(sales_amount) AS ttl19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n),\ntot20 AS (\n    SELECT SUM(sales_amount) AS ttl20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n),\np19 AS (\n    SELECT product_id,\n           SUM(sales_amount) * 100.0 / (SELECT ttl19 FROM tot19) AS share19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\np20 AS (\n    SELECT product_id,\n           SUM(sales_amount) * 100.0 / (SELECT ttl20 FROM tot20) AS share20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\ndiff AS (\n    SELECT p20.product_id ,\n           p20.share20 - p19.share19 AS delta\n    FROM p20\n    JOIN p19 USING (product_id)\n    WHERE p20.share20 < p19.share19\n)\nSELECT P.product_name\nFROM diff\nJOIN product P USING (product_id)\nORDER BY delta DESC          /* closest to zero (smallest decline) */\nLIMIT 1;\n\n/* Answer the following: How many U.S. cities experienced at least a 20 % increase in total promo 999 sales from Q4 2019 to Q4 2020? */\nWITH c19 AS (\n    SELECT city_id , SUM(sales_amount) AS s19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY city_id\n),\nc20 AS (\n    SELECT city_id , SUM(sales_amount) AS s20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY city_id\n)\nSELECT COUNT(*)\nFROM c20\nJOIN c19 USING (city_id)\nWHERE (c20.s20 - c19.s19) * 100.0 / NULLIF(c19.s19,0) >= 20;\n\n/* Answer the following: For each U.S. region, which product had the highest Q4 2020 sales under promo 999, considering only cities whose promo 999 sales grew by at least 20 %? */\nWITH growth_cities AS (\n    /* City list whose promo-999 sales grew \u2265 20 % */\n    WITH c19 AS (\n        SELECT city_id , SUM(sales_amount) AS s19\n        FROM sales\n        WHERE promo_id = 999 AND calendar_quarter_id = 1772\n        GROUP BY city_id\n    ),\n    c20 AS (\n        SELECT city_id , SUM(sales_amount) AS s20\n        FROM sales\n        WHERE promo_id = 999 AND calendar_quarter_id = 1776\n        GROUP BY city_id\n    )\n    SELECT c20.city_id\n    FROM c20\n    JOIN c19 USING (city_id)\n    WHERE (c20.s20 - c19.s19) * 100.0 / NULLIF(c19.s19,0) >= 20\n),\nsales20 AS (\n    SELECT CI.region ,\n           S.product_id ,\n           SUM(S.sales_amount) AS amt20\n    FROM sales S\n    JOIN city CI USING (city_id)\n    WHERE S.calendar_quarter_id = 1776\n      AND S.promo_id = 999\n      AND CI.country = 'United States'\n      AND CI.city_id IN (SELECT city_id FROM growth_cities)\n    GROUP BY CI.region , S.product_id\n)\nSELECT R.region,\n       P.product_name,\n       R.amt20\nFROM (\n    SELECT region ,\n           product_id ,\n           amt20 ,\n           ROW_NUMBER() OVER (PARTITION BY region ORDER BY amt20 DESC) AS rn\n    FROM sales20\n) R\nJOIN product P USING (product_id)\nWHERE R.rn = 1;\n\n/* Answer the following: Among U.S. cities with at least \\$500 000 in promo 999 sales during Q4 2019, which city had the lowest percentage growth by Q4 2020? */\nWITH c19 AS (\n    SELECT city_id , SUM(sales_amount) AS s19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY city_id\n    HAVING SUM(sales_amount) >= 500000\n),\nc20 AS (\n    SELECT city_id , SUM(sales_amount) AS s20\n    FROM sales S\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n    GROUP BY city_id\n)\nSELECT C.city_name\nFROM c19\nJOIN c20 USING (city_id)\nJOIN city C USING (city_id)\nORDER BY (c20.s20 - c19.s19) * 100.0 / c19.s19\nLIMIT 1;\n\n/* Answer the following: Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "evidence": "",
            "raw_question": "Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For every customer, what was the net transaction amount (deposits \u00adminus withdrawals) in March 2020? */\nSELECT\n    customer_id,\n    SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n             WHEN transaction_type = 'withdrawal' THEN -amount\n        END) AS net_amount_march_2020\nFROM Transactions\nWHERE transaction_date >= '2020-03-01'\n  AND transaction_date <  '2020-04-01'\nGROUP BY customer_id;\n\n/* Answer the following: Which customer recorded the single highest month-end balance in any month of 2020, and in which month did it occur? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n)\nSELECT customer_id, month\nFROM month_balances\nORDER BY month_end_balance DESC\nLIMIT 1;\n\n/* Answer the following: For each month of 2020, how many customers had a negative month-end balance, and which month had the largest such count? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), negative_counts AS (\n    SELECT month, COUNT(*) AS negative_customer_cnt\n    FROM month_balances\n    WHERE month_end_balance < 0\n    GROUP BY month\n)\nSELECT month\nFROM negative_counts\nORDER BY negative_customer_cnt DESC\nLIMIT 1;\n\n/* Answer the following: What was the average month-end balance across all customers for December 2020? */\nWITH dec_balances AS (\n    SELECT\n        customer_id,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date >= '2020-12-01'\n      AND transaction_date <  '2021-01-01'\n    GROUP BY customer_id\n)\nSELECT AVG(month_end_balance) AS avg_dec_balance\nFROM dec_balances;\n\n/* Answer the following: Among customers who posted a positive balance in every month of 2020, which customer ended the year with the lowest cumulative 2020 balance (sum of all 12 month-end balances)? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), always_positive AS (\n    SELECT customer_id\n    FROM month_balances\n    GROUP BY customer_id\n    HAVING MIN(month_end_balance) > 0\n), year_totals AS (\n    SELECT customer_id, SUM(month_end_balance) AS total_2020_balance\n    FROM month_balances\n    WHERE customer_id IN (SELECT customer_id FROM always_positive)\n    GROUP BY customer_id\n)\nSELECT customer_id\nFROM year_totals\nORDER BY total_2020_balance ASC\nLIMIT 1;\n\n/* Answer the following: Which month of 2020 showed the largest increase in average customer balance compared with the previous month? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), month_avgs AS (\n    SELECT month, AVG(month_end_balance) AS avg_bal\n    FROM month_balances\n    GROUP BY month\n), diffs AS (\n    SELECT\n        m2.month,\n        m2.avg_bal - COALESCE(m1.avg_bal, 0) AS increase_from_prev\n    FROM month_avgs AS m2\n    LEFT JOIN month_avgs AS m1\n           ON m1.month = m2.month - INTERVAL '1 month'\n)\nSELECT month\nFROM diffs\nORDER BY increase_from_prev DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 customers who experienced the largest gap between their highest and lowest month-end balances in 2020. */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), ranges AS (\n    SELECT\n        customer_id,\n        MAX(month_end_balance) - MIN(month_end_balance) AS balance_range\n    FROM month_balances\n    GROUP BY customer_id\n)\nSELECT customer_id\nFROM ranges\nORDER BY balance_range DESC\nLIMIT 5;\n\n/* Answer the following: Which quarter of 2020 (Q1, Q2, Q3 or Q4) had the highest average month-end balance per customer? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), quarter_balances AS (\n    SELECT\n        customer_id,\n        EXTRACT(QUARTER FROM month) AS qtr,\n        SUM(month_end_balance) / 3.0 AS avg_quarter_balance\n    FROM month_balances\n    GROUP BY customer_id, EXTRACT(QUARTER FROM month)\n), quarter_avg AS (\n    SELECT qtr, AVG(avg_quarter_balance) AS overall_avg\n    FROM quarter_balances\n    GROUP BY qtr\n)\nSELECT qtr\nFROM quarter_avg\nORDER BY overall_avg DESC\nLIMIT 1;\n\n/* Answer the following: Identify every instance in 2020 where a customer\u2019s balance switched from positive to negative from one month to the next.  List customer-id, previous month, and current month. */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), lagged AS (\n    SELECT\n        customer_id,\n        month,\n        month_end_balance,\n        LAG(month_end_balance) OVER (\n            PARTITION BY customer_id ORDER BY month\n        ) AS prev_balance,\n        LAG(month) OVER (\n            PARTITION BY customer_id ORDER BY month\n        ) AS prev_month\n    FROM month_balances\n)\nSELECT\n    customer_id,\n    prev_month  AS positive_month,\n    month       AS negative_month\nFROM lagged\nWHERE prev_balance > 0\n  AND month_end_balance < 0;\n\n/* Answer the following: For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "evidence": "",
            "raw_question": "Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many unique customers have successfully received at least one pizza (i.e. their orders were not cancelled)? */\nSELECT COUNT(DISTINCT CO.customer_id)\nFROM customer_orders  AS CO\nJOIN runner_orders    AS RO ON CO.order_id = RO.order_id\nWHERE RO.cancellation IS NULL;\n\n/* Answer the following: What is the average delivery duration in minutes for Meat Lovers pizzas that were delivered? */\nSELECT AVG(\n           CAST(\n               TRIM(' minutes' FROM RO.duration) AS INTEGER\n           )\n       ) AS avg_minutes\nFROM customer_orders AS CO\nJOIN runner_orders   AS RO ON CO.order_id = RO.order_id\nJOIN pizza_names     AS PN ON CO.pizza_id   = PN.pizza_id\nWHERE PN.pizza_name = 'Meat Lovers'\n  AND RO.cancellation IS NULL;\n\n/* Answer the following: For each runner, how many total kilometres did they travel on successful deliveries? */\nSELECT RO.runner_id,\n       SUM(\n           CAST(TRIM(' km' FROM RO.distance) AS DECIMAL)\n       ) AS total_km\nFROM runner_orders AS RO\nWHERE RO.cancellation IS NULL\nGROUP BY RO.runner_id;\n\n/* Answer the following: List the three most popular toppings (including extras) across all delivered pizzas. */\nWITH delivered AS (\n    SELECT CO.order_id,\n           CO.pizza_id,\n           CO.extras\n    FROM customer_orders AS CO\n    JOIN runner_orders  AS RO ON CO.order_id = RO.order_id\n    WHERE RO.cancellation IS NULL\n), pizza_base AS (\n    SELECT d.order_id,\n           TRIM(value)::INTEGER AS topping_id\n    FROM delivered d,\n         LATERAL UNNEST(STRING_TO_ARRAY(\n             (SELECT pr.toppings\n              FROM pizza_recipes pr\n              WHERE pr.pizza_id = d.pizza_id), ',')) AS value\n), pizza_extras AS (\n    SELECT d.order_id,\n           TRIM(value)::INTEGER AS topping_id\n    FROM delivered d,\n         LATERAL UNNEST(STRING_TO_ARRAY(d.extras, ',')) AS value\n    WHERE d.extras <> ''\n)\nSELECT pt.topping_name,\n       COUNT(*) AS times_used\nFROM (\n    SELECT * FROM pizza_base\n    UNION ALL\n    SELECT * FROM pizza_extras\n) t\nJOIN pizza_toppings pt ON t.topping_id = pt.topping_id\nGROUP BY pt.topping_name\nORDER BY times_used DESC\nLIMIT 3;\n\n/* Answer the following: How many delivered orders contained at least one extra topping but no exclusions? */\nSELECT COUNT(*)\nFROM customer_orders AS CO\nJOIN runner_orders   AS RO ON CO.order_id = RO.order_id\nWHERE RO.cancellation IS NULL\n  AND CO.extras <> ''\n  AND CO.exclusions = '';\n\n*/* Answer the following: What was each runner\u2019s average delivery speed (in km/h) for their successful runs? */\nSELECT RO.runner_id,\n       ROUND(\n           SUM(CAST(TRIM(' km'      FROM RO.distance) AS DECIMAL)) /\n           SUM(CAST(TRIM(' minutes' FROM RO.duration) AS DECIMAL)) * 60\n       ,2) AS avg_km_per_hour\nFROM runner_orders AS RO\nWHERE RO.cancellation IS NULL\nGROUP BY RO.runner_id;\n\n/* Answer the following: On which calendar date were the most pizzas (any type) successfully delivered? */\nSELECT DATE(CO.order_time) AS delivery_date,\n       COUNT(*)            AS pizzas_delivered\nFROM customer_orders AS CO\nJOIN runner_orders   AS RO ON CO.order_id = RO.order_id\nWHERE RO.cancellation IS NULL\nGROUP BY delivery_date\nORDER BY pizzas_delivered DESC\nLIMIT 1;\n\n/* Answer the following: What percentage of all placed orders were cancelled by the customer or runner? */\nWITH counts AS (\n    SELECT\n        SUM(CASE WHEN RO.cancellation IS NOT NULL THEN 1 ELSE 0 END) AS cancelled,\n        COUNT(*)                                                    AS total\n    FROM runner_orders RO\n)\nSELECT ROUND(cancelled * 100.0 / total, 2) AS cancel_percent\nFROM counts;\n\n/* Answer the following: For each month, how many Vegetarian pizzas were delivered (excluding cancellations)? */\nSELECT TO_CHAR(CO.order_time, 'YYYY-MM') AS year_month,\n       COUNT(*)                          AS vegetarian_pizzas\nFROM customer_orders CO\nJOIN runner_orders  RO ON CO.order_id = RO.order_id\nJOIN pizza_names    PN ON CO.pizza_id  = PN.pizza_id\nWHERE PN.pizza_name = 'Vegetarian'\n  AND RO.cancellation IS NULL\nGROUP BY year_month\nORDER BY year_month;\n\n/* Answer the following: Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Please examine our records for Chinese cities in July 2021 and identify both the shortest and longest streaks of consecutive date entries. List the dates along with their corresponding city names, capitalizing the first letter of each city name, for these streaks.",
            "evidence": "",
            "raw_question": "Please examine our records for Chinese cities in July 2021 and identify both the shortest and longest streaks of consecutive date entries. List the dates along with their corresponding city names, capitalizing the first letter of each city name, for these streaks.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which three ingredients were used the most across all delivered pizzas? */\nSELECT i.name ,\n       SUM(op.quantity) AS total_used\nFROM   orders            AS o\nJOIN   order_pizzas      AS op ON o.id = op.order_id\nJOIN   pizza_ingredients AS pi ON op.pizza_id = pi.pizza_id\nJOIN   ingredients       AS i  ON pi.ingredient_id = i.id\nWHERE  o.status = 'Delivered'\nGROUP  BY i.id , i.name\nORDER  BY total_used DESC\nLIMIT  3;\n\n/* Answer the following: How many vegetarian pizzas (i.e., pizzas that do not contain any meat ingredients) were ordered last month? vegetarian refers to pizzas whose ingredients are all in category 'Vegetable' or 'Cheese'; last month refers to strftime('%Y-%m', 'now', '-1 month') compared to order_date */\nSELECT SUM(op.quantity)\nFROM   orders       AS o\nJOIN   order_pizzas AS op ON o.id = op.order_id\nWHERE  strftime('%Y-%m', o.order_date) = strftime('%Y-%m', 'now', '-1 month')\nAND    NOT EXISTS (\n        SELECT 1\n        FROM   pizza_ingredients pi\n        JOIN   ingredients i ON i.id = pi.ingredient_id\n        WHERE  pi.pizza_id = op.pizza_id\n        AND    i.category = 'Meat'\n);\n\n/* Answer the following: What is the average spending per order for customers who have placed at least 5 orders? at least 5 orders refers to COUNT(*) >= 5; average spending per order refers to AVG(total_amount) */\nSELECT AVG(o.total_amount)\nFROM   orders o\nWHERE  o.customer_id IN (\n       SELECT customer_id\n       FROM   orders\n       GROUP  BY customer_id\n       HAVING COUNT(*) >= 5\n);\n\n/* Answer the following: Find the total revenue generated from 'Pepperoni' pizzas in the first quarter of 2022. first quarter refers to order_date between '2022-01-01' and '2022-03-31' */\nSELECT SUM(op.quantity * p.base_price)\nFROM   order_pizzas AS op\nJOIN   pizzas       AS p ON op.pizza_id = p.id\nJOIN   orders       AS o ON o.id = op.order_id\nWHERE  p.name = 'Pepperoni'\nAND    o.order_date BETWEEN '2022-01-01' AND '2022-03-31';\n\n/* Answer the following: List the names of customers who ordered the 'Hawaiian' pizza more than twice. */\nSELECT c.name\nFROM   customers c\nWHERE  c.id IN (\n       SELECT o.customer_id\n       FROM   orders o\n       JOIN   order_pizzas op ON o.id = op.order_id\n       JOIN   pizzas p        ON p.id = op.pizza_id\n       WHERE  p.name = 'Hawaiian'\n       GROUP  BY o.customer_id\n       HAVING SUM(op.quantity) > 2\n);\n\n/* Answer the following: Which day of the week has the highest average number of pizzas per order? */\nSELECT day_name\nFROM (\n     SELECT strftime('%w', o.order_date) AS day_num,\n            CASE strftime('%w', o.order_date)\n                 WHEN '0' THEN 'Sunday'\n                 WHEN '1' THEN 'Monday'\n                 WHEN '2' THEN 'Tuesday'\n                 WHEN '3' THEN 'Wednesday'\n                 WHEN '4' THEN 'Thursday'\n                 WHEN '5' THEN 'Friday'\n                 WHEN '6' THEN 'Saturday'\n            END AS day_name,\n            AVG(op.quantity) AS avg_pizzas\n     FROM   orders o\n     JOIN   order_pizzas op ON o.id = op.order_id\n     GROUP  BY day_num\n) \nORDER BY avg_pizzas DESC\nLIMIT 1;\n\n/* Answer the following: What is the percentage of delivered orders that were marked as late (delivery_time_min > promised_time_min)? */\nSELECT ROUND(\n       100.0 * SUM(CASE WHEN o.delivery_time_min > o.promised_time_min THEN 1 ELSE 0 END)\n       / COUNT(*), 2\n) \nFROM   orders o\nWHERE  o.status = 'Delivered';\n\n/* Answer the following: Give the total quantity of gluten-free crusts used in 2021. gluten-free crust refers to crust_type = 'Gluten-Free' */\nSELECT SUM(op.quantity)\nFROM   order_pizzas op\nJOIN   pizzas       p  ON p.id = op.pizza_id\nJOIN   orders       o  ON o.id = op.order_id\nWHERE  p.crust_type = 'Gluten-Free'\nAND    o.order_date BETWEEN '2021-01-01' AND '2021-12-31';\n\n/* Answer the following: Identify the pair of ingredients that most frequently appear together on the same pizza. */\nSELECT i1.name  AS ingredient_1,\n       i2.name  AS ingredient_2,\n       COUNT(*) AS appearances\nFROM   pizza_ingredients pi1\nJOIN   pizza_ingredients pi2\n       ON pi1.pizza_id = pi2.pizza_id\n       AND pi1.ingredient_id < pi2.ingredient_id\nJOIN   ingredients i1 ON i1.id = pi1.ingredient_id\nJOIN   ingredients i2 ON i2.id = pi2.ingredient_id\nGROUP  BY pi1.ingredient_id, pi2.ingredient_id\nORDER  BY appearances DESC\nLIMIT  1;\n\n/* Answer the following: Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "evidence": "",
            "raw_question": "Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For customers from France, what is the average total profit in each of the ten equally-sized tiers based on their overall 2020 profits? */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           SUM(s.profit) AS total_profit\n    FROM customers AS c\n    JOIN sales      AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'France'\n      AND s.order_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY c.customer_id\n), tiered AS (\n    SELECT customer_id,\n           total_profit,\n           NTILE(10) OVER (ORDER BY total_profit) AS tier\n    FROM customer_profit\n)\nSELECT tier,\n       AVG(total_profit) AS avg_profit\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: What are the highest and lowest order profits inside each of the ten evenly-divided tiers for U.S. orders placed during March 2021? */\nWITH order_profit AS (\n    SELECT o.order_id,\n           SUM(oi.quantity * (oi.unit_price - oi.cost)) AS profit\n    FROM orders        AS o\n    JOIN order_items   AS oi ON oi.order_id = o.order_id\n    WHERE o.order_date BETWEEN '2021-03-01' AND '2021-03-31'\n    GROUP BY o.order_id\n), tiered AS (\n    SELECT order_id,\n           profit,\n           NTILE(10) OVER (ORDER BY profit) AS tier\n    FROM order_profit\n)\nSELECT tier,\n       MAX(profit) AS highest_profit,\n       MIN(profit) AS lowest_profit\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Obtain the number of products and their combined list price for each decile when all products are split into ten price tiers. */\nWITH tiered AS (\n    SELECT p.product_id,\n           p.list_price,\n           NTILE(10) OVER (ORDER BY p.list_price) AS tier\n    FROM products AS p\n)\nSELECT tier,\n       COUNT(product_id) AS product_count,\n       SUM(list_price)   AS total_price\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Within the top decile of 2021 profits for Italian customers, which product category generated the greatest total profit? */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           SUM(s.profit) AS total_profit\n    FROM customers AS c\n    JOIN sales     AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'Italy'\n      AND s.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY c.customer_id\n), top_customers AS (\n    SELECT customer_id\n    FROM (\n        SELECT customer_id,\n               total_profit,\n               NTILE(10) OVER (ORDER BY total_profit) AS tier\n        FROM customer_profit\n    ) WHERE tier = 10\n), category_profit AS (\n    SELECT pr.category_id,\n           SUM(oi.quantity * (oi.unit_price - oi.cost)) AS profit\n    FROM orders       AS o\n    JOIN order_items  AS oi ON oi.order_id  = o.order_id\n    JOIN products     AS pr ON pr.product_id = oi.product_id\n    WHERE o.customer_id IN (SELECT customer_id FROM top_customers)\n      AND o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY pr.category_id\n)\nSELECT c.category_name\nFROM categories AS c\nJOIN category_profit AS cp ON cp.category_id = c.category_id\nORDER BY cp.profit DESC\nLIMIT 1;\n\n/* Answer the following: Show the average shipping time (in days) for each of ten shipping-speed tiers for orders sent out during 2020. */\nWITH shipping AS (\n    SELECT s.order_id,\n           JULIANDAY(s.delivered_date) - JULIANDAY(s.shipped_date) AS shipping_days\n    FROM shipments AS s\n    WHERE s.shipped_date BETWEEN '2020-01-01' AND '2020-12-31'\n), tiered AS (\n    SELECT order_id,\n           shipping_days,\n           NTILE(10) OVER (ORDER BY shipping_days) AS tier\n    FROM shipping\n)\nSELECT tier,\n       AVG(shipping_days) AS avg_shipping_days\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: List the three salespersons with the lowest total profit in the bottom profit decile for Q2 2021. */\nWITH salesperson_profit AS (\n    SELECT sp.salesperson_id,\n           SUM(s.profit) AS total_profit\n    FROM salespersons AS sp\n    JOIN sales        AS s ON s.salesperson_id = sp.salesperson_id\n    WHERE s.order_date BETWEEN '2021-04-01' AND '2021-06-30'\n    GROUP BY sp.salesperson_id\n), tiered AS (\n    SELECT salesperson_id,\n           total_profit,\n           NTILE(10) OVER (ORDER BY total_profit) AS tier\n    FROM salesperson_profit\n)\nSELECT sp.name,\n       t.total_profit\nFROM tiered AS t\nJOIN salespersons AS sp ON sp.salesperson_id = t.salesperson_id\nWHERE t.tier = 1\nORDER BY t.total_profit ASC\nLIMIT 3;\n\n/* Answer the following: How many Italian customers fall into the highest profit decile based on their December 2021 profits? */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           SUM(s.profit) AS total_profit\n    FROM customers AS c\n    JOIN sales     AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'Italy'\n      AND s.order_date BETWEEN '2021-12-01' AND '2021-12-31'\n    GROUP BY c.customer_id\n), tiered AS (\n    SELECT customer_id,\n           NTILE(10) OVER (ORDER BY total_profit) AS tier\n    FROM customer_profit\n)\nSELECT COUNT(*) AS italian_customers_in_top_decile\nFROM tiered\nWHERE tier = 10;\n\n/* Answer the following: Compute the median order value for each decile when 2021 orders are divided into ten equal-sized value tiers. */\nWITH order_values AS (\n    SELECT o.order_id,\n           SUM(oi.quantity * oi.unit_price) AS order_value\n    FROM orders       AS o\n    JOIN order_items  AS oi ON oi.order_id = o.order_id\n    WHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY o.order_id\n), tiered AS (\n    SELECT order_id,\n           order_value,\n           NTILE(10) OVER (ORDER BY order_value) AS tier\n    FROM order_values\n)\nSELECT tier,\n       PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY order_value) AS median_order_value\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Give the average profit per order for each of the ten equally-sized tiers of Italian customer profits in December 2021. */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           AVG(s.profit) AS avg_order_profit\n    FROM customers AS c\n    JOIN sales     AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'Italy'\n      AND s.order_date BETWEEN '2021-12-01' AND '2021-12-31'\n    GROUP BY c.customer_id\n), tiered AS (\n    SELECT customer_id,\n           avg_order_profit,\n           NTILE(10) OVER (ORDER BY avg_order_profit) AS tier\n    FROM customer_profit\n)\nSELECT tier,\n       AVG(avg_order_profit) AS tier_avg_profit\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "n_examples": 9,
            "db_id": "complex_oracle"
        },
        {
            "question": "Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "evidence": "",
            "raw_question": "Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each year from 2019 to 2021, how many cities were added in January, and what is the cumulative running total of January additions up to that year? January refers to EXTRACT(MONTH FROM created_at) = 1 */\nSELECT\n  year,\n  jan_new_cities,\n  SUM(jan_new_cities) OVER (ORDER BY year) AS running_total_jan\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS jan_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 1\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2019 AND 2021\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nORDER BY year;\n\n/* Answer the following: Show the year-over-year growth percentage of new cities created in February for the years 2020 and 2021, using 2019 as the comparison baseline. February refers to month = 2 */\nSELECT\n  year,\n  feb_new_cities,\n  ROUND(\n    (feb_new_cities - LAG(feb_new_cities) OVER (ORDER BY year)) * 100.0\n    / LAG(feb_new_cities) OVER (ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS feb_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 2\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2019 AND 2021\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nWHERE year IN (2020, 2021)\nORDER BY year;\n\n/* Answer the following: For each year from 2021 to 2023, what is the total number of cities added during April, May and June combined, and what is the year-over-year growth percentage relative to the previous year? April, May and June refer to months 4-6 */\nSELECT\n  year,\n  q2_new_cities,\n  ROUND(\n    (q2_new_cities - LAG(q2_new_cities) OVER (ORDER BY year)) * 100.0\n    / LAG(q2_new_cities) OVER (ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS q2_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) BETWEEN 4 AND 6\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2020 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nWHERE year BETWEEN 2021 AND 2023\nORDER BY year;\n\n/* Answer the following: What is the cumulative running total of cities added during the second quarter (April-June) up to and including each year from 2021 to 2023? second quarter refers to months 4-6 */\nSELECT\n  year,\n  q2_new_cities,\n  SUM(q2_new_cities) OVER (ORDER BY year) AS running_total_q2\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS q2_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) BETWEEN 4 AND 6\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nORDER BY year;\n\n/* Answer the following: Compare the number of cities inserted in April 2023 with April 2022 and show the percentage growth. April refers to month = 4 */\nSELECT\n  curr.year AS year_2023,\n  curr.apr_new_cities  AS april_2023_cities,\n  prev.apr_new_cities  AS april_2022_cities,\n  ROUND(\n    (curr.apr_new_cities - prev.apr_new_cities) * 100.0 / prev.apr_new_cities,\n    2\n  ) AS growth_percent\nFROM (\n  SELECT COUNT(*) AS apr_new_cities , 2023 AS year\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 4\n    AND EXTRACT(YEAR FROM created_at) = 2023\n) AS curr\nCROSS JOIN (\n  SELECT COUNT(*) AS apr_new_cities , 2022 AS year\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 4\n    AND EXTRACT(YEAR FROM created_at) = 2022\n) AS prev;\n\n/* Answer the following: For the months April, May and June, list 2022 and 2023 showing the total cities added in each month, the cumulative running total for that month across the years, and the year-over-year growth percentage. */\nSELECT\n  year,\n  month,\n  month_new_cities,\n  SUM(month_new_cities) OVER (PARTITION BY month ORDER BY year)      AS running_total_month,\n  ROUND(\n    (month_new_cities - LAG(month_new_cities) OVER (PARTITION BY month ORDER BY year)) * 100.0\n    / LAG(month_new_cities) OVER (PARTITION BY month ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at)   AS year,\n    EXTRACT(MONTH FROM created_at)  AS month,\n    COUNT(*)                        AS month_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) IN (4,5,6)\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at), EXTRACT(MONTH FROM created_at)\n) AS sub\nWHERE year IN (2022, 2023)\nORDER BY month, year;\n\n/* Answer the following: Which month among April, May and June experienced the highest year-over-year growth in city additions from 2022 to 2023? */\nSELECT\n  month,\n  yoy_growth_percent\nFROM (\n  SELECT\n    month,\n    ROUND(\n      (SUM(CASE WHEN year = 2023 THEN month_new_cities END) -\n       SUM(CASE WHEN year = 2022 THEN month_new_cities END)) * 100.0\n      / SUM(CASE WHEN year = 2022 THEN month_new_cities END),\n      2\n    ) AS yoy_growth_percent\n  FROM (\n    SELECT\n      EXTRACT(YEAR FROM created_at)   AS year,\n      EXTRACT(MONTH FROM created_at)  AS month,\n      COUNT(*)                        AS month_new_cities\n    FROM city\n    WHERE EXTRACT(MONTH FROM created_at) IN (4,5,6)\n      AND EXTRACT(YEAR FROM created_at) IN (2022, 2023)\n    GROUP BY EXTRACT(YEAR FROM created_at), EXTRACT(MONTH FROM created_at)\n  ) AS counts\n  GROUP BY month\n) AS growths\nORDER BY yoy_growth_percent DESC\nLIMIT 1;\n\n/* Answer the following: Give the cumulative total of all cities added from January through May for each year between 2021 and 2023. January through May refers to EXTRACT(MONTH FROM created_at) <= 5 */\nSELECT\n  year,\n  jan_to_may_cities,\n  SUM(jan_to_may_cities) OVER (ORDER BY year) AS running_total_to_may\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS jan_to_may_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) <= 5\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nORDER BY year;\n\n/* Answer the following: For each year from 2021 to 2023, what percentage of second-quarter (April-June) city additions occurred in April? */\nSELECT\n  year,\n  ROUND(april_cities * 100.0 / q2_total , 2) AS april_share_percent\nFROM (\n  SELECT\n    year,\n    SUM(CASE WHEN month = 4 THEN cnt ELSE 0 END) AS april_cities,\n    SUM(cnt)                                     AS q2_total\n  FROM (\n    SELECT\n      EXTRACT(YEAR FROM created_at)  AS year,\n      EXTRACT(MONTH FROM created_at) AS month,\n      COUNT(*)                       AS cnt\n    FROM city\n    WHERE EXTRACT(MONTH FROM created_at) BETWEEN 4 AND 6\n      AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n    GROUP BY EXTRACT(YEAR FROM created_at), EXTRACT(MONTH FROM created_at)\n  ) AS monthly\n  GROUP BY year\n) AS totals\nORDER BY year;\n\n/* Answer the following: Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "evidence": "",
            "raw_question": "Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which Chinese city had the highest average temperature during July 2021?  July 2021 refers to dates between '2021-07-01' and '2021-07-31'. */\nSELECT C.name\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.country_code_2 = 'cn'\n  AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\nGROUP BY C.name\nORDER BY AVG(S.temperature) DESC\nLIMIT 1;\n\n/* Answer the following: Show the three Chinese cities that recorded data on the largest number of days in July 2021 (most active cities). */\nSELECT C.name,\n       COUNT(*) AS record_days\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.country_code_2 = 'cn'\n  AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\nGROUP BY C.name\nORDER BY record_days DESC\nLIMIT 3;\n\n/* Answer the following: For Beijing, list the first day and the last day on which any record exists in 2021. */\nSELECT MIN(S.date) AS first_record,\n       MAX(S.date) AS last_record\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.name = 'Beijing'\n  AND S.date BETWEEN '2021-01-01' AND '2021-12-31';\n\n/* Answer the following: Which Chinese city achieved the longest streak of consecutive record dates in the year 2021, and how many days long was that streak?  Consecutive dates are detected with DATE(S.date)-ROW_NUMBER() window trick. */\nWITH cn AS (\n    SELECT C.id,\n           C.name,\n           S.date,\n           DATE(S.date) - INTERVAL ROW_NUMBER() OVER (PARTITION BY C.id ORDER BY S.date) DAY AS grp_key\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.country_code_2 = 'cn'\n      AND S.date BETWEEN '2021-01-01' AND '2021-12-31'\n)\nSELECT name,\n       COUNT(*) AS streak_len\nFROM cn\nGROUP BY id, name, grp_key\nORDER BY streak_len DESC\nLIMIT 1;\n\n/* Answer the following: Which Chinese city had the shortest streak (minimum length > 0) of consecutive daily records in July 2021, and how many days long was it? */\nWITH july AS (\n    SELECT C.id,\n           C.name,\n           S.date,\n           DATE(S.date) - INTERVAL ROW_NUMBER() OVER (PARTITION BY C.id ORDER BY S.date) DAY AS grp_key\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.country_code_2 = 'cn'\n      AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\n)\nSELECT name,\n       COUNT(*) AS streak_len\nFROM july\nGROUP BY id, name, grp_key\nHAVING streak_len > 0\nORDER BY streak_len ASC\nLIMIT 1;\n\n/* Answer the following: For Shanghai, what is the longest gap in days between two successive records in 2021? */\nWITH sh AS (\n    SELECT S.date,\n           LAG(S.date) OVER (ORDER BY S.date) AS prev_date\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.name = 'Shanghai'\n      AND S.date BETWEEN '2021-01-01' AND '2021-12-31'\n)\nSELECT MAX(DATEDIFF(date, prev_date)) AS max_gap_days\nFROM sh\nWHERE prev_date IS NOT NULL;\n\n/* Answer the following: List all dates in July 2021 on which both Beijing and Shanghai recorded data. */\nWITH bj AS (\n    SELECT date\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.name = 'Beijing'\n      AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\n),\nsh AS (\n    SELECT date\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.name = 'Shanghai'\n      AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\n)\nSELECT bj.date\nFROM bj\nJOIN sh ON sh.date = bj.date\nORDER BY bj.date;\n\n/* Answer the following: How many Chinese cities have a complete set of 31 daily records for July 2021 (no missing days)? */\nWITH july_counts AS (\n    SELECT C.id,\n           COUNT(*) AS day_cnt\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.country_code_2 = 'cn'\n      AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\n    GROUP BY C.id\n)\nSELECT COUNT(*) AS cities_with_full_month\nFROM july_counts\nWHERE day_cnt = 31;\n\n/* Answer the following: For every Chinese city, give the earliest and latest date for which any record exists during 2021. */\nSELECT C.name,\n       MIN(S.date) AS first_day_2021,\n       MAX(S.date) AS last_day_2021\nFROM cities           AS C\nJOIN city_daily_stats AS S ON S.city_id = C.id\nWHERE C.country_code_2 = 'cn'\n  AND S.date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY C.name\n\n/* Answer the following: Please examine our database records for Chinese cities (country_code_2 = 'cn') during July 2021 and identify both the shortest and longest streaks of consecutive date entries. For each date in these streaks, return exactly one record per date along with the corresponding city name. In your output, please ensure the first letter of each city name is capitalized and the rest are lowercase. Display the dates and city names for both the shortest and longest consecutive date streaks, ordered by date.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "evidence": "",
            "raw_question": "For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many cities were inserted in total during June 2022?  June 2022 refers to inserted_date BETWEEN '2022-06-01' AND '2022-06-30'. */\nSELECT COUNT(*) \nFROM cities \nWHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30';\n\n/* Answer the following: Which country had the highest number of city insertions in June 2022?  Return its 2-letter country code. */\nSELECT country_code\nFROM cities\nWHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\nGROUP BY country_code\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the five countries that recorded at least 10 city insertions on any single day during June 2022.  Return distinct country codes only. */\nSELECT DISTINCT country_code\nFROM (\n    SELECT country_code,\n           inserted_date,\n           COUNT(*) AS daily_cnt\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n    GROUP BY country_code, inserted_date\n    HAVING COUNT(*) >= 10\n) AS t\nLIMIT 5;\n\n/* Answer the following: Which country had the longest streak of consecutive days with at least one city insertion during the whole of 2022?  Give the 2-letter country code. */\nWITH d AS (                                   -- one row per country-day that had at least one insertion\n    SELECT DISTINCT country_code, inserted_date\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-01-01' AND '2022-12-31'\n), rn AS (                                    -- assign a running number per country ordered by day\n    SELECT country_code,\n           inserted_date,\n           ROW_NUMBER() OVER (PARTITION BY country_code ORDER BY inserted_date) AS r\n    FROM d\n), grp AS (                                   -- equal (date \u2013 row_number) \u21d2 part of same consecutive run\n    SELECT country_code,\n           DATE_SUB(inserted_date, INTERVAL r DAY) AS grp_key\n    FROM rn\n), streaks AS (\n    SELECT country_code,\n           grp_key,\n           COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY country_code, grp_key\n)\nSELECT country_code\nFROM streaks\nORDER BY streak_len DESC\nLIMIT 1;\n\n/* Answer the following: During June 2022, what was the length of the longest consecutive-day insertion streak for each country?  Return country_code and streak_len. */\nWITH d AS (\n    SELECT DISTINCT country_code, inserted_date\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n), rn AS (\n    SELECT country_code,\n           inserted_date,\n           ROW_NUMBER() OVER (PARTITION BY country_code ORDER BY inserted_date) AS r\n    FROM d\n), grp AS (\n    SELECT country_code,\n           DATE_SUB(inserted_date, INTERVAL r DAY) AS grp_key\n    FROM rn\n), streaks AS (\n    SELECT country_code, grp_key, COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY country_code, grp_key\n)\nSELECT country_code, MAX(streak_len) AS streak_len\nFROM streaks\nGROUP BY country_code;\n\n/* Answer the following: For Germany (country_code = 'DE'), what was the average number of cities inserted per day during June 2022? */\nSELECT AVG(daily_cnt)\nFROM (\n    SELECT inserted_date, COUNT(*) AS daily_cnt\n    FROM cities\n    WHERE country_code = 'DE'\n      AND inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n    GROUP BY inserted_date\n) AS x;\n\n/* Answer the following: What is the earliest city-insertion date for every country in 2022?  Return country_code and first_insert_date. */\nSELECT country_code,\n       MIN(inserted_date) AS first_insert_date\nFROM cities\nWHERE inserted_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY country_code;\n\n/* Answer the following: How many distinct countries inserted at least one city during the first quarter of 2022 (1 Jan - 31 Mar)? */\nSELECT COUNT(DISTINCT country_code)\nFROM cities\nWHERE inserted_date BETWEEN '2022-01-01' AND '2022-03-31';\n\n/* Answer the following: On which day in 2022 were the most cities inserted, and how many were they?  Return the date and the count. */\nSELECT inserted_date,\n       COUNT(*) AS num_inserted\nFROM cities\nWHERE inserted_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY inserted_date\nORDER BY num_inserted DESC\nLIMIT 1;\n\n/* Answer the following: Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "evidence": "",
            "raw_question": "Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which country recorded data insertions on every single day of February 2022? */\nSELECT c.country_name\nFROM countries AS c\nJOIN insertions AS i\n  ON i.country_id = c.id\nWHERE i.inserted_at BETWEEN DATE '2022-02-01' AND DATE '2022-02-28'\nGROUP BY c.id, c.country_name\nHAVING COUNT(DISTINCT i.inserted_at) = 28;\n\n/* Answer the following: What is the total number of insertions that happened on weekends (Saturday or Sunday) during March 2021? */\nSELECT COUNT(*) \nFROM insertions\nWHERE inserted_at BETWEEN DATE '2021-03-01' AND DATE '2021-03-31'\n  AND EXTRACT(ISODOW FROM inserted_at) IN (6,7);\n\n/* Answer the following: List the three cities with the highest number of insertions made exactly at midnight (00:00:00) throughout 2021. */\nSELECT ci.city_name\nFROM insertions AS i\nJOIN cities AS ci\n  ON i.city_id = ci.id\nWHERE i.inserted_at BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n  AND CAST(i.inserted_at AS TIME) = TIME '00:00:00'\nGROUP BY ci.id, ci.city_name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For each country, give the longest streak of consecutive days with at least one insertion during 2020. */\nWITH ranked AS (\n    SELECT country_id,\n           inserted_at::date AS d,\n           ROW_NUMBER() OVER (PARTITION BY country_id ORDER BY inserted_at::date) -\n           ROW_NUMBER() OVER (PARTITION BY country_id, inserted_at::date ORDER BY inserted_at::date) AS grp\n    FROM insertions\n    WHERE inserted_at BETWEEN DATE '2020-01-01' AND DATE '2020-12-31'\n    GROUP BY country_id, inserted_at::date\n), streaks AS (\n    SELECT country_id, COUNT(*) AS len\n    FROM ranked\n    GROUP BY country_id, grp\n)\nSELECT c.country_name, MAX(len) AS longest_streak\nFROM streaks\nJOIN countries AS c\n  ON c.id = streaks.country_id\nGROUP BY c.id, c.country_name;\n\n/* Answer the following: Which capital city contributed more than half of its country's total insertions in April 2022? */\nSELECT c.country_name, cap.city_name AS capital_city\nFROM countries AS c\nJOIN cities AS cap\n  ON cap.id = c.capital_city_id\nJOIN insertions AS i_all\n  ON i_all.country_id = c.id\nLEFT JOIN insertions AS i_cap\n  ON i_cap.city_id = cap.id\n     AND i_cap.inserted_at BETWEEN DATE '2022-04-01' AND DATE '2022-04-30'\nWHERE i_all.inserted_at BETWEEN DATE '2022-04-01' AND DATE '2022-04-30'\nGROUP BY c.id, c.country_name, cap.city_name\nHAVING COUNT(i_cap.id) * 2 > COUNT(i_all.id);\n\n/* Answer the following: Find the day in 2021 with the highest number of countries having at least one data insertion. */\nSELECT inserted_at::date AS day,\n       COUNT(DISTINCT country_id) AS countries_with_data\nFROM insertions\nWHERE inserted_at BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\nGROUP BY day\nORDER BY countries_with_data DESC\nLIMIT 1;\n\n/* Answer the following: For Japan, what proportion of January 2022 insertions came from cities other than its capital? */\nWITH jan_data AS (\n    SELECT * \n    FROM insertions\n    WHERE country_id = (SELECT id FROM countries WHERE country_name = 'Japan')\n      AND inserted_at BETWEEN DATE '2022-01-01' AND DATE '2022-01-31'\n), totals AS (\n    SELECT COUNT(*) AS total_cnt FROM jan_data\n), non_capital AS (\n    SELECT COUNT(*) AS non_cap_cnt\n    FROM jan_data\n    WHERE city_id <> (SELECT capital_city_id FROM countries WHERE country_name = 'Japan')\n)\nSELECT (non_cap_cnt * 1.0) / total_cnt AS proportion_non_capital\nFROM totals, non_capital;\n\n/* Answer the following: Give the name of the city that had the most \u201cfirst-day-of-month\u201d insertions across the entire year 2022. */\nSELECT ci.city_name\nFROM insertions AS i\nJOIN cities AS ci\n  ON ci.id = i.city_id\nWHERE i.inserted_at::date IN (\n      DATE '2022-01-01', DATE '2022-02-01', DATE '2022-03-01', DATE '2022-04-01',\n      DATE '2022-05-01', DATE '2022-06-01', DATE '2022-07-01', DATE '2022-08-01',\n      DATE '2022-09-01', DATE '2022-10-01', DATE '2022-11-01', DATE '2022-12-01'\n)\nGROUP BY ci.id, ci.city_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which country saw insertions on exactly nine different days in January 2022, and within its longest consecutive insertion run that month, what fraction of those insertions originated from its capital city? */\nWITH jan22 AS (\n    SELECT country_id,\n           city_id,\n           inserted_at::date AS d\n    FROM insertions\n    WHERE inserted_at BETWEEN DATE '2022-01-01' AND DATE '2022-01-31'\n),\nnine_day_country AS (\n    SELECT country_id\n    FROM jan22\n    GROUP BY country_id\n    HAVING COUNT(DISTINCT d) = 9\n),\nranked AS (\n    SELECT j.country_id,\n           j.city_id,\n           j.d,\n           ROW_NUMBER() OVER (PARTITION BY j.country_id ORDER BY j.d) -\n           ROW_NUMBER() OVER (PARTITION BY j.country_id, j.d ORDER BY j.d) AS grp\n    FROM jan22 AS j\n    JOIN nine_day_country AS n\n      ON n.country_id = j.country_id\n    GROUP BY j.country_id, j.city_id, j.d\n),\nstreaks AS (\n    SELECT country_id,\n           grp,\n           MIN(d) AS start_day,\n           MAX(d) AS end_day,\n           COUNT(*) AS streak_len\n    FROM ranked\n    GROUP BY country_id, grp\n),\nlongest AS (\n    SELECT s.*\n    FROM streaks AS s\n    JOIN (\n        SELECT country_id, MAX(streak_len) AS mx\n        FROM streaks\n        GROUP BY country_id\n    ) AS m\n      ON m.country_id = s.country_id\n     AND m.mx = s.streak_len\n),\ncapital_cnt AS (\n    SELECT COUNT(*) AS cap_ins\n    FROM ranked AS r\n    JOIN longest AS l\n      ON l.country_id = r.country_id\n     AND l.grp = r.grp\n    JOIN countries AS c\n      ON c.id = r.country_id\n    WHERE r.city_id = c.capital_city_id\n),\ntotal_cnt AS (\n    SELECT COUNT(*) AS total_ins\n    FROM ranked AS r\n    JOIN longest AS l\n      ON l.country_id = r.country_id\n     AND l.grp = r.grp\n)\nSELECT c.country_name,\n       l.start_day,\n       l.end_day,\n       ROUND(cap_ins * 1.0 / total_ins, 4) AS capital_fraction\nFROM longest AS l\nJOIN countries AS c\n  ON c.id = l.country_id,\ncapital_cnt,\ntotal_cnt;\n\n/* Answer the following: Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "evidence": "",
            "raw_question": "Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: List every order-row that contains a \u2018Meatlovers\u2019 pizza together with the number of toppings the customer asked to leave off.  Return row_id, order_id, customer_id and excluded_cnt ordered by order_id. */\nSELECT  op.row_id ,\n        op.order_id ,\n        o.customer_id ,\n        COUNT(ex.topping_id) AS excluded_cnt\nFROM    order_pizzas        AS op\nJOIN    orders              AS o   ON o.id      = op.order_id\nJOIN    pizzas              AS p   ON p.id      = op.pizza_id\nJOIN    order_exclusions    AS ex  ON ex.row_id = op.row_id\nWHERE   p.name = 'Meatlovers'\nGROUP BY op.row_id ,\n         op.order_id ,\n         o.customer_id\nORDER BY op.order_id ;\n\n/* Answer the following: What are the three most frequently added extra toppings?  Show topping name and how many times it was added, in descending order, limited to 3 rows. */\nSELECT  t.name ,\n        COUNT(*) AS extra_cnt\nFROM    order_extras  AS e\nJOIN    toppings      AS t ON t.id = e.topping_id\nGROUP BY t.name\nORDER BY extra_cnt DESC\nLIMIT 3 ;\n\n/* Answer the following: For each type of pizza, how many distinct standard toppings appear in its recipe?  Give pizza name and topping_cnt ordered from most to fewest toppings. */\nSELECT  p.name ,\n        COUNT(*) AS topping_cnt\nFROM    pizzas         AS p\nJOIN    pizza_recipes  AS pr ON pr.pizza_id = p.id\nGROUP BY p.name\nORDER BY topping_cnt DESC ;\n\n/* Answer the following: Which customers have never ordered a pizza with any extra toppings?  Return the customer_id list. */\nSELECT DISTINCT o.customer_id\nFROM   orders AS o\nWHERE  NOT EXISTS (      /* no extras for any row of that customer\u2019s orders               */\n        SELECT 1\n        FROM   order_pizzas op\n        JOIN   order_extras ex ON ex.row_id = op.row_id\n        WHERE  op.order_id = o.id\n      );\n\n/* Answer the following: Show every pizza type that normally includes \u201cAnchovies\u201d but was at least once ordered with Anchovies removed.  Return pizza name and how many times Anchovies were excluded. */\nSELECT  p.name ,\n        COUNT(*) AS times_excluded\nFROM    pizzas          AS p\nJOIN    pizza_recipes   AS pr ON pr.pizza_id  = p.id\nJOIN    toppings        AS tp ON tp.id        = pr.topping_id\nJOIN    order_pizzas    AS op ON op.pizza_id  = p.id\nJOIN    order_exclusions AS ex ON ex.row_id   = op.row_id\nWHERE   tp.name         = 'Anchovies'\n  AND   ex.topping_id   = tp.id\nGROUP BY p.name ;\n\n/* Answer the following: For every calendar day, how many pizzas were ordered between 18:00 and 23:00?  Return order_date and evening_pizza_cnt ordered by date. */\nSELECT  DATE(o.order_time)                     AS order_date ,\n        COUNT(*)                               AS evening_pizza_cnt\nFROM    orders        AS o\nJOIN    order_pizzas  AS op ON op.order_id = o.id\nWHERE   EXTRACT(HOUR FROM o.order_time) BETWEEN 18 AND 23\nGROUP BY DATE(o.order_time)\nORDER BY order_date ;\n\n/* Answer the following: Give the row_id, order_id and the list of extra toppings (alphabetical, comma-separated) for pizzas that have exactly two extras. */\nSELECT  op.row_id ,\n        op.order_id ,\n        GROUP_CONCAT(t.name ORDER BY t.name SEPARATOR ', ') AS extra_toppings\nFROM    order_pizzas  AS op\nJOIN    order_extras  AS ex ON ex.row_id = op.row_id\nJOIN    toppings      AS t  ON t.id      = ex.topping_id\nGROUP BY op.row_id ,\n         op.order_id\nHAVING  COUNT(*) = 2 ;\n\n/* Answer the following: Which topping appears both as a standard ingredient on the \u201cVegetarian\u201d pizza AND as an extra on at least 50 different order rows?  Return the topping name. */\nSELECT  t.name\nFROM    toppings       AS t\nJOIN    pizza_recipes  AS pr ON pr.topping_id = t.id\nJOIN    pizzas         AS p  ON p.id          = pr.pizza_id\nWHERE   p.name = 'Vegetarian'\n  AND   t.id IN (\n        SELECT  ex.topping_id\n        FROM    order_extras ex\n        GROUP BY ex.topping_id\n        HAVING  COUNT(DISTINCT ex.row_id) >= 50\n      );\n\n/* Answer the following: For each order row, assign pizza_id = 1 when the pizza is \u201cMeatlovers\u201d and 2 for all others, and list the row_id with that derived pizza_id, ordered by row_id. */\nSELECT  op.row_id ,\n        CASE WHEN p.name = 'Meatlovers' THEN 1 ELSE 2 END AS pizza_id\nFROM    order_pizzas AS op\nJOIN    pizzas       AS p ON p.id = op.pizza_id\nORDER BY op.row_id ;\n\n/* Answer the following: For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "evidence": "",
            "raw_question": "Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Give the closing balance at the end of every month in 2022 for every account. */\nSELECT\n    A.account_id,\n    DATE_TRUNC('month', M.month_end)::date   AS month_end,\n    SUM(T.amount) OVER (\n        PARTITION BY A.account_id\n        ORDER BY M.month_end\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n    )                                         AS closing_balance\nFROM\n    accounts            AS A\nCROSS JOIN (\n        /* create a list of month-end dates for 2022 */\n        SELECT\n            DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2022-01-01'::date,\n                             '2022-12-01'::date,\n                             INTERVAL '1 month') AS g(d)\n)                       AS M\nLEFT JOIN\n    transactions        AS T\n        ON  T.account_id   = A.account_id\n        AND T.trans_date  <= M.month_end\nGROUP BY\n    A.account_id,\n    M.month_end\nORDER BY\n    A.account_id,\n    M.month_end;\n\n\n/* Answer the following: For customer 'C001', show the month-over-month change in balance for 2021. */\nWITH month_close AS (\n    SELECT\n        DATE_TRUNC('month', g.d)::date + INTERVAL '1 month - 1 day' AS month_end,\n        SUM(t.amount) OVER (ORDER BY DATE_TRUNC('month', g.d))      AS closing_balance\n    FROM generate_series('2021-01-01'::date,\n                         '2021-12-01'::date,\n                         INTERVAL '1 month') AS g(d)\n    LEFT JOIN accounts  AS a  ON a.customer_id = 'C001'\n    LEFT JOIN transactions AS t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= g.d + INTERVAL '1 month - 1 day'\n    GROUP BY g.d\n)\nSELECT\n    month_end,\n    closing_balance,\n    closing_balance - LAG(closing_balance) OVER (ORDER BY month_end) AS month_change\nFROM month_close\nORDER BY month_end;\n\n\n/* Answer the following: List each customer\u2019s cumulative balance at each month-end in the first half of 2020, including customers with no activity. */\nWITH months AS (\n    SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n    FROM generate_series('2020-01-01'::date,'2020-06-01'::date,INTERVAL '1 month') AS g(d)\n)\nSELECT\n    c.customer_id,\n    m.month_end,\n    COALESCE( SUM(t.amount)\n              OVER (PARTITION BY c.customer_id ORDER BY m.month_end\n                    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS cumulative_balance\nFROM customers      AS c\nCROSS JOIN months   AS m\nLEFT  JOIN accounts AS a ON a.customer_id = c.customer_id\nLEFT  JOIN transactions t\n       ON t.account_id = a.account_id\n      AND t.trans_date <= m.month_end\nGROUP BY c.customer_id, m.month_end\nORDER BY c.customer_id, m.month_end;\n\n\n/* Answer the following: What was the highest customer closing balance on any month-end during 2021? */\nWITH balances AS (\n    SELECT\n        c.customer_id,\n        m.month_end,\n        SUM(t.amount) OVER (PARTITION BY c.customer_id\n                            ORDER BY m.month_end\n                            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS closing_balance\n    FROM customers  c\n    CROSS JOIN (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2021-01-01','2021-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON a.customer_id = c.customer_id\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY c.customer_id, m.month_end\n)\nSELECT MAX(closing_balance) FROM balances;\n\n\n/* Answer the following: Return the customers whose balance decreased for at least 3 consecutive months in 2022. */\nWITH month_close AS (\n    SELECT\n        c.customer_id,\n        m.month_end,\n        SUM(t.amount) OVER (PARTITION BY c.customer_id\n                            ORDER BY m.month_end\n                            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS bal\n    FROM customers c\n    CROSS JOIN (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2022-01-01','2022-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON a.customer_id = c.customer_id\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY c.customer_id, m.month_end\n), flagged AS (\n    SELECT\n        customer_id,\n        month_end,\n        bal,\n        LAG(bal)  OVER (PARTITION BY customer_id ORDER BY month_end) AS prev1,\n        LAG(bal,2) OVER (PARTITION BY customer_id ORDER BY month_end) AS prev2\n    FROM month_close\n)\nSELECT DISTINCT customer_id\nFROM flagged\nWHERE bal  < prev1\n  AND prev1 < prev2;\n\n\n/* Answer the following: Show the net change in total bank balances for all customers for each month in 2023. */\nWITH totals AS (\n    SELECT\n        m.month_end,\n        SUM(t.amount) OVER (ORDER BY m.month_end) AS total_close\n    FROM (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2023-01-01','2023-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON TRUE\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY m.month_end\n)\nSELECT\n    month_end,\n    total_close - LAG(total_close) OVER (ORDER BY month_end) AS net_change\nFROM totals\nORDER BY month_end;\n\n\n/* Answer the following: For each customer, return the first month in 2021 when their balance became negative. */\nWITH month_bal AS (\n    SELECT\n        c.customer_id,\n        m.month_end,\n        SUM(t.amount) OVER (PARTITION BY c.customer_id ORDER BY m.month_end) AS bal\n    FROM customers c\n    CROSS JOIN (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2021-01-01','2021-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a ON a.customer_id = c.customer_id\n    LEFT JOIN transactions t\n         ON t.account_id = a.account_id\n        AND t.trans_date <= m.month_end\n    GROUP BY c.customer_id, m.month_end\n)\nSELECT DISTINCT ON (customer_id)\n       customer_id,\n       month_end AS first_negative_month\nFROM month_bal\nWHERE bal < 0\nORDER BY customer_id, month_end;\n\n\n/* Answer the following: Compute the running balance for account 101 as of every transaction date. */\nSELECT\n    trans_date,\n    amount,\n    SUM(amount) OVER (ORDER BY trans_date\n                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_balance\nFROM transactions\nWHERE account_id = 101\nORDER BY trans_date;\n\n\n/* Answer the following: List the month-end balance and last transaction date before each month-end for customer 'C002' for Q3-2022 (July-Sept). */\nWITH mends AS (\n    SELECT DATE '2022-07-31' AS month_end\n    UNION ALL SELECT DATE '2022-08-31'\n    UNION ALL SELECT DATE '2022-09-30'\n), data AS (\n    SELECT\n        m.month_end,\n        SUM(t.amount) OVER (ORDER BY m.month_end) AS closing_balance,\n        (SELECT MAX(trans_date)\n         FROM transactions       t2\n         JOIN accounts           a2 ON a2.account_id = t2.account_id\n         WHERE a2.customer_id = 'C002'\n           AND t2.trans_date <= m.month_end)        AS last_tx_before_close\n    FROM mends m\n    LEFT JOIN accounts      a ON a.customer_id = 'C002'\n    LEFT JOIN transactions  t ON t.account_id = a.account_id\n                              AND t.trans_date <= m.month_end\n    GROUP BY m.month_end\n)\nSELECT * FROM data ORDER BY month_end;\n\n/* Answer the following: Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "evidence": "",
            "raw_question": "For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which products have been viewed more than 500 times in the last 30 days, ignoring activity that happened on pages 1, 2, 12 and 13? */\nSELECT\n        P.prod_name,\n        COUNT(*)  AS view_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_type = 'view'\n  AND   E.event_time >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)\n  AND   E.page_id NOT IN (1,2,12,13)\nGROUP BY P.prod_id\nHAVING  view_cnt > 500;\n\n/* Answer the following: Give the number of distinct users who added each product to their cart during 2023 while never actually purchasing it, excluding page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        COUNT(DISTINCT E.user_id) AS abandon_user_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_type = 'add_to_cart'\n  AND   YEAR(E.event_time) = 2023\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   NOT EXISTS (      /* same user bought the same product any time in 2023 */\n          SELECT 1\n          FROM   product_events AS X\n          WHERE  X.user_id    = E.user_id\n            AND  X.product_id = E.product_id\n            AND  X.event_type = 'purchase'\n            AND  YEAR(X.event_time) = 2023)\nGROUP BY P.prod_id;\n\n/* Answer the following: List the top 10 products that have the highest cart-abandonment rate (adds to cart without purchase) in the past 90 days, again skipping page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        SUM(CASE WHEN E.event_type = 'add_to_cart' THEN 1 END) AS cart_adds,\n        SUM(CASE WHEN E.event_type = 'purchase'     THEN 1 END) AS buys,\n        (SUM(CASE WHEN E.event_type = 'add_to_cart' THEN 1 END) -\n         SUM(CASE WHEN E.event_type = 'purchase'     THEN 1 END)) AS abandoned\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_time >= DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY)\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('add_to_cart','purchase')\nGROUP BY P.prod_id\nHAVING  cart_adds > 0\nORDER BY abandoned DESC\nLIMIT 10;\n\n/* Answer the following: For every user, how many different products did they buy in 2022 without ever viewing them first?  Ignore pages 1, 2, 12 and 13 when looking for views. */\nSELECT\n        E.user_id,\n        COUNT(DISTINCT E.product_id) AS blind_buy_cnt\nFROM    product_events AS E\nWHERE   E.event_type = 'purchase'\n  AND   YEAR(E.event_time) = 2022\n  AND   NOT EXISTS (\n          SELECT 1\n          FROM   product_events AS V\n          WHERE  V.user_id    = E.user_id\n            AND  V.product_id = E.product_id\n            AND  V.event_type = 'view'\n            AND  V.page_id   NOT IN (1,2,12,13)\n            AND  V.event_time <  E.event_time )\nGROUP BY E.user_id;\n\n/* Answer the following: Which products have at least 1,000 views but fewer than 10 purchases during the first quarter of 2024, excluding page ids 1, 2, 12, 13? */\nSELECT\n        P.prod_name,\n        SUM(CASE WHEN E.event_type = 'view'     THEN 1 END) AS view_cnt,\n        SUM(CASE WHEN E.event_type = 'purchase' THEN 1 END) AS buy_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_time BETWEEN '2024-01-01' AND '2024-03-31'\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('view','purchase')\nGROUP BY P.prod_id\nHAVING  view_cnt >= 1000\n   AND  buy_cnt  < 10;\n\n/* Answer the following: Compute the average number of hours between a product\u2019s first view and its first purchase, considering events in 2023 and ignoring page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        AVG(TIMESTAMPDIFF(HOUR,\n              MIN(CASE WHEN E.event_type = 'view'     THEN E.event_time END),\n              MIN(CASE WHEN E.event_type = 'purchase' THEN E.event_time END))) AS avg_hours_to_buy\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   YEAR(E.event_time) = 2023\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('view','purchase')\nGROUP BY P.prod_id\nHAVING  MIN(CASE WHEN E.event_type = 'purchase' THEN E.event_time END) IS NOT NULL;\n\n/* Answer the following: Provide the views-to-purchases ratio for every product for the last 12 months, filtering out page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        SUM(CASE WHEN E.event_type = 'view'     THEN 1 END) AS views,\n        SUM(CASE WHEN E.event_type = 'purchase' THEN 1 END) AS buys,\n        ROUND( SUM(CASE WHEN E.event_type = 'view'     THEN 1 END) /\n               NULLIF(SUM(CASE WHEN E.event_type = 'purchase' THEN 1 END),0), 2) AS view_buy_ratio\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_time >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH)\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('view','purchase')\nGROUP BY P.prod_id;\n\n/* Answer the following: For each product, how many unique users viewed it but never added it to their cart during April 2024? Skip page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        COUNT(DISTINCT E.user_id) AS passive_viewers\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_type = 'view'\n  AND   E.event_time BETWEEN '2024-04-01' AND '2024-04-30'\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   NOT EXISTS (\n          SELECT 1\n          FROM   product_events AS C\n          WHERE  C.user_id    = E.user_id\n            AND  C.product_id = E.product_id\n            AND  C.event_type = 'add_to_cart'\n            AND  C.event_time BETWEEN '2024-04-01' AND '2024-04-30')\nGROUP BY P.prod_id;\n\n/* Answer the following: Show, for each product, how many times it was added to a cart from a mobile device and then purchased within 24 hours, ignoring activity on pages 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        COUNT(*) AS fast_mobile_conversions\nFROM    product_events AS A          /* add_to_cart row (mobile) */\nJOIN    product_events AS B          /* matching purchase row */\n        ON  B.user_id    = A.user_id\n        AND B.product_id = A.product_id\n        AND B.event_type = 'purchase'\n        AND B.event_time BETWEEN A.event_time AND A.event_time + INTERVAL 24 HOUR\nJOIN    products       AS P ON P.prod_id = A.product_id\nWHERE   A.event_type  = 'add_to_cart'\n  AND   A.device_type = 'mobile'\n  AND   A.page_id NOT IN (1,2,12,13)\nGROUP BY P.prod_id;\n\n/* Answer the following: Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "evidence": "",
            "raw_question": "For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Between January 2018 and December 2018, which interest recorded the highest average composition-to-index ratio, and what was that ratio?  */\nSELECT interest ,\n       AVG(composition / NULLIF(index_value, 0)) AS avg_comp_ratio\nFROM   interest_monthly\nWHERE  date BETWEEN '2018-01-01' AND '2018-12-31'\nGROUP  BY interest\nORDER  BY avg_comp_ratio DESC\nLIMIT  1;\n\n/* Answer the following: For every month in 2019, list the interest whose composition-to-index ratio ranked in the bottom 3 and give its ratio.  */\nSELECT month_start,\n       interest,\n       comp_ratio\nFROM  (\n        SELECT DATE_TRUNC('month', date) AS month_start,\n               interest,\n               AVG(composition / NULLIF(index_value,0)) AS comp_ratio,\n               DENSE_RANK() OVER (PARTITION BY DATE_TRUNC('month',date)\n                                  ORDER BY AVG(composition / NULLIF(index_value,0))) AS rnk\n        FROM   interest_monthly\n        WHERE  date BETWEEN '2019-01-01' AND '2019-12-31'\n        GROUP  BY month_start, interest\n      ) AS ranked\nWHERE  rnk <= 3\nORDER BY month_start, rnk;\n\n/* Answer the following: What were the three interests that contributed the largest share of total composition (composition / index_value) during Q2-2019 (April\u2013June 2019)?  */\nSELECT interest,\n       SUM(composition / NULLIF(index_value,0))  AS total_share\nFROM   interest_monthly\nWHERE  date BETWEEN '2019-04-01' AND '2019-06-30'\nGROUP  BY interest\nORDER  BY total_share DESC\nLIMIT  3;\n\n/* Answer the following: Show the month-by-month change in the maximum composition-to-index ratio from September 2018 to August 2019 (current month max minus previous month max).  */\nWITH monthly_max AS (\n    SELECT DATE_TRUNC('month', date)                   AS mth,\n           MAX(composition / NULLIF(index_value,0))    AS max_ratio\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2018-09-01' AND '2019-08-31'\n    GROUP  BY mth\n)\nSELECT mth,\n       max_ratio,\n       max_ratio - LAG(max_ratio) OVER (ORDER BY mth)  AS month_over_month_change\nFROM   monthly_max\nORDER  BY mth;\n\n/* Answer the following: In July 2019, what was the cumulative (year-to-date) average composition-to-index ratio for each interest?  */\nSELECT interest,\n       AVG(composition / NULLIF(index_value,0)) AS ytd_avg_ratio\nFROM   interest_monthly\nWHERE  date BETWEEN '2019-01-01' AND '2019-07-31'\nGROUP  BY interest\nORDER  BY ytd_avg_ratio DESC;\n\n/* Answer the following: List the top interest each month from January 2017 to December 2019 by composition-to-index ratio together with the previous month\u2019s top interest.  */\nWITH month_rank AS (\n    SELECT DATE_TRUNC('month', date)                     AS mth,\n           interest,\n           AVG(composition / NULLIF(index_value,0))      AS comp_ratio,\n           ROW_NUMBER() OVER (PARTITION BY DATE_TRUNC('month', date)\n                              ORDER BY AVG(composition / NULLIF(index_value,0)) DESC) AS rn\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2017-01-01' AND '2019-12-31'\n    GROUP  BY mth, interest\n)\nSELECT m1.mth,\n       m1.interest          AS top_interest,\n       m1.comp_ratio        AS top_ratio,\n       LAG(m1.interest) OVER (ORDER BY m1.mth)       AS prev_top_interest,\n       LAG(m1.comp_ratio) OVER (ORDER BY m1.mth)     AS prev_top_ratio\nFROM   month_rank AS m1\nWHERE  rn = 1\nORDER  BY m1.mth;\n\n/* Answer the following: Which interest had the most consistent composition-to-index ratio (smallest standard deviation) between September 2018 and August 2019?  */\nSELECT interest,\n       STDDEV_POP(composition / NULLIF(index_value,0)) AS sd_ratio\nFROM   interest_monthly\nWHERE  date BETWEEN '2018-09-01' AND '2019-08-31'\nGROUP  BY interest\nORDER  BY sd_ratio\nLIMIT  1;\n\n/* Answer the following: What is the three-month rolling average of the maximum monthly composition-to-index ratio from September 2018 to August 2019?  */\nWITH monthly_max AS (\n    SELECT DATE_TRUNC('month', date)                 AS mth,\n           MAX(composition / NULLIF(index_value,0))  AS max_ratio\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2018-09-01' AND '2019-08-31'\n    GROUP  BY mth\n)\nSELECT mth,\n       max_ratio,\n       AVG(max_ratio) OVER (ORDER BY mth ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_month_avg\nFROM   monthly_max\nORDER  BY mth;\n\n/* Answer the following: For each interest, compute the highest single-month composition-to-index ratio in 2018 and tell how many months elapsed between that peak month and December 2018.  */\nWITH peak AS (\n    SELECT interest,\n           DATE_TRUNC('month', date)                     AS peak_mth,\n           MAX(composition / NULLIF(index_value,0))      AS peak_ratio\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2018-01-01' AND '2018-12-31'\n    GROUP  BY interest, peak_mth\n)\nSELECT interest,\n       peak_ratio,\n       peak_mth,\n       EXTRACT(MONTH FROM AGE('2018-12-01', peak_mth))  AS months_until_dec2018\nFROM   peak\nORDER  BY interest;\n\n/* Answer the following: Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "evidence": "",
            "raw_question": "For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the maximum composition value ever recorded, and which interest category and month does it correspond to? */\nSELECT time, interest_name, composition_value\nFROM interest_composition\nORDER BY composition_value DESC\nLIMIT 1;\n\n/* Answer the following: In which month did the overall average composition value across all interest categories reach its peak, and what was that average value? */\nSELECT time, AVG(composition_value) AS avg_comp\nFROM interest_composition\nGROUP BY time\nORDER BY avg_comp DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 interest categories with the highest average composition value for the entire period. */\nSELECT interest_name, AVG(composition_value) AS avg_comp\nFROM interest_composition\nGROUP BY interest_name\nORDER BY avg_comp DESC\nLIMIT 5;\n\n/* Answer the following: How many distinct interest categories are tracked in the data set? */\nSELECT COUNT(DISTINCT interest_name)\nFROM interest_composition;\n\n/* Answer the following: Identify the interest categories that never fell below a composition value of 20 in any month. */\nSELECT interest_name\nFROM interest_composition\nGROUP BY interest_name\nHAVING MIN(composition_value) >= 20;\n\n/* Answer the following: For each interest category, show the month when its composition value was the highest together with that value. */\nSELECT ic1.time, ic1.interest_name, ic1.composition_value\nFROM interest_composition AS ic1\nJOIN (\n    SELECT interest_name, MAX(composition_value) AS max_val\n    FROM interest_composition\n    GROUP BY interest_name\n) AS ic2\nON ic1.interest_name = ic2.interest_name\nAND ic1.composition_value = ic2.max_val;\n\n/* Answer the following: Give the bottom 3 interest categories based on their minimum composition value observed across all months. */\nSELECT interest_name, MIN(composition_value) AS min_val\nFROM interest_composition\nGROUP BY interest_name\nORDER BY min_val ASC\nLIMIT 3;\n\n/* Answer the following: Which month has the highest total composition value summed over all interest categories, and what is that total? */\nSELECT time, SUM(composition_value) AS total_comp\nFROM interest_composition\nGROUP BY time\nORDER BY total_comp DESC\nLIMIT 1;\n\n/* Answer the following: List the interest categories whose composition value in 01-2023 increased by 10 points or more compared with 12-2022.  */\nSELECT dec.interest_name,\n       dec.composition_value AS Dec_2022_value,\n       jan.composition_value AS Jan_2023_value\nFROM interest_composition AS dec\nJOIN interest_composition AS jan\n  ON dec.interest_name = jan.interest_name\nWHERE dec.time = '12-2022'\n  AND jan.time = '01-2023'\n  AND jan.composition_value - dec.composition_value >= 10;\n\n/* Answer the following: Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Could you calculate each user\u2019s average balance over the past 30 days, computed daily? Then, for each month (based on the 1st of each month), find the highest of these daily averages for each user. Add up these maximum values across all users for each month as the final result. Please use the first month as a baseline for previous balances and exclude it from the output.",
            "evidence": "",
            "raw_question": "Could you calculate each user\u2019s average balance over the past 30 days, computed daily? Then, for each month (based on the 1st of each month), find the highest of these daily averages for each user. Add up these maximum values across all users for each month as the final result. Please use the first month as a baseline for previous balances and exclude it from the output.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer spent the most in 1997, ignoring all discounts? */\nSELECT TOP 1 C.CustomerID,\n             SUM(OD.UnitPrice * OD.Quantity) AS TotalSpent\nFROM Customers            AS C\nJOIN Orders               AS O  ON C.CustomerID = O.CustomerID\nJOIN [Order Details]      AS OD ON O.OrderID    = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1997\nGROUP BY C.CustomerID\nORDER BY TotalSpent DESC\n\n/* Answer the following: What is the total order value handled by each employee in the year 1998, excluding discounts? */\nSELECT E.EmployeeID,\n       SUM(OD.UnitPrice * OD.Quantity) AS TotalValue\nFROM Employees            AS E\nJOIN Orders               AS O  ON E.EmployeeID = O.EmployeeID\nJOIN [Order Details]      AS OD ON O.OrderID    = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY E.EmployeeID\n\n/* Answer the following: How many 1998 orders contained at least one line-item that received a discount? */\nSELECT COUNT(DISTINCT O.OrderID)\nFROM Orders          AS O\nJOIN [Order Details] AS OD ON O.OrderID = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\n  AND OD.Discount > 0\n\n/* Answer the following: What was the average unit price of products actually sold during 1998 (ignoring any list prices that never appeared on an order)? */\nSELECT AVG(OD.UnitPrice) AS AvgSoldPrice_1998\nFROM Orders          AS O\nJOIN [Order Details] AS OD ON O.OrderID = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\n\n/* Answer the following: Which product category generated the highest total revenue in 1998, where revenue = UnitPrice * Quantity and discounts are ignored? */\nSELECT TOP 1 CAT.CategoryName,\n             SUM(OD.UnitPrice * OD.Quantity) AS Revenue\nFROM Categories       AS CAT\nJOIN Products         AS P  ON CAT.CategoryID = P.CategoryID\nJOIN [Order Details]  AS OD ON P.ProductID    = OD.ProductID\nJOIN Orders           AS O  ON OD.OrderID     = O.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY CAT.CategoryName\nORDER BY Revenue DESC\n\n/* Answer the following: How many customers placed more than five separate orders during 1998? */\nSELECT COUNT(*) \nFROM (\n    SELECT C.CustomerID\n    FROM Customers AS C\n    JOIN Orders    AS O ON C.CustomerID = O.CustomerID\n    WHERE YEAR(O.OrderDate) = 1998\n    GROUP BY C.CustomerID\n    HAVING COUNT(*) > 5\n) AS Frequent1998\n\n/* Answer the following: What percentage of 1998 orders were shipped within seven days of the order date? */\nSELECT 100.0 * SUM(CASE WHEN DATEDIFF(DAY, O.OrderDate, O.ShippedDate) <= 7 THEN 1 END)\n                      / COUNT(*)             AS PctShippedWithin7Days\nFROM Orders AS O\nWHERE YEAR(O.OrderDate) = 1998\n\n/* Answer the following: List the top three countries ranked by total sales amount generated in 1998, ignoring discounts. */\nSELECT TOP 3 C.Country,\n            SUM(OD.UnitPrice * OD.Quantity) AS SalesAmount\nFROM Customers         AS C\nJOIN Orders            AS O  ON C.CustomerID = O.CustomerID\nJOIN [Order Details]   AS OD ON O.OrderID    = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY C.Country\nORDER BY SalesAmount DESC\n\n/* Answer the following: For every month of 1998, calculate the total revenue (UnitPrice * Quantity, no discounts) and show the month name together with its revenue. */\nSELECT DATENAME(MONTH, O.OrderDate) AS SalesMonth,\n       SUM(OD.UnitPrice * OD.Quantity) AS MonthlyRevenue\nFROM Orders          AS O\nJOIN [Order Details] AS OD ON O.OrderID = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY DATENAME(MONTH, O.OrderDate), MONTH(O.OrderDate)\nORDER BY MONTH(O.OrderDate)\n\n/* Answer the following: Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "n_examples": 9,
            "db_id": "northwind"
        },
        {
            "question": "For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "evidence": "",
            "raw_question": "For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which employee has processed the highest number of orders in total? */\nSELECT EmployeeID, COUNT(*) AS total_orders\nFROM Orders\nGROUP BY EmployeeID\nORDER BY total_orders DESC\nLIMIT 1;\n\n/* Answer the following: List the five customers who have placed the most late orders (where an order is late when ShippedDate >= RequiredDate). Show each customer\u2019s ID and the number of late orders. */\nSELECT CustomerID, COUNT(*) AS late_orders\nFROM Orders\nWHERE ShippedDate >= RequiredDate\nGROUP BY CustomerID\nORDER BY late_orders DESC\nLIMIT 5;\n\n/* Answer the following: How many orders were placed in each month of the year 1997?  */\nSELECT MONTH(OrderDate) AS month, COUNT(*) AS order_count\nFROM Orders\nWHERE YEAR(OrderDate) = 1997\nGROUP BY MONTH(OrderDate)\nORDER BY month;\n\n/* Answer the following: What is the average order value (\u03a3 UnitPrice \u00d7 Quantity \u00d7 (1-Discount)) for the orders handled by employee 5? */\nSELECT AVG(order_total) AS avg_order_value\nFROM (\n    SELECT O.OrderID,\n           SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS order_total\n    FROM Orders        AS O\n    JOIN OrderDetails  AS OD ON O.OrderID = OD.OrderID\n    WHERE O.EmployeeID = 5\n    GROUP BY O.OrderID\n) AS t;\n\n/* Answer the following: Which product has generated the highest revenue in late orders (ShippedDate >= RequiredDate)?  Provide the product ID and the total revenue from those late orders. */\nSELECT OD.ProductID,\n       SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS total_revenue\nFROM Orders       AS O\nJOIN OrderDetails AS OD ON O.OrderID = OD.OrderID\nWHERE O.ShippedDate >= O.RequiredDate\nGROUP BY OD.ProductID\nORDER BY total_revenue DESC\nLIMIT 1;\n\n/* Answer the following: Among customers located in the USA, what percentage of their orders were shipped on time (ShippedDate < RequiredDate)? */\nSELECT O.CustomerID,\n       SUM(CASE WHEN O.ShippedDate < O.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS on_time_percentage\nFROM Orders     AS O\nJOIN Customers  AS C ON O.CustomerID = C.CustomerID\nWHERE C.Country = 'USA'\nGROUP BY O.CustomerID;\n\n/* Answer the following: List the employees who have never had a late order.  Return each employee\u2019s ID. */\nSELECT EmployeeID\nFROM Orders\nGROUP BY EmployeeID\nHAVING SUM(CASE WHEN ShippedDate >= RequiredDate THEN 1 ELSE 0 END) = 0;\n\n/* Answer the following: What is the average shipping delay in days for orders that were shipped late? (Delay is calculated as ShippedDate \u2013 RequiredDate.) */\nSELECT AVG(DATEDIFF(day, RequiredDate, ShippedDate)) AS avg_delay_days\nFROM Orders\nWHERE ShippedDate >= RequiredDate;\n\n/* Answer the following: For each year, how many unique customers placed at least one order? */\nSELECT YEAR(OrderDate) AS order_year,\n       COUNT(DISTINCT CustomerID) AS unique_customers\nFROM Orders\nGROUP BY YEAR(OrderDate)\nORDER BY order_year;\n\n/* Answer the following: Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "n_examples": 9,
            "db_id": "northwind"
        },
        {
            "question": "Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "evidence": "",
            "raw_question": "Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For every movie, list its title together with the number of female actors in the cast. */\nSELECT M.title ,\n       COUNT(*) AS female_actor_cnt\nFROM Movie         AS M\nJOIN Cast          AS C ON C.movie_id = M.id\nJOIN Actor         AS A ON A.id       = C.actor_id\nWHERE A.gender = 'Female'\nGROUP BY M.id , M.title\n\n/* Answer the following: How many movies released before 2000 had no male actors in their casts (actors whose gender is either \u201cMale\u201d or \u201cNone\u201d are considered non-female)? */\nSELECT COUNT(*) \nFROM Movie AS M\nWHERE CAST(RIGHT(M.year , 4) AS INT) < 2000\n  AND NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender IN ('Male' , 'None')\n      )\n\n/* Answer the following: What is the average rating of movies whose casts contain only actors whose gender is explicitly specified (no actor with gender = 'None')? */\nSELECT AVG(M.rating)\nFROM Movie AS M\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender = 'None'\n      )\n\n/* Answer the following: List the names of directors who have made at least three movies whose casts are exclusively female. */\nSELECT D.name\nFROM Director        AS D\nJOIN Movie_Director  AS MD ON MD.director_id = D.id\nJOIN Movie           AS M  ON M.id          = MD.movie_id\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender IN ('Male' , 'None')\n      )\nGROUP BY D.id , D.name\nHAVING COUNT(DISTINCT M.id) >= 3\n\n/* Answer the following: For each decade, compute the percentage of movies that feature at least one female actor.  Show the decade, total movies in that decade, and the percentage with \u22651 female. */\nWITH decade_movies AS (\n     SELECT (CAST(RIGHT(year , 4) AS INT) / 10) * 10 AS decade ,\n            id\n     FROM Movie\n)\nSELECT dm.decade ,\n       COUNT(*)                                AS total_movies ,\n       100.0 * COUNT(DISTINCT mf.movie_id) / COUNT(*)  AS pct_with_female\nFROM decade_movies AS dm\nLEFT JOIN (\n        SELECT DISTINCT M.id AS movie_id\n        FROM Movie  AS M\n        JOIN Cast   AS C ON C.movie_id = M.id\n        JOIN Actor  AS A ON A.id       = C.actor_id\n        WHERE A.gender = 'Female'\n) AS mf   ON mf.movie_id = dm.id\nGROUP BY dm.decade\nORDER BY dm.decade\n\n/* Answer the following: List the titles of movies that have more male than female actors, ordered by the difference (male \u2013 female) in descending order. */\nWITH gender_cnt AS (\n     SELECT M.id ,\n            SUM(CASE WHEN A.gender = 'Male'   THEN 1 ELSE 0 END) AS male_cnt ,\n            SUM(CASE WHEN A.gender = 'Female' THEN 1 ELSE 0 END) AS female_cnt\n     FROM Movie AS M\n     JOIN Cast  AS C ON C.movie_id = M.id\n     JOIN Actor AS A ON A.id       = C.actor_id\n     GROUP BY M.id\n)\nSELECT M.title ,\n       gc.male_cnt - gc.female_cnt AS male_minus_female\nFROM gender_cnt AS gc\nJOIN Movie      AS M ON M.id = gc.id\nWHERE gc.male_cnt > gc.female_cnt\nORDER BY male_minus_female DESC\n\n/* Answer the following: For each actor, give the total number of movies they appeared in that were released after 2015. */\nSELECT A.name ,\n       COUNT(*) AS movies_after_2015\nFROM Actor AS A\nJOIN Cast  AS C ON C.actor_id = A.id\nJOIN Movie AS M ON M.id       = C.movie_id\nWHERE CAST(RIGHT(M.year , 4) AS INT) > 2015\nGROUP BY A.id , A.name\nORDER BY movies_after_2015 DESC\n\n/* Answer the following: Which year had the highest number of movies with mixed-gender casts (i.e., at least one male and at least one female actor)?  Show that year and the count. */\nWITH mixed AS (\n     SELECT M.id ,\n            CAST(RIGHT(M.year , 4) AS INT) AS yr\n     FROM Movie AS M\n     WHERE EXISTS (\n             SELECT 1\n             FROM Cast  AS C\n             JOIN Actor AS A ON A.id = C.actor_id\n             WHERE C.movie_id = M.id\n               AND A.gender = 'Male'\n          )\n       AND EXISTS (\n             SELECT 1\n             FROM Cast  AS C\n             JOIN Actor AS A ON A.id = C.actor_id\n             WHERE C.movie_id = M.id\n               AND A.gender = 'Female'\n          )\n)\nSELECT yr , COUNT(*) AS mixed_gender_movie_cnt\nFROM mixed\nGROUP BY yr\nORDER BY mixed_gender_movie_cnt DESC\nLIMIT 1\n\n/* Answer the following: For the year 2020, what percentage of all actors appearing in movies released that year were female?  Show the total number of distinct actors and the percentage female. */\nWITH movies_2020 AS (\n     SELECT id\n     FROM Movie\n     WHERE CAST(RIGHT(year , 4) AS INT) = 2020\n), actors_2020 AS (\n     SELECT DISTINCT A.id , A.gender\n     FROM movies_2020 AS m\n     JOIN Cast        AS C ON C.movie_id = m.id\n     JOIN Actor       AS A ON A.id       = C.actor_id\n)\nSELECT COUNT(*)                                       AS total_actors ,\n       100.0 * SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) / COUNT(*) AS pct_female\nFROM actors_2020\n\n\n/* Answer the following: For each year, calculate the percentage of films that had exclusively female actors (meaning no male actors and no actors with unknown/unspecified gender). Consider actors with gender marked as 'Male' or 'None' as non-female. For the results, display the year, the total number of movies in that year, and the percentage of movies with exclusively female actors. Extract the year from the Movie.year field by taking the last 4 characters and converting to a number.",
            "n_examples": 9,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "evidence": "",
            "raw_question": "Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many movies were released in the year 1995? */\nSELECT COUNT(*) \nFROM movie\nWHERE year = 1995;\n\n/* Answer the following: List the names of the 3 directors who have directed the largest number of movies. */\nSELECT p.name\nFROM director AS d\nJOIN person  AS p ON d.person_id = p.id\nGROUP BY p.name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For every genre, what is the average movie rank of films released after the year 2000? */\nSELECT g.genre , AVG(m.rank) AS avg_rank\nFROM movie   AS m\nJOIN genres  AS g ON m.id = g.movie_id\nWHERE m.year > 2000\nGROUP BY g.genre;\n\n/* Answer the following: Which actor has appeared in the greatest number of films released before 1980?  */\nSELECT p.name\nFROM movie_cast AS mc\nJOIN movie      AS m ON mc.movie_id = m.id\nJOIN person     AS p ON mc.person_id = p.id\nWHERE m.year < 1980\nGROUP BY p.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the earliest year in which more than 10 horror movies were released? */\nSELECT m.year\nFROM movie  AS m\nJOIN genres AS g ON m.id = g.movie_id\nWHERE g.genre = 'Horror'\nGROUP BY m.year\nHAVING COUNT(*) > 10\nORDER BY m.year\nLIMIT 1;\n\n/* Answer the following: Return all pairs of actors who have co-starred together in at least 5 different movies. */\nSELECT p1.name AS actor1 , p2.name AS actor2\nFROM movie_cast AS mc1\nJOIN movie_cast AS mc2 \n     ON mc1.movie_id = mc2.movie_id \n    AND mc1.person_id < mc2.person_id\nJOIN person AS p1 ON mc1.person_id = p1.id\nJOIN person AS p2 ON mc2.person_id = p2.id\nGROUP BY p1.name , p2.name\nHAVING COUNT(*) >= 5;\n\n/* Answer the following: Which genre has the highest average movie rank overall?  */\nSELECT g.genre\nFROM genres AS g\nJOIN movie  AS m ON g.movie_id = m.id\nGROUP BY g.genre\nORDER BY AVG(m.rank) DESC\nLIMIT 1;\n\n/* Answer the following: How many movies are tagged with both the genres 'Comedy' and 'Romance'? */\nSELECT COUNT(*)\nFROM movie AS m\nWHERE EXISTS (SELECT 1 FROM genres AS g1 WHERE g1.movie_id = m.id AND g1.genre = 'Comedy')\n  AND EXISTS (SELECT 1 FROM genres AS g2 WHERE g2.movie_id = m.id AND g2.genre = 'Romance');\n\n/* Answer the following: For each year, how many actors made their film debut (i.e., their first-ever movie was released in that year)? */\nSELECT debut_year AS year , COUNT(*) AS actors_debuted\nFROM (\n      SELECT p.id , MIN(m.year) AS debut_year\n      FROM person      AS p\n      JOIN movie_cast  AS mc ON p.id = mc.person_id\n      JOIN movie       AS m  ON mc.movie_id = m.id\n      GROUP BY p.id\n     ) AS debut_info\nGROUP BY debut_year;\n\n/* Answer the following: Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "n_examples": 9,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "evidence": "",
            "raw_question": "Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many actors have at least one streak of 10 consecutive years in which they released a movie every single year? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year AS yr\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), seq AS (\n    SELECT actor_id ,\n           yr ,\n           ROW_NUMBER() OVER (PARTITION BY actor_id ORDER BY yr) AS rn\n    FROM actor_years\n), grp AS (\n    SELECT actor_id ,\n           yr ,\n           yr - rn AS grp_key\n    FROM seq\n), streaks AS (\n    SELECT actor_id , COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY actor_id , grp_key\n)\nSELECT COUNT(DISTINCT actor_id)\nFROM streaks\nWHERE streak_len >= 10;\n\n/* Answer the following: Which actor experienced the single longest gap (in years) between any two consecutive movie appearances? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n)\nSELECT a.name\nFROM (\n      SELECT actor_id , MAX(gap) AS max_gap\n      FROM gaps\n      GROUP BY actor_id\n      ORDER BY max_gap DESC\n      LIMIT 1\n) AS g\nJOIN Actor AS a ON a.actor_id = g.actor_id;\n\n/* Answer the following: List the titles of all movies whose entire cast is made up of actors that never had a career gap longer than two years. */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n), steady_actors AS (\n    SELECT actor_id\n    FROM gaps\n    GROUP BY actor_id\n    HAVING MAX(COALESCE(gap,1)) <= 2\n)\nSELECT DISTINCT m.title\nFROM Movie AS m\nJOIN Cast  AS c ON c.movie_id = m.movie_id\nGROUP BY m.movie_id , m.title\nHAVING SUM(CASE WHEN c.actor_id NOT IN (SELECT actor_id FROM steady_actors) THEN 1 ELSE 0 END) = 0;\n\n/* Answer the following: How many actors have careers spanning at least twenty calendar years between their first and last film? */\nWITH career AS (\n    SELECT c.actor_id ,\n           MIN(m.year) AS first_year ,\n           MAX(m.year) AS last_year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id\n)\nSELECT COUNT(*)\nFROM career\nWHERE last_year - first_year >= 20;\n\n/* Answer the following: Give the names of actors who appeared in more than five different movies during the same calendar year. */\nWITH appearances AS (\n    SELECT c.actor_id , m.year , COUNT(*) AS film_count\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n)\nSELECT DISTINCT a.name\nFROM appearances AS p\nJOIN Actor AS a ON a.actor_id = p.actor_id\nWHERE p.film_count > 5;\n\n/* Answer the following: For each decade, how many actors debuted in that decade and never had a gap longer than three years anywhere in their careers? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n), steady AS (\n    SELECT actor_id\n    FROM gaps\n    GROUP BY actor_id\n    HAVING MAX(COALESCE(gap,1)) <= 3\n), debut AS (\n    SELECT actor_id , MIN(year) AS first_year\n    FROM actor_years\n    GROUP BY actor_id\n)\nSELECT (first_year/10)*10 AS decade ,\n       COUNT(*)            AS num_actors\nFROM debut\nWHERE actor_id IN (SELECT actor_id FROM steady)\nGROUP BY (first_year/10)*10\nORDER BY decade;\n\n/* Answer the following: In which single calendar year did the database record the highest number of distinct actors appearing in films? */\nSELECT m.year\nFROM Cast  AS c\nJOIN Movie AS m ON m.movie_id = c.movie_id\nGROUP BY m.year\nORDER BY COUNT(DISTINCT c.actor_id) DESC\nLIMIT 1;\n\n/* Answer the following: Which actor (or actors, in case of a tie) has the smallest median gap, in years, between any two consecutive movie releases? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n    WHERE LAG(year) OVER (PARTITION BY actor_id ORDER BY year) IS NOT NULL\n), med_gap AS (\n    SELECT actor_id ,\n           PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY gap) AS median_gap\n    FROM gaps\n    GROUP BY actor_id\n), best AS (\n    SELECT MIN(median_gap) AS best_gap FROM med_gap\n)\nSELECT a.name\nFROM med_gap AS m\nJOIN best    AS b ON m.median_gap = b.best_gap\nJOIN Actor   AS a ON a.actor_id   = m.actor_id;\n\n/* Answer the following: How many actors experienced at least one hiatus of eight or more consecutive years and then returned to appear in another movie afterward? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n)\nSELECT COUNT(DISTINCT actor_id)\nFROM gaps\nWHERE gap >= 8;\n\n/* Answer the following: From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "n_examples": 9,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "evidence": "",
            "raw_question": "Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which actor has appeared in the highest number of movies directed by Christopher Nolan? */\nSELECT a.name\nFROM actor AS a\nJOIN cast AS c          ON a.id = c.actor_id\nJOIN movie_direction md ON c.movie_id = md.movie_id\nJOIN director      d    ON md.director_id = d.id\nWHERE d.name = 'Christopher Nolan'\nGROUP BY a.id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the five directors who have collaborated most frequently with Amitabh Bachchan. */\nSELECT d.name\nFROM director d\nJOIN movie_direction md ON d.id = md.director_id\nJOIN cast c             ON md.movie_id = c.movie_id\nJOIN actor a            ON c.actor_id = a.id\nWHERE a.name = 'Amitabh Bachchan'\nGROUP BY d.id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: How many actors have worked in more than three movies directed by Steven Spielberg? */\nSELECT COUNT(*)\nFROM (\n    SELECT a.id\n    FROM actor a\n    JOIN cast c              ON a.id = c.actor_id\n    JOIN movie_direction md  ON c.movie_id = md.movie_id\n    JOIN director d          ON md.director_id = d.id\n    WHERE d.name = 'Steven Spielberg'\n    GROUP BY a.id\n    HAVING COUNT(*) > 3\n) AS freq_actor;\n\n/* Answer the following: Which actors have appeared in at least one movie directed by both Quentin Tarantino and Martin Scorsese? */\nSELECT a.name\nFROM actor a\nWHERE a.id IN (\n        SELECT c.actor_id\n        FROM cast c\n        JOIN movie_direction md ON c.movie_id = md.movie_id\n        JOIN director d         ON md.director_id = d.id\n        WHERE d.name = 'Quentin Tarantino'\n)\nAND a.id IN (\n        SELECT c.actor_id\n        FROM cast c\n        JOIN movie_direction md ON c.movie_id = md.movie_id\n        JOIN director d         ON md.director_id = d.id\n        WHERE d.name = 'Martin Scorsese'\n);\n\n/* Answer the following: Give the title and year of the earliest movie in which Shah Rukh Khan acted under the direction of Karan Johar. */\nSELECT m.title, m.year\nFROM movie m\nJOIN cast c              ON m.id = c.movie_id\nJOIN actor a             ON c.actor_id = a.id\nJOIN movie_direction md  ON m.id = md.movie_id\nJOIN director d          ON md.director_id = d.id\nWHERE a.name = 'Shah Rukh Khan'\n  AND d.name = 'Karan Johar'\nORDER BY m.year ASC\nLIMIT 1;\n\n/* Answer the following: Which director has worked with the largest number of distinct actors? */\nSELECT d.name\nFROM director d\nJOIN movie_direction md ON d.id = md.director_id\nJOIN cast c             ON md.movie_id = c.movie_id\nGROUP BY d.id\nORDER BY COUNT(DISTINCT c.actor_id) DESC\nLIMIT 1;\n\n/* Answer the following: List the directors who have made at least one movie featuring both Leonardo DiCaprio and Tom Hanks. */\nSELECT DISTINCT d.name\nFROM director d\nJOIN movie_direction md ON d.id = md.director_id\nWHERE md.movie_id IN (\n        SELECT c1.movie_id\n        FROM cast c1\n        JOIN actor a1 ON c1.actor_id = a1.id\n        WHERE a1.name = 'Leonardo DiCaprio'\n    )\n  AND md.movie_id IN (\n        SELECT c2.movie_id\n        FROM cast c2\n        JOIN actor a2 ON c2.actor_id = a2.id\n        WHERE a2.name = 'Tom Hanks'\n    );\n\n/* Answer the following: For each actor who has collaborated with Christopher Nolan, how many distinct movies have they done together? */\nSELECT a.name,\n       COUNT(DISTINCT c.movie_id) AS collaboration_count\nFROM actor a\nJOIN cast c             ON a.id = c.actor_id\nJOIN movie_direction md ON c.movie_id = md.movie_id\nJOIN director d         ON md.director_id = d.id\nWHERE d.name = 'Christopher Nolan'\nGROUP BY a.id;\n\n/* Answer the following: Which actor-director pair has collaborated on the greatest number of movies? */\nSELECT a.name  AS actor_name,\n       d.name  AS director_name\nFROM actor a\nJOIN cast c             ON a.id = c.actor_id\nJOIN movie_direction md ON c.movie_id = md.movie_id\nJOIN director d         ON md.director_id = d.id\nGROUP BY a.id, d.id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "n_examples": 9,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "evidence": "",
            "raw_question": "Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many movies starring Shahrukh Khan have an IMDb rating higher than 8? */\nSELECT COUNT(DISTINCT M.id)\nFROM movie AS M\nJOIN cast AS C     ON M.id = C.movie_id\nJOIN actor AS A    ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\n  AND M.imdb_rating > 8;\n\n/* Answer the following: List the titles of movies released in 2010 that feature both Shahrukh Khan and Kajol. */\nSELECT DISTINCT M.title\nFROM movie  AS M\nJOIN cast   AS C1 ON M.id = C1.movie_id\nJOIN actor  AS A1 ON C1.actor_id = A1.id\nJOIN cast   AS C2 ON M.id = C2.movie_id\nJOIN actor  AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name = 'Kajol'\n  AND M.year = 2010;\n\n/* Answer the following: Which director has worked with Shahrukh Khan on the greatest number of films? */\nSELECT D.name\nFROM director        AS D\nJOIN movie_director  AS MD ON D.id = MD.director_id\nJOIN movie           AS M  ON M.id = MD.movie_id\nJOIN cast            AS C  ON M.id = C.movie_id\nJOIN actor           AS A  ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\nGROUP BY D.id\nORDER BY COUNT(DISTINCT M.id) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average box-office gross of Shahrukh Khan movies released between 2000 and 2009? */\nSELECT AVG(M.box_office)\nFROM movie AS M\nJOIN cast  AS C ON M.id = C.movie_id\nJOIN actor AS A ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\n  AND M.year BETWEEN 2000 AND 2009;\n\n/* Answer the following: Which actor (excluding Shahrukh Khan) has appeared most frequently alongside him? */\nSELECT A2.name\nFROM cast  AS C1\nJOIN actor AS A1 ON C1.actor_id = A1.id\nJOIN cast  AS C2 ON C1.movie_id = C2.movie_id\nJOIN actor AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name <> 'Shahrukh Khan'\nGROUP BY A2.id\nORDER BY COUNT(DISTINCT C1.movie_id) DESC\nLIMIT 1;\n\n/* Answer the following: How many actors have a Shahrukh number of 1 (they have acted in at least one film with him)? */\nSELECT COUNT(DISTINCT A2.id)\nFROM cast  AS C1\nJOIN actor AS A1 ON C1.actor_id = A1.id\nJOIN cast  AS C2 ON C1.movie_id = C2.movie_id\nJOIN actor AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name <> 'Shahrukh Khan';\n\n/* Answer the following: List the titles of the top-5 highest-grossing movies that feature Shahrukh Khan. */\nSELECT M.title\nFROM movie AS M\nJOIN cast  AS C ON M.id = C.movie_id\nJOIN actor AS A ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\nORDER BY M.box_office DESC\nLIMIT 5;\n\n/* Answer the following: What is the earliest year in which Shahrukh Khan acted in more than three movies? */\nSELECT MIN(Y.year_released) AS earliest_year\nFROM (\n     SELECT M.year AS year_released, COUNT(DISTINCT M.id) AS films_in_year\n     FROM movie AS M\n     JOIN cast  AS C ON M.id = C.movie_id\n     JOIN actor AS A ON C.actor_id = A.id\n     WHERE A.name = 'Shahrukh Khan'\n     GROUP BY M.year\n     HAVING COUNT(DISTINCT M.id) > 3\n) AS Y;\n\n/* Answer the following: Which three actresses have appeared in at least two different Karan Johar movies that also starred Shahrukh Khan? */\nSELECT A2.name\nFROM director        AS D\nJOIN movie_director  AS MD ON D.id = MD.director_id\nJOIN movie           AS M  ON M.id = MD.movie_id\nJOIN cast            AS C1 ON M.id = C1.movie_id\nJOIN actor           AS A1 ON C1.actor_id = A1.id\nJOIN cast            AS C2 ON M.id = C2.movie_id\nJOIN actor           AS A2 ON C2.actor_id = A2.id\nWHERE D.name = 'Karan Johar'\n  AND A1.name = 'Shahrukh Khan'\n  AND A2.name <> 'Shahrukh Khan'      -- ensure we only list co-stars\nGROUP BY A2.id\nHAVING COUNT(DISTINCT M.id) >= 2\nORDER BY A2.name\nLIMIT 3;\n\n/* Answer the following: Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "n_examples": 9,
            "db_id": "Db-IMDB"
        },
        {
            "question": "For each year, calculate the proportion of films that had exclusively female actors, considering actors with gender 'Male' or 'None' (i.e., unknown or unspecified gender) as non-female. Show the proportion of female-actor-only films and the total number of all films for each year.",
            "evidence": "",
            "raw_question": "For each year, calculate the proportion of films that had exclusively female actors, considering actors with gender 'Male' or 'None' (i.e., unknown or unspecified gender) as non-female. Show the proportion of female-actor-only films and the total number of all films for each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many web orders were placed in calendar year 2023? calendar year 2023 refers to order_date BETWEEN '2023-01-01' AND '2023-12-31' */\nSELECT COUNT(*) AS orders_2023\nFROM web_sales\nWHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n/* Answer the following: For each region, what is the average order value rounded to two decimals? average order value refers to AVG(order_amount); */\nSELECT r.region_name,\n       ROUND(AVG(w.order_amount), 2) AS avg_order_value\nFROM regions AS r\nJOIN web_sales AS w ON w.region_id = r.region_id\nGROUP BY r.region_name;\n\n/* Answer the following: Which sales representative generated the highest total web sales overall? highest total web sales refers to MAX(total_amount) calculated per sales_rep_id; */\nSELECT s.rep_name,\n       SUM(w.order_amount) AS total_sales\nFROM sales_reps AS s\nJOIN web_sales  AS w ON w.sales_rep_id = s.sales_rep_id\nGROUP BY s.rep_name\nHAVING SUM(w.order_amount) = (\n    SELECT MAX(total_rep_sales)\n    FROM (\n        SELECT SUM(order_amount) AS total_rep_sales\n        FROM web_sales\n        GROUP BY sales_rep_id\n    ) AS x\n);\n\n/* Answer the following: What is the number of customers who have placed more than 10 web orders? placed more than 10 web orders refers to COUNT(web_sales.ws_order_id) > 10 */\nSELECT COUNT(*) AS frequent_customers\nFROM (\n    SELECT customer_id\n    FROM web_sales\n    GROUP BY customer_id\n    HAVING COUNT(ws_order_id) > 10\n) AS t;\n\n/* Answer the following: List the top 5 regions with the highest total web\u2010sales amount. highest total web\u2010sales amount refers to SUM(order_amount) ordered DESC; top 5 refers to LIMIT 5 */\nSELECT r.region_name,\n       SUM(w.order_amount) AS total_sales\nFROM regions AS r\nJOIN web_sales AS w ON w.region_id = r.region_id\nGROUP BY r.region_name\nORDER BY total_sales DESC\nLIMIT 5;\n\n/* Answer the following: In which month of 2022 were the most web orders placed? month refers to EXTRACT(MONTH FROM order_date); most web orders refers to MAX(order_count) per month */\nSELECT EXTRACT(MONTH FROM order_date) AS order_month,\n       COUNT(*) AS order_count\nFROM web_sales\nWHERE order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY order_month\nORDER BY order_count DESC\nLIMIT 1;\n\n/* Answer the following: What is the total sales amount for web orders that had free shipping? free shipping refers to shipping_cost = 0 */\nSELECT SUM(order_amount) AS free_shipping_sales\nFROM web_sales\nWHERE shipping_cost = 0;\n\n/* Answer the following: Which items in the catalog have never been sold on the web? never been sold refers to item_id NOT IN (SELECT item_id FROM web_sales_items) */\nSELECT i.item_id,\n       i.item_name\nFROM items AS i\nLEFT JOIN web_sales_items AS wsi ON wsi.item_id = i.item_id\nWHERE wsi.item_id IS NULL;\n\n/* Answer the following: Give the names of regions that currently have no active sales representatives. no active sales representatives refers to COUNT(sales_rep_id) = 0 */\nSELECT r.region_name\nFROM regions AS r\nLEFT JOIN sales_reps AS s ON s.region_id = r.region_id\nWHERE s.sales_rep_id IS NULL;\n\n/* Answer the following: Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "n_examples": 9,
            "db_id": "education_business"
        },
        {
            "question": "Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "evidence": "",
            "raw_question": "Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id, first name and last name of the bowlers who have won at least one game with a handicap score lower than 180 at Bolero Lanes. */\nSELECT DISTINCT B.BowlerID ,\n                B.FirstName ,\n                B.LastName\nFROM Bowler     AS B\nJOIN Game       AS G ON B.BowlerID = G.BowlerID\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND G.HandicapScore < 180\n  AND V.VenueName = 'Bolero Lanes';\n\n/* Answer the following: What is the average handicap score of winning games played at Totem Lanes during tournaments held in 2021? */\nSELECT AVG(G.HandicapScore)\nFROM Game       AS G\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND V.VenueName = 'Totem Lanes'\n  AND strftime('%Y', T.TournamentDate) = '2021';\n\n/* Answer the following: Give each bowler\u2019s id, first name, last name and the number of games they have won at Thunderbird Lanes. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName ,\n       COUNT(*)  AS WinsAtThunderbird\nFROM Bowler     AS B\nJOIN Game       AS G ON B.BowlerID = G.BowlerID\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND V.VenueName = 'Thunderbird Lanes'\nGROUP BY B.BowlerID , B.FirstName , B.LastName;\n\n/* Answer the following: Which bowler has the highest total number of winning games across all venues? Return their id, first name, last name and total wins. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName ,\n       COUNT(*) AS TotalWins\nFROM Bowler AS B\nJOIN Game   AS G ON B.BowlerID = G.BowlerID\nWHERE G.WinnerFlag = 1\nGROUP BY B.BowlerID , B.FirstName , B.LastName\nORDER BY TotalWins DESC\nLIMIT 1;\n\n/* Answer the following: List the tournament id, date and venue where every winning handicap score was 200 or lower. */\nSELECT T.TournamentID ,\n       T.TournamentDate ,\n       V.VenueName\nFROM Tournament AS T\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nJOIN Match      AS M ON M.TournamentID = T.TournamentID\nJOIN Game       AS G ON G.MatchID  = M.MatchID\nWHERE G.WinnerFlag = 1\nGROUP BY T.TournamentID , T.TournamentDate , V.VenueName\nHAVING MAX(G.HandicapScore) <= 200;\n\n/* Answer the following: Find the matches in which the same bowler won every game. Return tournament id, match number and that bowler\u2019s id. */\nSELECT T.TournamentID ,\n       M.MatchNumber ,\n       MIN(G.BowlerID) AS BowlerID   -- all winners are the same so MIN = MAX\nFROM Match      AS M\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Game       AS G ON G.MatchID      = M.MatchID\nWHERE G.WinnerFlag = 1\nGROUP BY M.MatchID\nHAVING COUNT(DISTINCT G.BowlerID) = 1;\n\n/* Answer the following: Show the bowlers who have bowled (in any role) at all three venues: Thunderbird Lanes, Totem Lanes, and Bolero Lanes. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName\nFROM Bowler     AS B\nJOIN Game       AS G ON B.BowlerID = G.BowlerID\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE V.VenueName IN ('Thunderbird Lanes', 'Totem Lanes', 'Bolero Lanes')\nGROUP BY B.BowlerID , B.FirstName , B.LastName\nHAVING COUNT(DISTINCT V.VenueName) = 3;\n\n/* Answer the following: List the id, first name, and last name of bowlers who have never played a game at Bolero Lanes. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName\nFROM Bowler AS B\nWHERE NOT EXISTS (\n      SELECT 1\n      FROM Game       AS G\n      JOIN Match      AS M ON G.MatchID  = M.MatchID\n      JOIN Tournament AS T ON M.TournamentID = T.TournamentID\n      JOIN Venue      AS V ON T.VenueID = V.VenueID\n      WHERE G.BowlerID = B.BowlerID\n        AND V.VenueName = 'Bolero Lanes'\n);\n\n/* Answer the following: For each venue, show the venue name and the highest handicap score ever achieved by a game winner there. */\nSELECT V.VenueName ,\n       MAX(G.HandicapScore) AS HighestWinningHandicap\nFROM Game       AS G\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\nGROUP BY V.VenueName;\n\n/* Answer the following: List the bowlers (including their ID, first name, and last name), match number, game number, handicap score, tournament date, and location for only those bowlers who have won games with a handicap score of 190 or less at all three venues: Thunderbird Lanes, Totem Lanes, and Bolero Lanes. Only include the specific game records where they won with a handicap score of 190 or less at these three locations.",
            "n_examples": 9,
            "db_id": "BowlingLeague"
        },
        {
            "question": "From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "evidence": "",
            "raw_question": "From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average grade for all completed Mathematics courses? completed refers to ClassStatus = 2; */\nSELECT AVG(E.Grade)\nFROM Enrollments AS E\nJOIN Courses AS C ON E.CourseID = C.ID\nWHERE C.Department = 'Mathematics' \n  AND E.ClassStatus = 2;\n\n/* Answer the following: List the first and last names of students who have completed at least three Science courses. completed refers to ClassStatus = 2; at least three refers to COUNT(*) \u2265 3; */\nSELECT S.FirstName , S.LastName\nFROM Students AS S\nJOIN Enrollments AS E ON S.ID = E.StudentID\nJOIN Courses    AS C ON E.CourseID = C.ID\nWHERE C.Department = 'Science'\n  AND E.ClassStatus = 2\nGROUP BY S.ID\nHAVING COUNT(*) >= 3;\n\n/* Answer the following: What is the highest grade achieved in any completed History course? completed refers to ClassStatus = 2; highest grade refers to MAX(Grade); */\nSELECT MAX(E.Grade)\nFROM Enrollments AS E\nJOIN Courses AS C ON E.CourseID = C.ID\nWHERE C.Department = 'History'\n  AND E.ClassStatus = 2;\n\n/* Answer the following: For every English course, give the course name and the number of students who have completed it. completed refers to ClassStatus = 2; */\nSELECT C.CourseName ,\n       COUNT(*) AS CompletedStudents\nFROM Courses     AS C\nJOIN Enrollments AS E ON C.ID = E.CourseID\nWHERE C.Department = 'English'\n  AND E.ClassStatus = 2\nGROUP BY C.ID , C.CourseName;\n\n/* Answer the following: Which students have grades higher than the overall average grade of all completed English courses? completed refers to ClassStatus = 2; */\nSELECT DISTINCT S.FirstName , S.LastName\nFROM Students     AS S\nJOIN Enrollments  AS E ON S.ID = E.StudentID\nJOIN Courses      AS C ON E.CourseID = C.ID\nWHERE C.Department = 'English'\n  AND E.ClassStatus = 2\n  AND E.Grade >\n      ( SELECT AVG(E2.Grade)\n        FROM Enrollments AS E2\n        JOIN Courses     AS C2 ON E2.CourseID = C2.ID\n        WHERE C2.Department = 'English'\n          AND E2.ClassStatus = 2 );\n\n/* Answer the following: Which student has the lowest average grade across all of their completed courses? completed refers to ClassStatus = 2; lowest average refers to MIN(AVG(Grade)); */\nSELECT S.LastName\nFROM Students    AS S\nJOIN Enrollments AS E ON S.ID = E.StudentID\nWHERE E.ClassStatus = 2\nGROUP BY S.ID\nORDER BY AVG(E.Grade) ASC\nLIMIT 1;\n\n/* Answer the following: How many students have never completed any course? never completed means the student has no Enrollments row with ClassStatus = 2; */\nSELECT COUNT(*)\nFROM Students AS S\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Enrollments AS E\n    WHERE E.StudentID = S.ID\n      AND E.ClassStatus = 2 );\n\n/* Answer the following: List the five courses with the highest average grade among courses that have at least ten completions. completion refers to ClassStatus = 2; at least ten refers to COUNT(*) \u2265 10; */\nSELECT C.CourseName ,\n       AVG(E.Grade) AS AvgGrade\nFROM Courses     AS C\nJOIN Enrollments AS E ON C.ID = E.CourseID\nWHERE E.ClassStatus = 2\nGROUP BY C.ID\nHAVING COUNT(*) >= 10\nORDER BY AvgGrade DESC\nLIMIT 5;\n\n/* Answer the following: Which department has the highest pass rate, where pass rate is defined as (number of completions) / (total enrollments)? completion refers to ClassStatus = 2; */\nSELECT C.Department\nFROM Courses     AS C\nJOIN Enrollments AS E ON C.ID = E.CourseID\nGROUP BY C.Department\nORDER BY SUM(CASE WHEN E.ClassStatus = 2 THEN 1 ELSE 0 END)*1.0 / COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Could you provide a list of last names for all students who have completed English courses (where completion is defined as having a ClassStatus of 2), along with their quintile ranks based on their individual grades in those courses? The quintile should be determined by calculating how many students have grades greater than or equal to each student's grade, then dividing this ranking by the total number of students who completed English courses. The quintiles should be labeled as \"First\" (top 20%), \"Second\" (top 21-40%), \"Third\" (top 41-60%), \"Fourth\" (top 61-80%), and \"Fifth\" (bottom 20%). Please sort the results from highest performing quintile to lowest (First to Fifth).",
            "n_examples": 9,
            "db_id": "school_scheduling"
        },
        {
            "question": "I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "evidence": "",
            "raw_question": "I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which musical style is chosen most frequently as a 1st preference? */\nSELECT music_first AS musical_style\nFROM survey\nGROUP BY music_first\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many students selected 'Jazz' in any of their three preference positions? */\nSELECT COUNT(DISTINCT student_id)\nFROM survey\nWHERE music_first = 'Jazz'\n   OR music_second = 'Jazz'\n   OR music_third  = 'Jazz';\n\n/* Answer the following: List every musical style together with the number of times it appears as a 2nd preference. */\nSELECT music_second AS musical_style,\n       COUNT(*)     AS second_pref_count\nFROM survey\nGROUP BY music_second\nORDER BY second_pref_count DESC;\n\n/* Answer the following: Which musical styles were never picked as a 3rd preference? */\nSELECT DISTINCT style\nFROM (\n    SELECT music_first  AS style FROM survey\n    UNION\n    SELECT music_second AS style FROM survey\n) AS top_two\nEXCEPT\nSELECT DISTINCT music_third\nFROM survey;\n\n/* Answer the following: What is the most common ordered pair of 1st-and-2nd preferences? */\nSELECT music_first,\n       music_second,\n       COUNT(*) AS pair_count\nFROM survey\nGROUP BY music_first, music_second\nORDER BY pair_count DESC\nLIMIT 1;\n\n/* Answer the following: For each musical style give its weighted popularity score  \n   (3 points for 1st, 2 points for 2nd, 1 point for 3rd) ordered from highest to lowest. */\nSELECT style,\n       SUM(CASE WHEN pref = 1 THEN 3\n                WHEN pref = 2 THEN 2\n                WHEN pref = 3 THEN 1 END) AS weighted_score\nFROM (\n    SELECT student_id, 1 AS pref, music_first  AS style FROM survey\n    UNION ALL\n    SELECT student_id, 2       , music_second AS style FROM survey\n    UNION ALL\n    SELECT student_id, 3       , music_third  AS style FROM survey\n) AS all_prefs\nGROUP BY style\nORDER BY weighted_score DESC;\n\n/* Answer the following: Among students younger than 25, which musical style is the least common 1st preference? */\nSELECT music_first AS musical_style\nFROM survey\nWHERE age < 25\nGROUP BY music_first\nORDER BY COUNT(*) ASC\nLIMIT 1;\n\n/* Answer the following: How many distinct musical styles appear across all three preference columns? */\nSELECT COUNT(DISTINCT style)\nFROM (\n    SELECT music_first  AS style FROM survey\n    UNION\n    SELECT music_second AS style FROM survey\n    UNION\n    SELECT music_third  AS style FROM survey\n) AS all_styles;\n\n/* Answer the following: List the musical styles that a student has chosen in all three preference positions (same style appears as 1st, 2nd and 3rd for some student). */\nSELECT DISTINCT music_first AS musical_style\nFROM survey\nWHERE music_first = music_second\n  AND music_second = music_third;\n\n/* Answer the following: Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "n_examples": 9,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "evidence": "",
            "raw_question": "Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: List the stage names of entertainers whose first two style strengths match, in order, the first two preferences of at least one customer. */\nSELECT DISTINCT e.stage_name\nFROM entertainers AS e\nJOIN customers     AS c\n     ON e.style_strength_1 = c.style_pref_1\n    AND e.style_strength_2 = c.style_pref_2;\n\n/* Answer the following: What are the last names of customers whose first style preference does not match any style strength of any entertainer? */\nSELECT DISTINCT c.last_name\nFROM customers AS c\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM entertainers AS e\n        WHERE c.style_pref_1 IN (e.style_strength_1,\n                                 e.style_strength_2,\n                                 e.style_strength_3)\n);\n\n/* Answer the following: How many entertainer-customer pairs have all three style strengths or preferences identical, regardless of order? */\nSELECT COUNT(*)\nFROM entertainers AS e\nJOIN customers     AS c\n  ON   e.style_strength_1 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND e.style_strength_2 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND e.style_strength_3 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND c.style_pref_1     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3)\n   AND c.style_pref_2     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3)\n   AND c.style_pref_3     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3);\n\n/* Answer the following: Find every style that appears both as a third strength of an entertainer and as a third preference of a customer. */\nSELECT DISTINCT e.style_strength_3 AS style\nFROM entertainers AS e\nJOIN customers     AS c\n  ON e.style_strength_3 = c.style_pref_3\nWHERE e.style_strength_3 IS NOT NULL;\n\n/* Answer the following: For each entertainer, how many customers share the same first style as the entertainer\u2019s first style strength? */\nSELECT e.stage_name,\n       COUNT(c.customer_id) AS matching_customers\nFROM entertainers AS e\nLEFT JOIN customers AS c\n       ON e.style_strength_1 = c.style_pref_1\nGROUP BY e.stage_name;\n\n/* Answer the following: Show the last names of customers who match at least two style strengths of entertainers that list only two strengths in total. */ \nSELECT DISTINCT c.last_name\nFROM entertainers AS e\nJOIN customers     AS c\n  ON ( e.style_strength_1 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n     AND e.style_strength_2 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3) )\nWHERE e.style_strength_3 IS NULL;\n\n/* Answer the following: Which entertainer stage names share exactly the same (unordered) set of style strengths as another entertainer? */\nSELECT DISTINCT e1.stage_name\nFROM entertainers AS e1\nJOIN entertainers AS e2\n  ON e1.entertainer_id <> e2.entertainer_id\n WHERE   (e1.style_strength_1 IN (e2.style_strength_1, e2.style_strength_2, e2.style_strength_3))\n     AND (e1.style_strength_2 IN (e2.style_strength_1, e2.style_strength_2, e2.style_strength_3))\n     AND (e1.style_strength_3 IN (e2.style_strength_1, e2.style_strength_2, e2.style_strength_3));\n\n/* Answer the following: Return the entertainer\u2019s stage name and the customer\u2019s last name where the customer\u2019s first preference equals the entertainer\u2019s second strength and the customer\u2019s second preference equals the entertainer\u2019s first strength. */\nSELECT e.stage_name,\n       c.last_name\nFROM entertainers AS e\nJOIN customers     AS c\n  ON e.style_strength_1 = c.style_pref_2\n AND e.style_strength_2 = c.style_pref_1;\n\n/* Answer the following: Which entertainers have at least one style strength that no customer lists among their three preferences? */\nSELECT DISTINCT e.stage_name\nFROM entertainers AS e\nWHERE    e.style_strength_1 NOT IN (SELECT style_pref_1 FROM customers\n                                    UNION\n                                    SELECT style_pref_2 FROM customers\n                                    UNION\n                                    SELECT style_pref_3 FROM customers)\n    OR   e.style_strength_2 NOT IN (SELECT style_pref_1 FROM customers\n                                    UNION\n                                    SELECT style_pref_2 FROM customers\n                                    UNION\n                                    SELECT style_pref_3 FROM customers)\n    OR   e.style_strength_3 NOT IN (SELECT style_pref_1 FROM customers\n                                    UNION\n                                    SELECT style_pref_2 FROM customers\n                                    UNION\n                                    SELECT style_pref_3 FROM customers);\n\n/* Answer the following: Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "n_examples": 9,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "evidence": "",
            "raw_question": "Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Compute the total weighted score for every musical style (3 points for every 1st-choice, 2 for 2nd-choice, 1 for 3rd-choice). */\nSELECT \n    Style,\n    SUM(CASE PreferenceSeq \n            WHEN 1 THEN 3 \n            WHEN 2 THEN 2 \n            WHEN 3 THEN 1 \n        END) AS weighted_score\nFROM Musical_Preferences\nGROUP BY Style;\n\n/* Answer the following: Which musical style has the highest total weighted score? */\nSELECT Style\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS S\nORDER BY weighted_score DESC\nLIMIT 1;\n\n/* Answer the following: What is the average of those total weighted scores across all styles that have been ranked at least once? */\nSELECT AVG(weighted_score) AS avg_weighted_score\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS Scores;\n\n/* Answer the following: For each musical style, list its total weighted score together with the absolute difference from the overall average weighted score. */\nSELECT \n    Style,\n    weighted_score,\n    ABS(weighted_score - (\n        SELECT AVG(weighted_score)\n        FROM (\n            SELECT \n                Style,\n                SUM(CASE PreferenceSeq \n                        WHEN 1 THEN 3 \n                        WHEN 2 THEN 2 \n                        WHEN 3 THEN 1 \n                    END) AS weighted_score\n            FROM Musical_Preferences\n            GROUP BY Style\n        ) AS AvgTab\n    )) AS diff_from_avg\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS StyleScores;\n\n/* Answer the following: Which musical style has the greatest absolute difference between its weighted score and the overall average? */\nSELECT Style\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS T\nORDER BY ABS(weighted_score - (\n    SELECT AVG(weighted_score)\n    FROM (\n        SELECT \n            Style,\n            SUM(CASE PreferenceSeq \n                    WHEN 1 THEN 3 \n                    WHEN 2 THEN 2 \n                    WHEN 3 THEN 1 \n                END) AS weighted_score\n        FROM Musical_Preferences\n        GROUP BY Style\n    ) AS Z\n)) DESC\nLIMIT 1;\n\n/* Answer the following: List the musical styles that were never chosen as a first-choice by any user but were chosen as a second or third choice at least once. */\nSELECT Style\nFROM Musical_Preferences\nGROUP BY Style\nHAVING SUM(CASE WHEN PreferenceSeq = 1 THEN 1 ELSE 0 END) = 0\n   AND SUM(CASE WHEN PreferenceSeq IN (2,3) THEN 1 ELSE 0 END) > 0;\n\n/* Answer the following: How many users provided all three preference rankings (1st, 2nd and 3rd choices)? */\nSELECT COUNT(DISTINCT UserID)\nFROM Musical_Preferences\nGROUP BY UserID\nHAVING COUNT(DISTINCT PreferenceSeq) = 3;\n\n/* Answer the following: Compute a personal weighted preference score for every user using the same 3-2-1 weighting system. */\nSELECT \n    UserID,\n    SUM(CASE PreferenceSeq \n            WHEN 1 THEN 3 \n            WHEN 2 THEN 2 \n            WHEN 3 THEN 1 \n        END) AS user_weighted_score\nFROM Musical_Preferences\nGROUP BY UserID;\n\n/* Answer the following: Among users who ranked \u201cClassical\u201d, what percentage of those rankings placed \u201cClassical\u201d as the first choice? */\nSELECT \n    100.0 * SUM(CASE WHEN PreferenceSeq = 1 THEN 1 ELSE 0 END) /\n    COUNT(*) AS pct_first_choice_classical\nFROM Musical_Preferences\nWHERE Style = 'Classical';\n\n/* Answer the following: Given a database of musical styles and user preferences, where Musical_Preferences contains user rankings of musical styles (PreferenceSeq=1 for first choice, PreferenceSeq=2 for second choice, PreferenceSeq=3 for third choice): Calculate a weighted score for each musical style by assigning 3 points for each time it was ranked as first choice, 2 points for each second choice, and 1 point for each third choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.\t",
            "n_examples": 9,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "List the bowlers, match number, game number, handicap score, tournament date, and location for only those bowlers who won their game with a handicap score of 190 or less at Thunderbird Lanes, Totem Lanes, and Bolero Lanes.",
            "evidence": "",
            "raw_question": "List the bowlers, match number, game number, handicap score, tournament date, and location for only those bowlers who won their game with a handicap score of 190 or less at Thunderbird Lanes, Totem Lanes, and Bolero Lanes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the total sales for each salesperson in 2019? */\nSELECT sp.name ,\n       SUM(o.amount) AS total_sales_2019\nFROM   sales_person AS sp\nJOIN   orders       AS o  ON sp.id = o.salesperson_id\nWHERE  strftime('%Y', o.order_date) = '2019'\nGROUP  BY sp.id ;\n\n/* Answer the following: What was the average annual sales quota across all sales-people for the year 2020? */\nSELECT AVG(sq.quota_amount) AS avg_quota_2020\nFROM   sales_quota AS sq\nWHERE  sq.year = 2020 ;\n\n/* Answer the following: Which sales-people exceeded their annual quota in 2018? */\nSELECT sp.name ,\n       SUM(o.amount)            AS total_sales ,\n       sq.quota_amount          AS quota_2018\nFROM   sales_person AS sp\nJOIN   orders       AS o  ON sp.id = o.salesperson_id\nJOIN   sales_quota  AS sq ON sq.salesperson_id = sp.id\nWHERE  sq.year = 2018\n  AND  strftime('%Y', o.order_date) = '2018'\nGROUP  BY sp.id\nHAVING total_sales > quota_2018 ;\n\n/* Answer the following: For each year, how many sales-people achieved at least 110 percent of their quota? */\nSELECT yearly.year ,\n       COUNT(*) AS num_above_110pct\nFROM (\n        SELECT sp.id           AS salesperson_id ,\n               sq.year         AS year ,\n               SUM(o.amount)   AS total_sales ,\n               sq.quota_amount\n        FROM   sales_person  AS sp\n        JOIN   sales_quota   AS sq ON sq.salesperson_id = sp.id\n        JOIN   orders        AS o  ON o.salesperson_id = sp.id\n        WHERE  strftime('%Y', o.order_date) = sq.year\n        GROUP  BY sp.id , sq.year\n     ) AS yearly\nWHERE  total_sales >= 1.10 * quota_amount\nGROUP  BY yearly.year ;\n\n/* Answer the following: Which salesperson beat their quota by the highest percentage in 2021? */\nSELECT sp.name\nFROM   sales_person AS sp\nJOIN (\n        SELECT o.salesperson_id ,\n               (SUM(o.amount) - sq.quota_amount) * 1.0 / sq.quota_amount AS pct_above\n        FROM   orders       AS o\n        JOIN   sales_quota  AS sq ON sq.salesperson_id = o.salesperson_id\n        WHERE  sq.year = 2021\n          AND  strftime('%Y', o.order_date) = '2021'\n        GROUP  BY o.salesperson_id\n     ) AS t ON sp.id = t.salesperson_id\nORDER  BY t.pct_above DESC\nLIMIT 1 ;\n\n/* Answer the following: What were the company-wide total sales for each year? */\nSELECT strftime('%Y', o.order_date) AS year ,\n       SUM(o.amount)                AS company_total_sales\nFROM   orders AS o\nGROUP  BY year ;\n\n/* Answer the following: Show each salesperson\u2019s cumulative sales over all recorded years. */\nSELECT sp.name ,\n       SUM(o.amount) AS lifetime_sales\nFROM   sales_person AS sp\nJOIN   orders       AS o ON sp.id = o.salesperson_id\nGROUP  BY sp.id ;\n\n/* Answer the following: For salesperson 'John Doe', show the difference between his total sales and quota for every year. */\nSELECT sq.year ,\n       SUM(o.amount) - sq.quota_amount AS diff_sales_minus_quota\nFROM   sales_person AS sp\nJOIN   sales_quota  AS sq ON sq.salesperson_id = sp.id\nLEFT JOIN orders    AS o  ON o.salesperson_id = sp.id\n                        AND strftime('%Y', o.order_date) = sq.year\nWHERE  sp.name = 'John Doe'\nGROUP  BY sq.year ;\n\n/* Answer the following: Indicate whether each salesperson met their quota for every year (YES if sales \u2265 quota, NO otherwise). */\nSELECT sp.name ,\n       sq.year ,\n       CASE WHEN COALESCE(total_sales,0) >= sq.quota_amount THEN 'YES'\n            ELSE 'NO'\n       END AS met_quota\nFROM   sales_person AS sp\nJOIN   sales_quota  AS sq ON sq.salesperson_id = sp.id\nLEFT  JOIN (\n            SELECT o.salesperson_id ,\n                   strftime('%Y', o.order_date) AS year ,\n                   SUM(o.amount) AS total_sales\n            FROM   orders AS o\n            GROUP  BY o.salesperson_id , year\n          ) AS yr_sales\n          ON yr_sales.salesperson_id = sp.id\n         AND yr_sales.year           = sq.year\nORDER  BY sp.name , sq.year ;\n\n/* Answer the following: How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "n_examples": 9,
            "db_id": "AdventureWorks"
        },
        {
            "question": "Could you provide a list of last names for all students who have completed English courses, including their quintile ranks based on their individual grades in those courses (without averaging), where the quintiles are determined by ranking students according to the number of students who have grades greater than or equal to theirs, and sorted from the highest to the lowest grade quintile?",
            "evidence": "",
            "raw_question": "Could you provide a list of last names for all students who have completed English courses, including their quintile ranks based on their individual grades in those courses (without averaging), where the quintiles are determined by ranking students according to the number of students who have grades greater than or equal to theirs, and sorted from the highest to the lowest grade quintile?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which director has made the single longest movie and what is that movie\u2019s duration? */\nSELECT d.director_id,\n       d.name,\n       m.title,\n       m.duration\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nORDER BY m.duration DESC\nLIMIT 1;\n\n/* Answer the following: List the three directors with the highest average movie rating (minimum five movies each). */\nSELECT d.director_id,\n       d.name,\n       ROUND(AVG(m.rating),2) AS avg_rating,\n       COUNT(*)              AS movie_count\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nGROUP BY d.director_id, d.name\nHAVING COUNT(*) >= 5\nORDER BY avg_rating DESC\nLIMIT 3;\n\n/* Answer the following: How many movies did each director release in 2015?  Show directors who released at least one. */\nSELECT d.director_id,\n       d.name,\n       COUNT(*) AS movies_2015\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nWHERE YEAR(m.release_date) = 2015\nGROUP BY d.director_id, d.name;\n\n/* Answer the following: Give the total number of votes received by all movies of \u201cSteven Spielberg\u201d. */\nSELECT SUM(m.votes) AS total_votes\nFROM movies AS m\nJOIN directors AS d ON d.director_id = m.director_id\nWHERE d.name = 'Steven Spielberg';\n\n/* Answer the following: What is the average running time of movies released between 2000 and 2009 (inclusive)? */\nSELECT ROUND(AVG(duration)) AS avg_runtime\nFROM movies\nWHERE YEAR(release_date) BETWEEN 2000 AND 2009;\n\n/* Answer the following: Which five movies have the highest ratio of votes to duration (votes per minute)? */\nSELECT title,\n       votes,\n       duration,\n       ROUND(votes * 1.0 / duration,2) AS votes_per_min\nFROM movies\nWHERE duration > 0\nORDER BY votes_per_min DESC\nLIMIT 5;\n\n/* Answer the following: For each director, what is the gap in years between their first and last released movies? */\nSELECT d.director_id,\n       d.name,\n       MAX(YEAR(m.release_date)) - MIN(YEAR(m.release_date)) AS career_span_years\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nGROUP BY d.director_id, d.name;\n\n/* Answer the following: Find the ten movies with ratings below the director\u2019s own average rating. */\nSELECT m.movie_id,\n       m.title,\n       m.rating,\n       ROUND(avg_dir.avg_rating,2) AS director_avg\nFROM movies AS m\nJOIN (\n       SELECT director_id, AVG(rating) AS avg_rating\n       FROM movies\n       GROUP BY director_id\n     ) AS avg_dir\n     ON avg_dir.director_id = m.director_id\nWHERE m.rating < avg_dir.avg_rating\nORDER BY m.rating ASC\nLIMIT 10;\n\n/* Answer the following: Show the total running time, total votes, and average rating of all movies that have \u201cBatman\u201d in their title. */\nSELECT SUM(duration)              AS total_runtime,\n       SUM(votes)                 AS total_votes,\n       ROUND(AVG(rating),2)       AS avg_rating\nFROM movies\nWHERE title LIKE '%Batman%';\n\n/* Answer the following: Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "n_examples": 9,
            "db_id": "imdb_movies"
        },
        {
            "question": "Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "evidence": "",
            "raw_question": "Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the total dollar amount spent on Bitcoin purchases in 2022 for every region? */\nSELECT region ,\n       SUM(amount_usd) AS total_spent_2022\nFROM   bitcoin_purchases\nWHERE  EXTRACT (YEAR FROM purchase_date) = 2022\nGROUP  BY region ;\n\n/* Answer the following: Which three regions paid the highest average price per Bitcoin in 2023, considering only transactions of at least 10 BTC? */\nSELECT region ,\n       AVG(amount_usd / quantity) AS avg_price_2023\nFROM   bitcoin_purchases\nWHERE  EXTRACT (YEAR FROM purchase_date) = 2023\n  AND  quantity >= 10\nGROUP  BY region\nORDER  BY avg_price_2023 DESC\nLIMIT 3 ;\n\n/* Answer the following: In which year was the worldwide quantity of Bitcoin purchased the greatest, and how many coins were bought? */\nSELECT year,\n       total_quantity\nFROM   (\n        SELECT EXTRACT (YEAR FROM purchase_date) AS year ,\n               SUM(quantity)                    AS total_quantity ,\n               RANK() OVER (ORDER BY SUM(quantity) DESC) AS rk\n        FROM   bitcoin_purchases\n        GROUP  BY EXTRACT (YEAR FROM purchase_date)\n       ) AS sub\nWHERE  rk = 1 ;\n\n/* Answer the following: For every region, what was the percentage change in total Bitcoin quantity purchased from 2021 to 2022? */\nWITH qty AS (\n     SELECT region ,\n            EXTRACT (YEAR FROM purchase_date) AS yr ,\n            SUM(quantity)                     AS qty_btc\n     FROM   bitcoin_purchases\n     WHERE  EXTRACT (YEAR FROM purchase_date) IN (2021, 2022)\n     GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n)\nSELECT q22.region ,\n       ROUND( (q22.qty_btc - q21.qty_btc) * 100.0 / q21.qty_btc , 2) AS pct_change_qty\nFROM   qty AS q21\nJOIN   qty AS q22\n  ON   q21.region = q22.region\n WHERE  q21.yr = 2021\n   AND  q22.yr = 2022 ;\n\n/* Answer the following: For each year, which region obtained the lowest average purchase price per Bitcoin and what was that price? */\nWITH avg_price AS (\n     SELECT region ,\n            EXTRACT (YEAR FROM purchase_date) AS yr ,\n            AVG(amount_usd / quantity)        AS avg_price\n     FROM   bitcoin_purchases\n     GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n)\nSELECT yr ,\n       region ,\n       avg_price\nFROM   (\n        SELECT yr ,\n               region ,\n               avg_price ,\n               RANK() OVER (PARTITION BY yr ORDER BY avg_price ASC) AS rk\n        FROM   avg_price\n       ) AS ranked\nWHERE  rk = 1 ;\n\n/* Answer the following: Show the running (cumulative) total dollar amount spent on Bitcoin for every region up to and including each year. */\nSELECT region ,\n       yr ,\n       SUM(yearly_spend) OVER (PARTITION BY region ORDER BY yr) AS cumulative_spend\nFROM   (\n        SELECT region ,\n               EXTRACT (YEAR FROM purchase_date)         AS yr ,\n               SUM(amount_usd)                           AS yearly_spend\n        FROM   bitcoin_purchases\n        GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n       ) AS t\nORDER  BY region , yr ;\n\n/* Answer the following: How many individual purchase transactions had an effective price greater than 60,000 USD per Bitcoin? */\nSELECT COUNT(*) AS costly_trades\nFROM   bitcoin_purchases\nWHERE  amount_usd / quantity > 60000 ;\n\n/* Answer the following: What was the median purchase price per Bitcoin for North America in 2022? */\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY amount_usd / quantity) AS median_price\nFROM   bitcoin_purchases\nWHERE  region = 'North America'\n  AND  EXTRACT (YEAR FROM purchase_date) = 2022 ;\n\n/* Answer the following: For each region and year, rank the average purchase price per Bitcoin against other regions for that same year and show the deviation from the global yearly average price. */\nWITH region_avg AS (\n     SELECT region ,\n            EXTRACT (YEAR FROM purchase_date) AS yr ,\n            AVG(amount_usd / quantity)        AS avg_price\n     FROM   bitcoin_purchases\n     GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n),\nglobal_avg AS (\n     SELECT yr ,\n            AVG(avg_price) AS global_avg_price\n     FROM   region_avg\n     GROUP  BY yr\n)\nSELECT ra.yr ,\n       ra.region ,\n       ra.avg_price ,\n       RANK() OVER (PARTITION BY ra.yr ORDER BY ra.avg_price DESC)  AS price_rank ,\n       ROUND(ra.avg_price - ga.global_avg_price , 2)               AS diff_from_global\nFROM   region_avg AS ra\nJOIN   global_avg AS ga\n  ON   ra.yr = ga.yr\nORDER  BY ra.yr , price_rank ;\n\n/* Answer the following: Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Given a database of musical styles and user preferences, where each user ranks up to three preferred styles as their first, second, and third choices, assign 3 points for each first-choice ranking, 2 points for each second-choice ranking, and 1 point for each third-choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.",
            "evidence": "",
            "raw_question": "Given a database of musical styles and user preferences, where each user ranks up to three preferred styles as their first, second, and third choices, assign 3 points for each first-choice ranking, 2 points for each second-choice ranking, and 1 point for each third-choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For every ticker, what was the average daily trading volume (after converting values that end with \u201cK\u201d, \u201cM\u201d, or \u201cB\u201d and treating \u201c-\u201d as zero) during September 2021?  List the tickers with the highest average volumes first. */\nSELECT ticker,\n       AVG(adj_volume) AS avg_volume\nFROM (\n    SELECT ticker,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE date BETWEEN '2021-09-01' AND '2021-09-30'\n) AS v\nWHERE adj_volume > 0\nGROUP BY ticker\nORDER BY avg_volume DESC;\n\n/* Answer the following: On which date in 2021 did BTC register its single-day highest trading volume (after normalizing \u201cK\u201d, \u201cM\u201d, \u201cB\u201d, and \u201c-\u201d)? */\nSELECT date\nFROM (\n    SELECT date,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE ticker = 'BTC' AND date BETWEEN '2021-01-01' AND '2021-12-31'\n) AS v\nORDER BY adj_volume DESC\nLIMIT 1;\n\n/* Answer the following: Show the daily percentage change in closing price for ETH from May 10 2021 through May 15 2021. */\nSELECT date,\n       ROUND( (close - LAG(close) OVER (ORDER BY date)) * 100.0 / LAG(close) OVER (ORDER BY date), 2 ) AS pct_change\nFROM bitcoin_prices\nWHERE ticker = 'ETH' AND date BETWEEN '2021-05-10' AND '2021-05-15'\nORDER BY date;\n\n/* Answer the following: What was the total trading volume for XRP during the first week of July 2021 (after converting \u201cK\u201d, \u201cM\u201d, \u201cB\u201d, and treating \u201c-\u201d as zero and ignoring the zeros)? */\nSELECT SUM(adj_volume) AS total_volume\nFROM (\n    SELECT CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE ticker = 'XRP' AND date BETWEEN '2021-07-01' AND '2021-07-07'\n) AS v\nWHERE adj_volume > 0;\n\n/* Answer the following: Which tickers recorded at least one closing price above 50,000 USD during April 2021? */\nSELECT DISTINCT ticker\nFROM bitcoin_prices\nWHERE date BETWEEN '2021-04-01' AND '2021-04-30'\n  AND close > 50000;\n\n/* Answer the following: Provide the 7-day moving average of the closing price for BTC for each day from August 7 2021 to August 14 2021 (inclusive). */\nSELECT date,\n       ROUND(AVG(close) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW), 2) AS ma_7d_close\nFROM bitcoin_prices\nWHERE ticker = 'BTC'\n  AND date BETWEEN '2021-08-07' AND '2021-08-14'\nORDER BY date;\n\n/* Answer the following: During 2021, on which date did DOGE experience its largest single-day percentage increase in trading volume (relative to the previous non-zero volume day, after normalizing the volume field)? */\nWITH vols AS (\n    SELECT date,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS vol\n    FROM bitcoin_prices\n    WHERE ticker = 'DOGE' AND date BETWEEN '2021-01-01' AND '2021-12-31'\n), cte AS (\n    SELECT date,\n           vol,\n           LAG(vol) OVER (ORDER BY date) AS prev_vol\n    FROM vols\n    WHERE vol > 0\n)\nSELECT date\nFROM cte\nWHERE prev_vol > 0\nORDER BY (vol - prev_vol) * 100.0 / prev_vol DESC\nLIMIT 1;\n\n/* Answer the following: For each ticker on January 1 2021, what was the ratio of market capitalization to trading volume after converting the volume field? */\nSELECT ticker,\n       ROUND(market_cap / NULLIF(adj_volume, 0), 2) AS mc_to_volume\nFROM (\n    SELECT ticker,\n           market_cap,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE date = '2021-01-01'\n);\n\n/* Answer the following: Give the average closing price for every ticker for the first quarter (Q1) of 2021. */\nSELECT ticker,\n       AVG(close) AS avg_close_q1_2021\nFROM bitcoin_prices\nWHERE date BETWEEN '2021-01-01' AND '2021-03-31'\nGROUP BY ticker;\n\n/* Answer the following: Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "evidence": "",
            "raw_question": "Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which departments have the highest budget and what are their budgets? */\nSELECT name, budget\nFROM department\nWHERE budget = (SELECT MAX(budget) FROM department);\n\n/* Answer the following: List the names of students who took more than three different courses in the Spring semester of 2010. */\nSELECT s.name\nFROM student AS s\nJOIN takes  AS t ON s.id = t.id\nWHERE t.semester = 'Spring' AND t.year = 2010\nGROUP BY s.id, s.name\nHAVING COUNT(DISTINCT t.course_id) > 3;\n\n/* Answer the following: What is the average salary of instructors in each department?  Provide the department name together with the average salary. */\nSELECT d.name, AVG(i.salary) AS avg_salary\nFROM instructor AS i\nJOIN department AS d ON i.dept_id = d.id\nGROUP BY d.name;\n\n/* Answer the following: Which classrooms have never been scheduled for any section?  Return building and room number. */\nSELECT c.building, c.room_number\nFROM classroom AS c\nLEFT JOIN section AS s\n       ON c.building = s.building\n      AND c.room_number = s.room_number\nWHERE s.course_id IS NULL;\n\n/* Answer the following: Find the course or courses that serve as prerequisites for the greatest number of other courses.  Return the course id and name. */\nSELECT p.prereq_id, c.name\nFROM prereq AS p\nJOIN course AS c ON p.prereq_id = c.course_id\nGROUP BY p.prereq_id, c.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which students share the exact same name as at least one instructor?  List the distinct names. */\nSELECT DISTINCT s.name\nFROM student    AS s\nJOIN instructor AS i ON s.name = i.name;\n\n/* Answer the following: For each department, how many distinct courses are offered and what is the total number of credits across those courses? */\nSELECT d.name,\n       COUNT(DISTINCT c.course_id) AS course_count,\n       SUM(c.credits)              AS total_credits\nFROM department AS d\nLEFT JOIN course AS c ON d.id = c.dept_id\nGROUP BY d.name;\n\n/* Answer the following: Which instructors teach every course that is offered by their own department?  List their names. */\nSELECT i.name\nFROM instructor AS i\nWHERE NOT EXISTS (\n        SELECT *\n        FROM course AS c\n        WHERE c.dept_id = i.dept_id\n          AND NOT EXISTS (\n                SELECT *\n                FROM teaches AS t\n                WHERE t.id = i.id\n                  AND t.course_id = c.course_id\n          )\n);\n\n/* Answer the following: What is the maximum classroom capacity available in the building that hosts the most sections overall? */\nSELECT MAX(c.capacity)\nFROM classroom AS c\nWHERE c.building = (\n    SELECT s.building\n    FROM section AS s\n    GROUP BY s.building\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);\n\n/* Answer the following: Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "n_examples": 9,
            "db_id": "education_business"
        },
        {
            "question": "How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "evidence": "",
            "raw_question": "How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of female legislators who ever served on December 31, 1999? served on December 31, 1999 refers to start_date <= '1999-12-31' AND end_date >= '1999-12-31'; female refers to gender = 'F'; */\nSELECT COUNT(DISTINCT L.legislator_id)\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.start_date <= '1999-12-31'\n  AND T.end_date   >= '1999-12-31';\n\n/* Answer the following: List the abbreviations of the three states with the largest number of first-time female legislators. first-time female legislators refers to gender = 'F' and term_number = 1; */\nSELECT first_state\nFROM legislators\nWHERE gender = 'F' AND term_number = 1\nGROUP BY first_state\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For each party, how many female legislators had at least one term that included December 31, 2010? included December 31, 2010 refers to start_date <= '2010-12-31' AND end_date >= '2010-12-31'; */\nSELECT L.party, COUNT(DISTINCT L.legislator_id) AS female_count\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.start_date <= '2010-12-31'\n  AND T.end_date   >= '2010-12-31'\nGROUP BY L.party;\n\n/* Answer the following: Which state has the greatest average length in days of the first term served by female legislators, and what is that average length? first term refers to term_number = 1; */\nSELECT L.first_state,\n       AVG(JULIANDAY(T.end_date) - JULIANDAY(T.start_date)) AS avg_days\nFROM legislators AS L\nJOIN terms AS T\n  ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F' AND T.term_number = 1\nGROUP BY L.first_state\nORDER BY avg_days DESC\nLIMIT 1;\n\n/* Answer the following: How many female legislators first represented Texas (TX) and had at least one term that overlapped with Christmas Day (December 25) of any year? overlap with Christmas Day means MONTH(T.start_date) < 12 OR (MONTH =12 and DAY <=25) and MONTH(T.end_date) >12 OR (MONTH=12 and DAY>=25).  Simpler: DAY-MONTH string '12-25' lies between start_date and end_date for any year; */\nSELECT COUNT(DISTINCT L.legislator_id)\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND L.first_state = 'TX'\n  AND STRFTIME('%m-%d', T.start_date) <= '12-25'\n  AND STRFTIME('%m-%d', T.end_date)   >= '12-25';\n\n/* Answer the following: Retrieve the names of all living female legislators (gender = 'F' AND death_date IS NULL) whose first_state is New York (NY). */\nSELECT L.name\nFROM legislators AS L\nWHERE L.gender = 'F'\n  AND L.death_date IS NULL\n  AND L.first_state = 'NY';\n\n/* Answer the following: Between 1980 and 2000 inclusive, how many distinct female legislators began their first term in California (CA)? first term start_year BETWEEN 1980 AND 2000 refers to term_number = 1 AND STRFTIME('%Y', start_date) BETWEEN '1980' AND '2000'; */\nSELECT COUNT(DISTINCT L.legislator_id)\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND L.first_state = 'CA'\n  AND T.term_number = 1\n  AND CAST(STRFTIME('%Y', T.start_date) AS INT) BETWEEN 1980 AND 2000;\n\n/* Answer the following: What is the total number of days that female legislator \u2018Barbara Smith\u2019 served in office across all her terms? female refers to gender = 'F'; */\nSELECT SUM(JULIANDAY(end_date) - JULIANDAY(start_date)) AS total_service_days\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.name = 'Barbara Smith' AND L.gender = 'F';\n\n/* Answer the following: Which five states have the fewest female legislators whose first terms started after 2015, and what are those counts? */\nSELECT L.first_state,\n       COUNT(DISTINCT L.legislator_id) AS female_count\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.term_number = 1\n  AND T.start_date >= '2015-01-01'\nGROUP BY L.first_state\nORDER BY female_count ASC\nLIMIT 5;\n\n/* Answer the following: Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "evidence": "",
            "raw_question": "Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of remote job postings for the title 'Data Scientist' that report an annual average salary greater than 120000? remote refers to location_type = 'Remote'; annual average salary refers to salary_avg_annual */\nSELECT COUNT(*) \nFROM job_postings \nWHERE title = 'Data Scientist' \n  AND location_type = 'Remote' \n  AND salary_avg_annual > 120000;\n\n/* Answer the following: List the three most frequently required skills for 'Data Analyst' positions, ordered from most to least in demand. 'Data Analyst' refers to title = 'Data Analyst'. */\nSELECT s.name\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.title = 'Data Analyst'\nGROUP BY s.name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: Among on-site 'Business Analyst' postings with non-null salary, what is the minimum annual average salary? on-site refers to location_type = 'On-site'; non-null salary refers to salary_avg_annual IS NOT NULL. */\nSELECT MIN(salary_avg_annual)\nFROM job_postings\nWHERE title = 'Business Analyst'\n  AND location_type = 'On-site'\n  AND salary_avg_annual IS NOT NULL;\n\n/* Answer the following: How many unique skills are required across all remote postings that offer a salary greater than the average salary of all remote postings? remote refers to location_type = 'Remote'; salary refers to salary_avg_annual. */\nSELECT COUNT(DISTINCT s.name)\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.location_type = 'Remote'\n  AND jp.salary_avg_annual > (\n        SELECT AVG(salary_avg_annual)\n        FROM job_postings\n        WHERE location_type = 'Remote'\n     );\n\n/* Answer the following: For each employment type, what is the average annual salary of 'Data Engineer' postings that specify a salary? employment type refers to employment_type; salary specified refers to salary_avg_annual IS NOT NULL. */\nSELECT employment_type,\n       AVG(salary_avg_annual) AS avg_salary\nFROM job_postings\nWHERE title = 'Data Engineer'\n  AND salary_avg_annual IS NOT NULL\nGROUP BY employment_type;\n\n/* Answer the following: Which skill appears in the highest number of remote 'Data Analyst' postings that have a non-null salary? remote refers to location_type = 'Remote'; non-null salary refers to salary_avg_annual IS NOT NULL. */\nSELECT s.name\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.title = 'Data Analyst'\n  AND jp.location_type = 'Remote'\n  AND jp.salary_avg_annual IS NOT NULL\nGROUP BY s.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What percentage of all 'Data Analyst' postings are remote? remote refers to location_type = 'Remote'. */\nSELECT 100.0 * SUM(CASE WHEN location_type = 'Remote' THEN 1 ELSE 0 END) / COUNT(*) AS pct_remote\nFROM job_postings\nWHERE title = 'Data Analyst';\n\n/* Answer the following: Identify the job posting id of the remote 'Data Scientist' position with the highest salary and list all skills required for it. remote refers to location_type = 'Remote'; salary refers to salary_avg_annual. */\nSELECT js.job_id,\n       s.name\nFROM job_postings  AS jp\nJOIN job_skills    AS js ON jp.id = js.job_id\nJOIN skills        AS s  ON s.id  = js.skill_id\nWHERE jp.title = 'Data Scientist'\n  AND jp.location_type = 'Remote'\n  AND jp.salary_avg_annual = (\n        SELECT MAX(salary_avg_annual)\n        FROM job_postings\n        WHERE title = 'Data Scientist'\n          AND location_type = 'Remote'\n      );\n\n/* Answer the following: On average, how many skills are listed per 'Data Analyst' posting that offers an annual average salary above 100000? salary refers to salary_avg_annual. */\nSELECT AVG(skill_cnt) AS avg_skills_per_posting\nFROM (\n     SELECT jp.id,\n            COUNT(js.skill_id) AS skill_cnt\n     FROM job_postings AS jp\n     LEFT JOIN job_skills AS js ON jp.id = js.job_id\n     WHERE jp.title = 'Data Analyst'\n       AND jp.salary_avg_annual > 100000\n     GROUP BY jp.id\n) AS sub;\n\n/* Answer the following: Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "evidence": "",
            "raw_question": "Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: List the names of all legislators who have served more than 30 consecutive years in office. */\nSELECT name\nFROM legislators\nWHERE (CAST(strftime('%Y', last_term_end) AS INTEGER) - CAST(strftime('%Y', first_term_start) AS INTEGER)) > 30;\n\n/* Answer the following: How many bills were sponsored by female legislators during calendar year 2020? */\nSELECT COUNT(*)\nFROM bills AS b\nJOIN legislators AS l\n  ON b.sponsor_id = l.legislator_id\nWHERE l.gender = 'F'\n  AND b.introduced_date BETWEEN '2020-01-01' AND '2020-12-31';\n\n/* Answer the following: What is the average age at which Democratic legislators first took office?  (Age is measured as the difference, in years, between birth date and first term start.) */\nSELECT AVG(\n         CAST(strftime('%Y', first_term_start) AS INTEGER) -\n         CAST(strftime('%Y', birth_date)        AS INTEGER)\n       ) AS avg_age_at_first_office\nFROM legislators\nWHERE party = 'Democrat';\n\n/* Answer the following: Which committee held the greatest number of meetings in 2015? */\nSELECT c.name\nFROM committees AS c\nJOIN committee_meetings AS m\n  ON c.committee_id = m.committee_id\nWHERE m.meeting_date BETWEEN '2015-01-01' AND '2015-12-31'\nGROUP BY c.committee_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many different states are represented by legislators who are currently in office? */\nSELECT COUNT(DISTINCT t.state)\nFROM terms AS t\nWHERE t.term_end IS NULL\n   OR t.term_end > DATE('now');\n\n/* Answer the following: Give the names of the five legislators who cast the most votes in the 116th Congress. */\nSELECT l.name\nFROM votes AS v\nJOIN legislators AS l\n  ON v.legislator_id = l.legislator_id\nWHERE v.congress = 116\nGROUP BY v.legislator_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: Among bills that originated in the House and were introduced between 2000 and 2010, what percentage subsequently passed the Senate? */\nSELECT ROUND(\n         100.0 * SUM(CASE WHEN passed_senate = 1 THEN 1 ELSE 0 END) / COUNT(*),\n         2\n       ) AS pct_house_bills_passing_senate\nFROM bills\nWHERE origin = 'House'\n  AND introduced_date BETWEEN '2000-01-01' AND '2010-12-31';\n\n/* Answer the following: What is the median number of co-sponsors per bill in the 114th Congress? */\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY co_cnt) AS median_cosponsors\nFROM (\n        SELECT b.bill_id,\n               COUNT(c.legislator_id) AS co_cnt\n        FROM bills AS b\n        LEFT JOIN cosponsors AS c\n          ON b.bill_id = c.bill_id\n        WHERE b.congress = 114\n        GROUP BY b.bill_id\n     ) AS sub;\n\n/* Answer the following: Which year experienced the highest turnover rate, defined as the ratio of first-time legislators entering office that year to the total number of seats occupied during that same year? */\nWITH years AS (\n       SELECT DISTINCT CAST(strftime('%Y', term_start) AS INTEGER) AS yr\n       FROM terms\n     ),\nnewcomers AS (\n       SELECT CAST(strftime('%Y', first_term_start) AS INTEGER) AS yr,\n              COUNT(*) AS new_cnt\n       FROM legislators\n       GROUP BY yr\n     ),\nactive AS (\n       SELECT y.yr,\n              COUNT(DISTINCT t.legislator_id) AS total_cnt\n       FROM years AS y\n       JOIN terms AS t\n         ON CAST(strftime('%Y', t.term_start) AS INTEGER) <= y.yr\n        AND (t.term_end IS NULL\n             OR CAST(strftime('%Y', t.term_end) AS INTEGER) >= y.yr)\n       GROUP BY y.yr\n     )\nSELECT a.yr\nFROM active AS a\nJOIN newcomers AS n\n  ON a.yr = n.yr\nORDER BY (CAST(n.new_cnt AS FLOAT) / a.total_cnt) DESC\nLIMIT 1;\n\n/* Answer the following: What is the annual retention rate of legislators who began their first term between January 1, 1917 and December 31, 1999, measured as the proportion of this cohort still in office on December 31st for each of the first 20 years following their initial term start? The results should show all 20 periods in sequence regardless of whether any legislators were retained in a particular year.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "evidence": "",
            "raw_question": "Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which state abbreviations show a non-zero male legislator retention rate exactly two years after the first-term start date?  A legislator is counted as \u201cretained\u201d if he is in office on December 31 two years after his own first-term start. */\nSELECT DISTINCT L.state_abbrev\nFROM Legislators AS L\nWHERE L.gender = 'M'\n  AND EXISTS (\n        SELECT 1\n        FROM Service_Periods AS S\n        WHERE S.leg_id = L.leg_id\n          AND S.service_start_date <= DATE(L.first_term_start_date, '+2 years')\n          AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+2 years')\n      );\n\n/* Answer the following:  For every state, what is the female retention rate four years after first-term entry ( retained_f / initial_f ) ? */\nSELECT\n    L.state_abbrev,\n    SUM(\n        CASE\n            WHEN S.service_start_date <= DATE(L.first_term_start_date, '+4 years')\n             AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+4 years')\n            THEN 1 ELSE 0\n        END\n    )::FLOAT\n    / COUNT(*)    AS retention_rate_year4\nFROM Legislators AS L\nLEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\nWHERE L.gender = 'F'\nGROUP BY L.state_abbrev;\n\n/* Answer the following:  Which state has the largest absolute gap between male and female retention rates at the six-year checkpoint? */\nWITH six AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        COUNT(*)                                 AS initial_cnt,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+6 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+6 years')\n                THEN 1 ELSE 0\n            END\n        )                                         AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT state_abbrev\nFROM (\n      SELECT\n          state_abbrev,\n          MAX(CASE WHEN gender='M' THEN retained_cnt::FLOAT/initial_cnt END)  AS male_rate,\n          MAX(CASE WHEN gender='F' THEN retained_cnt::FLOAT/initial_cnt END)  AS fem_rate\n      FROM six\n      GROUP BY state_abbrev\n) AS r\nORDER BY ABS(male_rate - fem_rate) DESC\nLIMIT 1;\n\n/* Answer the following:  How many states keep BOTH male and female retention above zero at the eight-year milestone? */\nWITH eight AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+8 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+8 years')\n                THEN 1 ELSE 0\n            END\n        ) AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT COUNT(*) \nFROM (\n      SELECT state_abbrev\n      FROM eight\n      GROUP BY state_abbrev\n      HAVING MIN(CASE WHEN gender='M' THEN retained_cnt END) > 0\n         AND MIN(CASE WHEN gender='F' THEN retained_cnt END) > 0\n) AS ok;\n\n/* Answer the following:  List the states where BOTH genders reach a zero retention rate by the ten-year checkpoint. */\nWITH ten AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+10 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+10 years')\n                THEN 1 ELSE 0\n            END\n        ) AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT state_abbrev\nFROM ten\nGROUP BY state_abbrev\nHAVING MAX(CASE WHEN gender='M' THEN retained_cnt END) = 0\n   AND MAX(CASE WHEN gender='F' THEN retained_cnt END) = 0;\n\n/* Answer the following:  Which California legislators served continuously from their first-day in office through the six-year mark? */\nSELECT DISTINCT L.leg_id\nFROM Legislators      AS L\nJOIN Service_Periods  AS S ON S.leg_id = L.leg_id\nWHERE L.state_abbrev = 'CA'\n  AND S.service_start_date <= L.first_term_start_date\n  AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+6 years');\n\n/* Answer the following:  Provide the average male retention rate four years in, split by chamber (House vs Senate). */\nWITH chk4 AS (\n    SELECT\n        L.chamber,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+4 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+4 years')\n                THEN 1 ELSE 0\n            END\n        ) AS retained_cnt,\n        COUNT(*) AS initial_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    WHERE L.gender = 'M'\n    GROUP BY L.chamber\n)\nSELECT chamber,\n       retained_cnt::FLOAT / initial_cnt AS avg_male_retention4\nFROM chk4;\n\n/* Answer the following:  What is the median total years of service for female legislators whose first term began between 2000-01-01 and 2010-12-31? */\nWITH spans AS (\n    SELECT\n        L.leg_id,\n        SUM( DATE_PART('year', COALESCE(S.service_end_date, CURRENT_DATE) - S.service_start_date) ) AS years_served\n    FROM Legislators AS L\n    JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    WHERE L.gender = 'F'\n      AND L.first_term_start_date BETWEEN '2000-01-01' AND '2010-12-31'\n    GROUP BY L.leg_id\n)\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY years_served) AS median_years_served\nFROM spans;\n\n/* Answer the following:  Identify the state abbreviations where BOTH male and female cohorts maintain non-zero retention at every checkpoint (0, 2, 4, 6, 8 and 10 years) during the first decade of service. */\nWITH tagged AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        -- year-0\n        MAX(\n            CASE\n                WHEN S.service_start_date <= L.first_term_start_date\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= L.first_term_start_date\n                THEN 1 ELSE 0\n            END\n        ) AS r0,\n        -- year-2\n        MAX(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+2 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+2 years')\n                THEN 1 ELSE 0\n            END\n        ) AS r2,\n        -- year-4\n        MAX(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+4 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+4 years')\n                THEN 1 ELSE 0\n            END\n        ) AS r4,\n        -- year-6\n        MAX(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+6 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+6 years')\n                THEN 1 ELSE 0\n            END\n        ) AS r6,\n        -- year-8\n        MAX(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+8 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+8 years')\n                THEN 1 ELSE 0\n            END\n        ) AS r8,\n        -- year-10\n        MAX(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+10 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+10 years')\n                THEN 1 ELSE 0\n            END\n        ) AS r10\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n),\nby_state AS (\n    SELECT\n        state_abbrev,\n        MIN(CASE WHEN gender='M' THEN r0 END)  AS m0,\n        MIN(CASE WHEN gender='M' THEN r2 END)  AS m2,\n        MIN(CASE WHEN gender='M' THEN r4 END)  AS m4,\n        MIN(CASE WHEN gender='M' THEN r6 END)  AS m6,\n        MIN(CASE WHEN gender='M' THEN r8 END)  AS m8,\n        MIN(CASE WHEN gender='M' THEN r10 END) AS m10,\n        MIN(CASE WHEN gender='F' THEN r0 END)  AS f0,\n        MIN(CASE WHEN gender='F' THEN r2 END)  AS f2,\n        MIN(CASE WHEN gender='F' THEN r4 END)  AS f4,\n        MIN(CASE WHEN gender='F' THEN r6 END)  AS f6,\n        MIN(CASE WHEN gender='F' THEN r8 END)  AS f8,\n        MIN(CASE WHEN gender='F' THEN r10 END) AS f10\n    FROM tagged\n    GROUP BY state_abbrev\n)\nSELECT state_abbrev\nFROM by_state\nWHERE m0>0 AND m2>0 AND m4>0 AND m6>0 AND m8>0 AND m10>0\n  AND f0>0 AND f2>0 AND f4>0 AND f6>0 AND f8>0 AND f10>0;\n\n/* Answer the following: Identify the state abbreviations where, for both male and female legislators, the retention rate remains greater than zero at specific intervals of 0, 2, 4, 6, 8, and 10 years after their first term start date. A legislator is considered retained if they are serving on December 31 of the respective year. Only include states where both gender cohorts maintain non-zero retention rates at all six of these time points during the first decade of service.",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "evidence": "",
            "raw_question": "Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many female legislators born after 1970 have ever represented Texas? */\nSELECT COUNT(DISTINCT L.id)\nFROM legislators AS L\nJOIN terms AS T ON L.id = T.legislator_id\nWHERE L.gender = 'F'\n  AND L.birthday > '1970-12-31'\n  AND T.state = 'TX';\n\n/* Answer the following: List the full names of legislators who have served both as a senator and as a representative. */\nSELECT DISTINCT L.first_name || ' ' || L.last_name\nFROM legislators AS L\nJOIN terms AS T1 ON L.id = T1.legislator_id\nJOIN terms AS T2 ON L.id = T2.legislator_id\nWHERE T1.type = 'sen'\n  AND T2.type = 'rep';\n\n/* Answer the following: For each state, in which year did a Green-party legislator first begin a term? */\nSELECT T.state,\n       MIN(strftime('%Y', T.start_date)) AS first_green_year\nFROM terms AS T\nWHERE T.party = 'Green'\nGROUP BY T.state;\n\n/* Answer the following: Which legislator has the single longest term in days and how long was it? */\nSELECT L.first_name || ' ' || L.last_name AS legislator,\n       MAX(julianday(T.end_date) - julianday(T.start_date)) AS longest_term_days\nFROM legislators AS L\nJOIN terms AS T ON L.id = T.legislator_id\nGROUP BY L.id\nORDER BY longest_term_days DESC\nLIMIT 1;\n\n/* Answer the following: On January 20, 1993, how many distinct legislators were serving in office? */\nSELECT COUNT(DISTINCT legislator_id)\nFROM terms\nWHERE start_date <= '1993-01-20'\n  AND end_date   >= '1993-01-20';\n\n/* Answer the following: Which five states have accumulated the highest total number of female senator-years? */\nSELECT T.state,\n       SUM((julianday(T.end_date) - julianday(T.start_date))/365.25) AS female_senator_years\nFROM terms AS T\nJOIN legislators AS L ON L.id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.type = 'sen'\nGROUP BY T.state\nORDER BY female_senator_years DESC\nLIMIT 5;\n\n/* Answer the following: How many legislators who began their careers before 1950 were still in office at any time during 1980? */\nSELECT COUNT(DISTINCT L.id)\nFROM legislators AS L\nJOIN terms AS FirstTerm ON L.id = FirstTerm.legislator_id\nWHERE FirstTerm.start_date = (\n          SELECT MIN(T2.start_date)\n          FROM terms AS T2\n          WHERE T2.legislator_id = L.id)\n  AND FirstTerm.start_date < '1950-01-01'\n  AND EXISTS (\n      SELECT 1\n      FROM terms AS Active80\n      WHERE Active80.legislator_id = L.id\n        AND Active80.start_date <= '1980-12-31'\n        AND Active80.end_date   >= '1980-12-31'\n  );\n\n/* Answer the following: For every decade since 1950, give the number of legislators whose first term started in that decade. */\nSELECT (CAST(strftime('%Y', first_start) AS INTEGER)/10)*10 AS decade,\n       COUNT(*) AS legislators_started\nFROM (\n     SELECT legislator_id,\n            MIN(start_date) AS first_start\n     FROM terms\n     GROUP BY legislator_id\n) AS Sub\nWHERE first_start >= '1950-01-01'\nGROUP BY decade\nORDER BY decade;\n\n/* Answer the following: Which party has the highest average term length for House members? */\nSELECT party,\n       AVG(julianday(end_date) - julianday(start_date)) AS avg_term_days\nFROM terms\nWHERE type = 'rep'\nGROUP BY party\nORDER BY avg_term_days DESC\nLIMIT 1;\n\n/* Answer the following: For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "evidence": "",
            "raw_question": "Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the total revenue generated during the Black Friday week (from 2022-11-21 00:00:00 through 2022-11-27 23:59:59)? */\nSELECT SUM(amount) AS black_friday_revenue\nFROM orders\nWHERE order_datetime >= '2022-11-21 00:00:00'\n  AND order_datetime <  '2022-11-28 00:00:00';\n\n\n/* Answer the following: Which customer has the highest lifetime sales (LTV) and what is that amount?  Lifetime sales refers to the sum of all order amounts for the customer. */\nSELECT customer_id ,\n       SUM(amount) AS lifetime_sales\nFROM orders\nGROUP BY customer_id\nORDER BY lifetime_sales DESC\nLIMIT 1;\n\n\n/* Answer the following: How many customers placed at least three orders within their first 14 days after signing up?  \u201cFirst 14 days\u201d means the first 14\u00d724 hours from signup_datetime. */\nSELECT COUNT(*)\nFROM (\n     SELECT o.customer_id\n     FROM orders  AS o\n     JOIN  customers AS c USING (customer_id)\n     WHERE o.order_datetime <= c.signup_datetime + INTERVAL '14 days'\n     GROUP BY o.customer_id\n     HAVING COUNT(o.order_id) >= 3\n) AS x;\n\n\n/* Answer the following: What percentage of total revenue comes from the mobile channel?  Mobile channel refers to channel = 'mobile'. */\nSELECT 100.0 * SUM(CASE WHEN channel = 'mobile' THEN amount ELSE 0 END)\n/               SUM(amount)            AS pct_mobile_revenue\nFROM orders;\n\n\n/* Answer the following: On which day of the week is the average order value highest?  Day-of-week is given by EXTRACT(DOW FROM order_datetime) where 0=Sunday. */\nSELECT EXTRACT(DOW FROM order_datetime) AS dow\nFROM   orders\nGROUP  BY dow\nORDER BY AVG(amount) DESC\nLIMIT 1;\n\n\n/* Answer the following: What is the average number of days between a customer\u2019s first and second purchase?  Consider only customers who have at least two orders. */\nWITH ranked AS (\n     SELECT customer_id,\n            order_datetime,\n            ROW_NUMBER() OVER (PARTITION BY customer_id\n                               ORDER BY order_datetime) AS rn\n     FROM orders\n),\nfirst_second AS (\n     SELECT customer_id,\n            MAX(CASE WHEN rn = 1 THEN order_datetime END) AS first_time,\n            MAX(CASE WHEN rn = 2 THEN order_datetime END) AS second_time\n     FROM ranked\n     WHERE rn <= 2\n     GROUP BY customer_id\n     HAVING COUNT(*) = 2\n)\nSELECT AVG( EXTRACT(EPOCH FROM (second_time - first_time)) / 86400.0 )\n       AS avg_days_between_first_two\nFROM first_second;\n\n\n/* Answer the following: List the top 5 products whose sales account for at least 1 % of total revenue. */\nSELECT p.product_name\nFROM   products AS p\nJOIN   orders   AS o ON o.product_id = p.product_id\nGROUP  BY p.product_id , p.product_name\nHAVING SUM(o.amount) >= 0.01 * (SELECT SUM(amount) FROM orders)\nORDER  BY SUM(o.amount) DESC\nLIMIT 5;\n\n\n/* Answer the following: Which month of 2022 has the highest ratio of repeat customers (customers with > 1 order in the month) to total ordering customers in that month?  Return the month number (1\u201312). */\nWITH orders_2022 AS (\n     SELECT customer_id,\n            order_datetime\n     FROM   orders\n     WHERE  order_datetime >= '2022-01-01'\n       AND  order_datetime <  '2023-01-01'\n),\ncust_month AS (\n     SELECT customer_id,\n            DATE_TRUNC('month', order_datetime) AS month_start,\n            COUNT(*)                          AS month_orders\n     FROM   orders_2022\n     GROUP  BY customer_id, month_start\n),\nmonthly_stats AS (\n     SELECT month_start,\n            COUNT(DISTINCT CASE WHEN month_orders > 1 THEN customer_id END)\n                AS repeat_customers,\n            COUNT(DISTINCT customer_id)        AS total_customers\n     FROM   cust_month\n     GROUP  BY month_start\n)\nSELECT EXTRACT(MONTH FROM month_start) AS month_number\nFROM   monthly_stats\nORDER  BY repeat_customers::DECIMAL / NULLIF(total_customers,0) DESC\nLIMIT 1;\n\n\n/* Answer the following: How many customers who made their last purchase in 2022 have not bought again for at least 180 days (measured up to 2023-07-01)? */\nWITH last_2022 AS (\n     SELECT customer_id,\n            MAX(order_datetime) AS last_purchase\n     FROM   orders\n     WHERE  order_datetime >= '2022-01-01'\n       AND  order_datetime <  '2023-01-01'\n     GROUP BY customer_id\n),\nfuture_orders AS (\n     SELECT DISTINCT o.customer_id\n     FROM   orders  AS o\n     JOIN   last_2022 AS l ON l.customer_id = o.customer_id\n     WHERE  o.order_datetime > l.last_purchase\n),\nchurned AS (\n     SELECT customer_id\n     FROM   last_2022\n     WHERE  customer_id NOT IN (SELECT customer_id FROM future_orders)\n       AND  '2023-07-01'::timestamp - last_purchase >= INTERVAL '180 days'\n)\nSELECT COUNT(*)\nFROM   churned;\n\n/* Answer the following: Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "evidence": "",
            "raw_question": "Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Provide the two highest-grossing films for each director, together with the average \u201cdirector share\u201d of revenue in those films (film revenue divided equally among that film\u2019s directors). */\nSELECT\n    D.name                     AS director_name,\n    F.title                    AS film_title,\n    F.revenue / C.cnt          AS director_share,\n    AVG(F.revenue / C.cnt) OVER (PARTITION BY D.id)\n                               AS avg_share_for_director\nFROM Director AS D\nJOIN Film_Director FD          ON FD.director_id = D.id\nJOIN Film F                    ON F.id           = FD.film_id\nJOIN ( SELECT film_id, COUNT(*) AS cnt\n       FROM Film_Director\n       GROUP BY film_id ) C    ON C.film_id      = F.id\nJOIN ( SELECT director_id,\n              film_id,\n              ROW_NUMBER() OVER (PARTITION BY director_id\n                                 ORDER BY revenue DESC) AS rn\n       FROM Film_Director\n       JOIN Film ON Film.id = Film_Director.film_id ) R\n                               ON R.director_id  = D.id\n                              AND R.film_id      = F.id\nWHERE R.rn <= 2;\n\n/* Answer the following: For every author, list the three best-selling books and the author\u2019s average share of copies sold across those books (copies sold divided by the number of authors of that book). */\nSELECT\n    A.name,\n    B.title,\n    B.copies_sold / CA.author_cnt            AS author_share,\n    AVG(B.copies_sold / CA.author_cnt)\n        OVER (PARTITION BY A.id)             AS avg_share_per_author\nFROM Author A\nJOIN Book_Author BA          ON BA.author_id = A.id\nJOIN Book B                  ON B.id        = BA.book_id\nJOIN ( SELECT book_id, COUNT(*) AS author_cnt\n       FROM Book_Author\n       GROUP BY book_id ) CA  ON CA.book_id  = B.id\nJOIN ( SELECT author_id,\n              book_id,\n              ROW_NUMBER() OVER (PARTITION BY author_id\n                                 ORDER BY copies_sold DESC) AS rk\n       FROM Book_Author\n       JOIN Book ON Book.id = Book_Author.book_id ) R\n                             ON R.author_id  = A.id\n                            AND R.book_id    = B.id\nWHERE R.rk <= 3;\n\n/* Answer the following: Show each instructor\u2019s two courses with the highest enrolment and the average enrolment-per-instructor share (enrolment divided by number of instructors teaching the course) for those courses. */\nSELECT\n    I.name,\n    C.course_name,\n    C.enrolled / CC.inst_cnt                 AS inst_share,\n    AVG(C.enrolled / CC.inst_cnt)\n        OVER (PARTITION BY I.id)             AS avg_inst_share\nFROM Instructor I\nJOIN Course_Instructor CI      ON CI.instr_id = I.id\nJOIN Course C                  ON C.id       = CI.course_id\nJOIN ( SELECT course_id, COUNT(*) AS inst_cnt\n       FROM Course_Instructor\n       GROUP BY course_id ) CC  ON CC.course_id = C.id\nJOIN ( SELECT instr_id, course_id,\n              ROW_NUMBER() OVER (PARTITION BY instr_id\n                                 ORDER BY enrolled DESC) AS rn\n       FROM Course_Instructor\n       JOIN Course ON Course.id = Course_Instructor.course_id ) R\n                                ON R.instr_id  = I.id\n                               AND R.course_id = C.id\nWHERE R.rn <= 2;\n\n/* Answer the following: List the top three prize-money tournaments for each athlete together with the average athlete share in those tournaments (prize money divided by the total athletes in the tournament). */\nSELECT\n    AT.name,\n    T.tournament_name,\n    T.prize_money / PC.part_cnt              AS athlete_share,\n    AVG(T.prize_money / PC.part_cnt)\n        OVER (PARTITION BY AT.id)            AS avg_share\nFROM Athlete AT\nJOIN Participation P          ON P.athlete_id = AT.id\nJOIN Tournament T             ON T.id         = P.tournament_id\nJOIN ( SELECT tournament_id, COUNT(*) AS part_cnt\n       FROM Participation\n       GROUP BY tournament_id ) PC\n                             ON PC.tournament_id = T.id\nJOIN ( SELECT athlete_id, tournament_id,\n              ROW_NUMBER() OVER (PARTITION BY athlete_id\n                                 ORDER BY prize_money DESC) AS rk\n       FROM Participation\n       JOIN Tournament\n         ON Tournament.id = Participation.tournament_id ) R\n                             ON R.athlete_id  = AT.id\n                            AND R.tournament_id = T.id\nWHERE R.rk <= 3;\n\n/* Answer the following: For each researcher, return the three most-cited papers and the average citation share per researcher (citations divided by authors of the paper) in those papers. */\nSELECT\n    R.name,\n    P.title,\n    P.citations / AC.auth_cnt               AS citation_share,\n    AVG(P.citations / AC.auth_cnt)\n        OVER (PARTITION BY R.id)            AS avg_citation_share\nFROM Researcher R\nJOIN Paper_Author PA        ON PA.researcher_id = R.id\nJOIN Paper P                ON P.id            = PA.paper_id\nJOIN ( SELECT paper_id, COUNT(*) AS auth_cnt\n       FROM Paper_Author\n       GROUP BY paper_id ) AC ON AC.paper_id   = P.id\nJOIN ( SELECT researcher_id, paper_id,\n              ROW_NUMBER() OVER (PARTITION BY researcher_id\n                                 ORDER BY citations DESC) AS rn\n       FROM Paper_Author\n       JOIN Paper ON Paper.id = Paper_Author.paper_id ) X\n                             ON X.researcher_id = R.id\n                            AND X.paper_id      = P.id\nWHERE X.rn <= 3;\n\n/* Answer the following: Give each musician\u2019s three most-streamed songs along with his/her average stream share (streams divided by number of credited musicians) for those songs. */\nSELECT\n    M.name,\n    S.title,\n    S.streams / MC.mus_cnt                  AS stream_share,\n    AVG(S.streams / MC.mus_cnt)\n        OVER (PARTITION BY M.id)           AS avg_stream_share\nFROM Musician M\nJOIN Song_Artist SA         ON SA.musician_id = M.id\nJOIN Song S                 ON S.id          = SA.song_id\nJOIN ( SELECT song_id, COUNT(*) AS mus_cnt\n       FROM Song_Artist\n       GROUP BY song_id ) MC ON MC.song_id   = S.id\nJOIN ( SELECT musician_id, song_id,\n              ROW_NUMBER() OVER (PARTITION BY musician_id\n                                 ORDER BY streams DESC) AS rk\n       FROM Song_Artist\n       JOIN Song ON Song.id = Song_Artist.song_id ) R\n                             ON R.musician_id = M.id\n                            AND R.song_id    = S.id\nWHERE R.rk <= 3;\n\n/* Answer the following: Show the top three deals for each salesperson ranked by deal value and compute the average deal-value share per salesperson (deal value divided by the number of salespeople on that deal). */\nSELECT\n    SP.name,\n    D.deal_name,\n    D.value / SD.sp_cnt                     AS sp_share,\n    AVG(D.value / SD.sp_cnt)\n        OVER (PARTITION BY SP.id)          AS avg_sp_share\nFROM Salesperson SP\nJOIN Deal_Assignee DA      ON DA.sp_id   = SP.id\nJOIN Deal D                ON D.id       = DA.deal_id\nJOIN ( SELECT deal_id, COUNT(*) AS sp_cnt\n       FROM Deal_Assignee\n       GROUP BY deal_id ) SD ON SD.deal_id = D.id\nJOIN ( SELECT sp_id, deal_id,\n              ROW_NUMBER() OVER (PARTITION BY sp_id\n                                 ORDER BY value DESC) AS rn\n       FROM Deal_Assignee\n       JOIN Deal ON Deal.id = Deal_Assignee.deal_id ) R\n                             ON R.sp_id   = SP.id\n                            AND R.deal_id = D.id\nWHERE R.rn <= 3;\n\n/* Answer the following: Retrieve each contractor\u2019s three highest-value projects and the contractor\u2019s average share of project value (project budget divided by contractors on the project) across them. */\nSELECT\n    C.name,\n    P.project_name,\n    P.budget / PC.cnt                       AS contractor_share,\n    AVG(P.budget / PC.cnt)\n        OVER (PARTITION BY C.id)           AS avg_budget_share\nFROM Contractor C\nJOIN Project_Contractor PCt ON PCt.contractor_id = C.id\nJOIN Project P              ON P.id             = PCt.project_id\nJOIN ( SELECT project_id, COUNT(*) AS cnt\n       FROM Project_Contractor\n       GROUP BY project_id ) PC\n                             ON PC.project_id   = P.id\nJOIN ( SELECT contractor_id, project_id,\n              ROW_NUMBER() OVER (PARTITION BY contractor_id\n                                 ORDER BY budget DESC) AS rnk\n       FROM Project_Contractor\n       JOIN Project ON Project.id = Project_Contractor.project_id ) R\n                             ON R.contractor_id = C.id\n                            AND R.project_id    = P.id\nWHERE R.rnk <= 3;\n\n/* Answer the following: For each photographer, list the three photo sales with the highest price and show the average price share he/she earned (price divided by number of photographers credited) on those sales. */\nSELECT\n    Pht.name,\n    PS.photo_title,\n    PS.price / CP.cnt                       AS price_share,\n    AVG(PS.price / CP.cnt)\n        OVER (PARTITION BY Pht.id)         AS avg_price_share\nFROM Photographer Pht\nJOIN PhotoPhotographer PP   ON PP.photographer_id = Pht.id\nJOIN PhotoSale PS           ON PS.id             = PP.photo_id\nJOIN ( SELECT photo_id, COUNT(*) AS cnt\n       FROM PhotoPhotographer\n       GROUP BY photo_id ) CP\n                             ON CP.photo_id = PS.id\nJOIN ( SELECT photographer_id, photo_id,\n              ROW_NUMBER() OVER (PARTITION BY photographer_id\n                                 ORDER BY price DESC) AS rn\n       FROM PhotoPhotographer\n       JOIN PhotoSale ON PhotoSale.id = PhotoPhotographer.photo_id ) R\n                             ON R.photographer_id = Pht.id\n                            AND R.photo_id        = PS.id\nWHERE R.rn <= 3;\n\n/* Answer the following: Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "What is the proportion of legislators who started their first term between 1917 and 1999 that remained in office on December 31st of each year, tracked annually for up to 20 years following their initial term start?",
            "evidence": "",
            "raw_question": "What is the proportion of legislators who started their first term between 1917 and 1999 that remained in office on December 31st of each year, tracked annually for up to 20 years following their initial term start?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which five actors\u2019 films have been rented the most? */\nSELECT CONCAT(a.first_name, ' ', a.last_name) AS actor_name\nFROM actor AS a\nJOIN film_actor     AS fa ON a.actor_id = fa.actor_id\nJOIN inventory      AS i  ON fa.film_id  = i.film_id\nJOIN rental         AS r  ON i.inventory_id = r.inventory_id\nGROUP BY a.actor_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: How many customers have never rented a film? */\nSELECT COUNT(*)\nFROM customer AS c\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM rental AS r\n    WHERE r.customer_id = c.customer_id\n);\n\n/* Answer the following: List the top three film categories by number of rentals in 2006. */\nSELECT c.name,\n       COUNT(*) AS rental_count\nFROM category       AS c\nJOIN film_category  AS fc ON c.category_id = fc.category_id\nJOIN inventory      AS i  ON fc.film_id    = i.film_id\nJOIN rental         AS r  ON i.inventory_id = r.inventory_id\nWHERE r.rental_date BETWEEN '2006-01-01' AND '2006-12-31'\nGROUP BY c.category_id\nORDER BY rental_count DESC\nLIMIT 3;\n\n/* Answer the following: What is the average rental duration (in days) for films longer than 120 minutes? */\nSELECT AVG(f.rental_duration)\nFROM film AS f\nWHERE f.length > 120;\n\n/* Answer the following: Which staff member processed the most payments in February 2006? */\nSELECT CONCAT(s.first_name, ' ', s.last_name) AS staff_name\nFROM staff   AS s\nJOIN payment AS p ON s.staff_id = p.staff_id\nWHERE p.payment_date BETWEEN '2006-02-01' AND '2006-02-28'\nGROUP BY s.staff_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which city has the highest number of customers? */\nSELECT ci.city,\n       COUNT(*) AS customer_count\nFROM city    AS ci\nJOIN address AS a  ON ci.city_id   = a.city_id\nJOIN customer AS c ON a.address_id = c.address_id\nGROUP BY ci.city_id\nORDER BY customer_count DESC\nLIMIT 1;\n\n/* Answer the following: What is the total amount paid by customer 'John Smith'? */\nSELECT SUM(p.amount)\nFROM customer AS c\nJOIN payment  AS p ON c.customer_id = p.customer_id\nWHERE c.first_name = 'JOHN'\n  AND c.last_name  = 'SMITH';\n\n/* Answer the following: How many films have never been rented? */\nSELECT COUNT(*)\nFROM film AS f\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM inventory AS i\n    JOIN rental   AS r ON i.inventory_id = r.inventory_id\n    WHERE i.film_id = f.film_id\n);\n\n/* Answer the following: Which store has generated the highest total payment amount? */\nSELECT st.store_id,\n       SUM(p.amount) AS total_sales\nFROM store     AS st\nJOIN inventory AS i ON st.store_id    = i.store_id\nJOIN rental    AS r ON i.inventory_id = r.inventory_id\nJOIN payment   AS p ON r.rental_id    = p.rental_id\nGROUP BY st.store_id\nORDER BY total_sales DESC\nLIMIT 1;\n\n/* Answer the following: Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "evidence": "",
            "raw_question": "For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For each movie rating, what is the average rental price of films with that rating? */\nSELECT rating, AVG(rental_rate) AS avg_rental_price\nFROM film\nGROUP BY rating;\n\n/* Answer the following: Which rating category contains the longest films on average? */\nSELECT rating\nFROM film\nGROUP BY rating\nORDER BY AVG(length) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total payment amount collected in February 2006? */\nSELECT SUM(amount) AS total_feb_2006_revenue\nFROM payment\nWHERE DATE_TRUNC('month', payment_date) = DATE '2006-02-01';\n\n/* Answer the following: Which customer has spent the highest total amount on rentals? */\nSELECT c.first_name || ' ' || c.last_name AS customer_name\nFROM customer AS c\nJOIN payment  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nORDER BY SUM(p.amount) DESC\nLIMIT 1;\n\n/* Answer the following: List the names of customers who have rented more than 30 films in total. */\nSELECT c.first_name, c.last_name\nFROM customer AS c\nJOIN rental   AS r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nHAVING COUNT(r.rental_id) > 30;\n\n/* Answer the following: Which movie rating has generated the greatest number of rentals? */\nSELECT f.rating\nFROM rental   AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN film      AS f ON i.film_id      = f.film_id\nGROUP BY f.rating\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average payment amount made for a single rental? */\nSELECT AVG(amount) AS avg_payment_per_rental\nFROM payment;\n\n/* Answer the following: Give the names of customers who made at least one rental in every month of the year 2005. */\nSELECT c.first_name, c.last_name\nFROM customer AS c\nJOIN rental   AS r ON c.customer_id = r.customer_id\nWHERE DATE_PART('year', r.rental_date) = 2005\nGROUP BY c.customer_id, c.first_name, c.last_name\nHAVING COUNT(DISTINCT DATE_PART('month', r.rental_date)) = 12;\n\n/* Answer the following: For each film category, what is the shortest film length? */\nSELECT c.name AS category_name, MIN(f.length) AS shortest_length\nFROM film          AS f\nJOIN film_category AS fc ON f.film_id = fc.film_id\nJOIN category      AS c  ON fc.category_id = c.category_id\nGROUP BY c.name;\n\n/* Answer the following: For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "evidence": "",
            "raw_question": "Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which customer paid the highest total amount in the calendar year 2022?  */\nSELECT C.name\nFROM Customers AS C\nJOIN Payments AS P ON P.customer_id = C.id\nWHERE strftime('%Y', P.payment_date) = '2022'\nGROUP BY C.id\nORDER BY SUM(P.amount) DESC\nLIMIT 1;\n\n/* Answer the following: What were the total company-wide payments for every month in 2023?  */\nSELECT strftime('%Y-%m', P.payment_date)  AS month,\n       ROUND(SUM(P.amount), 2)            AS total_paid\nFROM Payments AS P\nWHERE strftime('%Y', P.payment_date) = '2023'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Among all customers, who recorded the largest percentage increase between any two consecutive months in 2022 and what was that percentage? percentage increase refers to (curr \u2212 prev) / prev * 100  */\nWITH m AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id, month\n), diffs AS (\n    SELECT m1.customer_id,\n           m1.month                       AS curr_month,\n           100.0 * (m1.monthly_amt - m2.monthly_amt) / m2.monthly_amt AS pct_change\n    FROM m AS m1\n    JOIN m AS m2\n         ON m1.customer_id = m2.customer_id\n        AND date(m1.month || '-01') = date(m2.month || '-01', '+1 month')\n)\nSELECT C.name,\n       curr_month,\n       ROUND(pct_change, 2) AS pct_change\nFROM diffs\nJOIN Customers AS C ON C.id = diffs.customer_id\nORDER BY pct_change DESC\nLIMIT 1;\n\n/* Answer the following: Compute the average monthly payment in 2023 for each of our top 5 customers by total spend in that same year.  */\nWITH totals AS (\n    SELECT customer_id, SUM(amount) AS yr_total\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2023'\n    GROUP BY customer_id\n    ORDER BY yr_total DESC\n    LIMIT 5\n), months AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2023'\n      AND customer_id IN (SELECT customer_id FROM totals)\n    GROUP BY customer_id, month\n)\nSELECT C.name,\n       ROUND(AVG(monthly_amt), 2) AS avg_monthly_payment\nFROM months\nJOIN Customers AS C ON C.id = months.customer_id\nGROUP BY months.customer_id;\n\n/* Answer the following: Among customers whose 2022 spending exceeded 10,000, which one experienced the smallest month-over-month drop, and what was the drop amount?  */\nWITH yr_totals AS (\n    SELECT customer_id\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id\n    HAVING SUM(amount) > 10000\n), m AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n      AND customer_id IN (SELECT customer_id FROM yr_totals)\n    GROUP BY customer_id, month\n), diffs AS (\n    SELECT m1.customer_id,\n           m1.month AS curr_month,\n           m2.month AS prev_month,\n           m2.monthly_amt - m1.monthly_amt AS drop_amt\n    FROM m AS m1\n    JOIN m AS m2\n      ON m1.customer_id = m2.customer_id\n     AND date(m1.month || '-01') = date(m2.month || '-01', '+1 month')\n), only_drops AS (\n    SELECT * FROM diffs WHERE drop_amt > 0\n)\nSELECT C.name,\n       prev_month || ' to ' || curr_month AS period,\n       ROUND(MIN(drop_amt), 2)            AS smallest_drop\nFROM only_drops\nJOIN Customers AS C ON C.id = only_drops.customer_id\nGROUP BY customer_id\nORDER BY smallest_drop\nLIMIT 1;\n\n/* Answer the following: For customer \u2018Acme Corp\u2019, list all months where the payment grew by more than 500 dollars compared with the previous month.  */\nWITH acme AS (\n    SELECT strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE customer_id = (SELECT id FROM Customers WHERE name = 'Acme Corp')\n    GROUP BY month\n), diffs AS (\n    SELECT a1.month AS curr_month,\n           a1.monthly_amt - a2.monthly_amt AS diff_amt\n    FROM acme AS a1\n    JOIN acme AS a2\n      ON date(a1.month || '-01') = date(a2.month || '-01', '+1 month')\n)\nSELECT curr_month\nFROM diffs\nWHERE diff_amt > 500\nORDER BY curr_month;\n\n/* Answer the following: During which month did the company collect the highest total revenue across all customers, and what was that amount?  */\nSELECT month,\n       ROUND(total_amt, 2) AS total_amt\nFROM (\n    SELECT strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS total_amt\n    FROM Payments\n    GROUP BY month\n)\nORDER BY total_amt DESC\nLIMIT 1;\n\n/* Answer the following: What is each customer\u2019s median monthly payment amount for 2022? median computed over the 12 calendar months of that year  */\nWITH months AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id, month\n), ranked AS (\n    SELECT customer_id,\n           monthly_amt,\n           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY monthly_amt)          AS rn_asc,\n           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY monthly_amt DESC)     AS rn_desc,\n           COUNT(*)  OVER (PARTITION BY customer_id)                                  AS cnt\n    FROM months\n)\nSELECT C.name,\n       ROUND(AVG(monthly_amt), 2) AS median_monthly_amt\nFROM ranked\nJOIN Customers AS C ON C.id = ranked.customer_id\nWHERE rn_asc = rn_desc   -- picks the middle row(s); AVG covers both odd/even counts\nGROUP BY ranked.customer_id;\n\n/* Answer the following: Which customers made a payment in every single month of 2022 (i.e., 12 distinct months)?  */\nWITH m2022 AS (\n    SELECT customer_id, COUNT(DISTINCT strftime('%m', payment_date)) AS months_paid\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id\n    HAVING months_paid = 12\n)\nSELECT C.name\nFROM m2022\nJOIN Customers AS C ON C.id = m2022.customer_id;\n\n/* Answer the following: Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Identify the state abbreviations where, for both male and female legislators who began serving in that state, the retention rate of the initial cohort is greater than zero at each of the intervals 0, 2, 4, 6, 8, and 10 years after their initial term start date during the first 10 years of service.",
            "evidence": "",
            "raw_question": "Identify the state abbreviations where, for both male and female legislators who began serving in that state, the retention rate of the initial cohort is greater than zero at each of the intervals 0, 2, 4, 6, 8, and 10 years after their initial term start date during the first 10 years of service.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the average quantity ordered for all products in the 'Electronics' category? */\nSELECT AVG(OI.quantity)\nFROM OrderItems AS OI\nJOIN Products   AS P  ON OI.product_id = P.product_id\nJOIN Categories AS C  ON P.category_id = C.category_id\nWHERE C.category_name = 'Electronics';\n\n/* Answer the following: Name the top 3 customers who generated the highest total sales in 2022. */\nSELECT C.customer_name\nFROM Customers AS C\nJOIN Orders      AS O  ON C.customer_id = O.customer_id\nJOIN OrderItems  AS OI ON O.order_id    = OI.order_id\nWHERE strftime('%Y', O.order_date) = '2022'\nGROUP BY C.customer_id\nORDER BY SUM(OI.quantity * OI.unit_price) DESC\nLIMIT 3;\n\n/* Answer the following: For each country, how many distinct customers made purchases in 2021? */\nSELECT C.country,\n       COUNT(DISTINCT C.customer_id) AS customer_count\nFROM Customers AS C\nJOIN Orders AS O ON C.customer_id = O.customer_id\nWHERE strftime('%Y', O.order_date) = '2021'\nGROUP BY C.country;\n\n/* Answer the following: Which product has the second highest number of orders? */\nSELECT P.product_name\nFROM Products AS P\nJOIN OrderItems AS OI ON P.product_id = OI.product_id\nGROUP BY P.product_id\nORDER BY COUNT(DISTINCT OI.order_id) DESC\nLIMIT 1 OFFSET 1;\n\n/* Answer the following: What is the total revenue from orders placed in the first quarter (January-March) of 2023? */\nSELECT SUM(OI.quantity * OI.unit_price) AS total_revenue\nFROM Orders     AS O\nJOIN OrderItems AS OI ON O.order_id = OI.order_id\nWHERE O.order_date BETWEEN '2023-01-01' AND '2023-03-31';\n\n/* Answer the following: Which customer placed the earliest order and on what date? */\nSELECT C.customer_name,\n       O.order_date\nFROM Customers AS C\nJOIN Orders    AS O ON C.customer_id = O.customer_id\nORDER BY O.order_date ASC\nLIMIT 1;\n\n/* Answer the following: What is the most frequently purchased category by customers from 'Germany'? */\nSELECT CAT.category_name\nFROM Customers   AS CU\nJOIN Orders      AS O   ON CU.customer_id = O.customer_id\nJOIN OrderItems  AS OI  ON O.order_id     = OI.order_id\nJOIN Products    AS P   ON OI.product_id  = P.product_id\nJOIN Categories  AS CAT ON P.category_id  = CAT.category_id\nWHERE CU.country = 'Germany'\nGROUP BY CAT.category_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the difference between the maximum and minimum unit price among all products? */\nSELECT MAX(unit_price) - MIN(unit_price) AS price_range\nFROM Products;\n\n/* Answer the following: How many orders contain more than 5 distinct products? */\nSELECT COUNT(*)\nFROM (\n      SELECT order_id\n      FROM OrderItems\n      GROUP BY order_id\n      HAVING COUNT(DISTINCT product_id) > 5\n     ) AS multi_item_orders;\n\n/* Answer the following: Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "n_examples": 9,
            "db_id": "chinook"
        },
        {
            "question": "Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "evidence": "",
            "raw_question": "Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which store recorded the highest total payment amount in the year 2006? */\nSELECT st.store_id ,\n       SUM(p.amount) AS total_payments\nFROM payment AS p\nJOIN staff   AS sf ON p.staff_id = sf.staff_id\nJOIN store   AS st ON sf.store_id = st.store_id\nWHERE YEAR(p.payment_date) = 2006\nGROUP BY st.store_id\nORDER BY total_payments DESC\nLIMIT 1;\n\n/* Answer the following: For each store, how many rentals were returned more than three days late during February 2005? */\nSELECT st.store_id ,\n       COUNT(*) AS late_rentals\nFROM rental    AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN store     AS st ON i.store_id = st.store_id\nWHERE r.return_date IS NOT NULL\n  AND YEAR(r.rental_date)  = 2005\n  AND MONTH(r.rental_date) = 2\n  AND DATEDIFF(r.return_date , r.rental_date) > 3\nGROUP BY st.store_id;\n\n/* Answer the following: List the top three customers who spent the most money in 2005 and the total amount each spent. */\nSELECT c.customer_id ,\n       c.first_name ,\n       c.last_name ,\n       SUM(p.amount) AS total_spent\nFROM payment  AS p\nJOIN customer AS c ON p.customer_id = c.customer_id\nWHERE YEAR(p.payment_date) = 2005\nGROUP BY c.customer_id\nORDER BY total_spent DESC\nLIMIT 3;\n\n/* Answer the following: What is the average rental duration, in days, of all films that belong to the 'Comedy' category? */\nSELECT AVG(f.rental_duration) AS avg_duration\nFROM film          AS f\nJOIN film_category AS fc ON f.film_id     = fc.film_id\nJOIN category      AS c  ON fc.category_id = c.category_id\nWHERE c.name = 'Comedy';\n\n/* Answer the following: How many rentals did each staff member process in March 2006? Show staff id, first name, last name, and the count. */\nSELECT sf.staff_id ,\n       sf.first_name ,\n       sf.last_name ,\n       COUNT(*) AS rental_count\nFROM rental AS r\nJOIN staff  AS sf ON r.staff_id = sf.staff_id\nWHERE YEAR(r.rental_date)  = 2006\n  AND MONTH(r.rental_date) = 3\nGROUP BY sf.staff_id;\n\n/* Answer the following: Which film has been rented the greatest number of times? Provide the film id, title, and the number of rentals. */\nSELECT f.film_id ,\n       f.title ,\n       COUNT(*) AS rental_count\nFROM rental    AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN film      AS f ON i.film_id      = f.film_id\nGROUP BY f.film_id\nORDER BY rental_count DESC\nLIMIT 1;\n\n/* Answer the following: Identify the customer who made the earliest rental recorded in the system. Show customer id, first name, and that rental date. */\nSELECT c.customer_id ,\n       c.first_name ,\n       r.rental_date\nFROM rental   AS r\nJOIN customer AS c ON r.customer_id = c.customer_id\nORDER BY r.rental_date\nLIMIT 1;\n\n/* Answer the following: How many distinct films are stocked in each store? Return store id and the count of different films. */\nSELECT st.store_id ,\n       COUNT(DISTINCT i.film_id) AS film_count\nFROM store    AS st\nJOIN inventory AS i ON st.store_id = i.store_id\nGROUP BY st.store_id;\n\n/* Answer the following: What was the total revenue collected from payments during July 2005? */\nSELECT SUM(amount) AS total_revenue\nFROM payment\nWHERE YEAR(payment_date)  = 2005\n  AND MONTH(payment_date) = 7;\n\n/* Answer the following: Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "n_examples": 9,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "evidence": "",
            "raw_question": "Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: List the first 5 words alphabetically that are exactly 4 letters long, start with 'b', and have at least two anagrams of the same length. Alongside each word, show the total number of anagrams it has. */\nSELECT w.word,\n       COUNT(*) AS anagram_cnt\nFROM   words AS w\nJOIN   words AS w2\n       ON w.signature = w2.signature\nWHERE  w.len = 4\n  AND  w.word LIKE 'b%'\nGROUP  BY w.word\nHAVING COUNT(*) >= 2\nORDER  BY w.word\nLIMIT  5;\n\n/* Answer the following: How many distinct anagram groups consist of exactly three different words of length 6? */\nSELECT COUNT(*)\nFROM  (SELECT signature\n       FROM   words\n       WHERE  len = 6\n       GROUP  BY signature\n       HAVING COUNT(*) = 3) AS g;\n\n/* Answer the following: Give every anagram of the word 'stone' that appears in the dictionary (including 'stone' itself). */\nSELECT word\nFROM   words\nWHERE  signature = (SELECT signature\n                    FROM   words\n                    WHERE  word = 'stone'\n                    LIMIT  1);\n\n/* Answer the following: Between word lengths 2 and 8 inclusive, which length hosts the greatest number of anagram groups that contain more than four words? Return the length and the number of such groups. */\nSELECT len,\n       COUNT(*) AS group_cnt\nFROM  (SELECT len, signature\n       FROM   words\n       WHERE  len BETWEEN 2 AND 8\n       GROUP  BY len, signature\n       HAVING COUNT(*) > 4) AS sub\nGROUP  BY len\nORDER  BY group_cnt DESC, len\nLIMIT  1;\n\n/* Answer the following: What are the 7 largest anagram families in the dictionary? Return the anagram signature and the family size, ordered from largest to smallest. */\nSELECT signature,\n       COUNT(*) AS family_size\nFROM   words\nGROUP  BY signature\nORDER  BY family_size DESC\nLIMIT  7;\n\n/* Answer the following: How many words are anagrams of another word that differs from them in only the first letter? */\nSELECT COUNT(DISTINCT w1.word)\nFROM   words AS w1\nJOIN   words AS w2\n       ON  w1.signature = w2.signature\n       AND w1.len = w2.len\n       AND SUBSTR(w1.word,2) = SUBSTR(w2.word,2)\n       AND w1.word <> w2.word;\n\n/* Answer the following: Identify the first 10 words alphabetically that end with 'ed', are 5 letters long, and have at least one anagram. Provide their anagram counts. */\nSELECT w.word,\n       COUNT(*) AS anagram_cnt\nFROM   words AS w\nJOIN   words AS w2\n       ON w.signature = w2.signature\nWHERE  w.len = 5\n  AND  w.word LIKE '%ed'\nGROUP  BY w.word\nHAVING COUNT(*) > 1\nORDER  BY w.word\nLIMIT  10;\n\n/* Answer the following: What is the length of the longest word in the dictionary that does not have any anagrams? */\nSELECT MAX(len)\nFROM  (SELECT len\n       FROM   words\n       GROUP  BY signature, len\n       HAVING COUNT(*) = 1) AS solo;\n\n/* Answer the following: For the initial letters 'a', 'b', and 'c', give the number of 4-letter words that possess at least three anagrams. Return the initial letter and the count. */\nSELECT SUBSTR(word,1,1) AS initial,\n       COUNT(*)         AS word_cnt\nFROM   words\nWHERE  len = 4\n  AND  SUBSTR(word,1,1) IN ('a','b','c')\n  AND  signature IN (SELECT signature\n                     FROM   words\n                     GROUP  BY signature\n                     HAVING COUNT(*) >= 3)\nGROUP  BY initial\nORDER  BY initial;\n\n/* Answer the following: Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "n_examples": 9,
            "db_id": "modern_data"
        },
        {
            "question": "Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "evidence": "",
            "raw_question": "Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which five states have the highest percentage of friendly aliens? */\nSELECT state\nFROM alien_population\nORDER BY (friendly_aliens * 100.0 / total_aliens) DESC\nLIMIT 5;\n\n/* Answer the following: How many states have a higher percentage of hostile aliens than friendly aliens? */\nSELECT COUNT(*)\nFROM alien_population\nWHERE (hostile_aliens * 1.0 / total_aliens) > (friendly_aliens * 1.0 / total_aliens);\n\n/* Answer the following: What is the average alien age among states whose total alien population exceeds one million? */\nSELECT AVG(avg_alien_age)\nFROM alien_population\nWHERE total_aliens > 1000000;\n\n/* Answer the following: Which state has the greatest average alien age among states with at least 10,000 aliens? */\nSELECT state\nFROM alien_population\nWHERE total_aliens >= 10000\nORDER BY avg_alien_age DESC\nLIMIT 1;\n\n/* Answer the following: How many friendly aliens live in the state of California (CA)? */\nSELECT friendly_aliens\nFROM alien_population\nWHERE state = 'CA';\n\n/* Answer the following: List all states where more than 60 % of the aliens are friendly and the average alien age is below 150. */\nSELECT state\nFROM alien_population\nWHERE (friendly_aliens * 100.0 / total_aliens) > 60\n  AND avg_alien_age < 150;\n\n/* Answer the following: What is the average friendly-alien percentage among the ten states with the largest alien populations? */\nSELECT AVG(friendly_pct) AS avg_friendly_pct\nFROM (\n    SELECT (friendly_aliens * 100.0 / total_aliens) AS friendly_pct\n    FROM alien_population\n    ORDER BY total_aliens DESC\n    LIMIT 10\n) AS top10;\n\n/* Answer the following: Which state has the smallest hostile-alien population among states where the average alien age is greater than 250? */\nSELECT state\nFROM alien_population\nWHERE avg_alien_age > 250\nORDER BY hostile_aliens ASC\nLIMIT 1;\n\n/* Answer the following: How many states have exactly the same number of friendly and hostile aliens? */\nSELECT COUNT(*)\nFROM alien_population\nWHERE friendly_aliens = hostile_aliens;\n\n/* Answer the following: For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "n_examples": 9,
            "db_id": "city_legislation"
        },
        {
            "question": "For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "evidence": "",
            "raw_question": "For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which store has the lowest total sales amount among stores located in 'New York'? */\nSELECT s.store_name\nFROM stores AS s\nJOIN orders AS o ON o.store_id = s.store_id\nWHERE s.city = 'New York'\nGROUP BY s.store_id , s.store_name\nORDER BY SUM(o.total_amount) ASC\nLIMIT 1;\n\n/* Answer the following: How many orders placed in 2022 do not yet have any delivery record? */\nSELECT COUNT(*)\nFROM orders AS o\nWHERE EXTRACT(YEAR FROM o.order_date) = 2022\n  AND NOT EXISTS (\n        SELECT 1\n        FROM deliveries AS d\n        WHERE d.order_id = o.order_id\n    );\n\n/* Answer the following: List the top 5 stores with the highest average order value for orders that were delivered successfully. */\nSELECT s.store_name\nFROM stores AS s\nJOIN orders AS o ON o.store_id = s.store_id\nJOIN deliveries AS d ON d.order_id = o.order_id\nWHERE d.status = 'DELIVERED'\nGROUP BY s.store_id , s.store_name\nORDER BY AVG(o.total_amount) DESC\nLIMIT 5;\n\n/* Answer the following: For each month in 2023, what is the count of distinct customers who placed at least one order? */\nSELECT EXTRACT(MONTH FROM o.order_date) AS month,\n       COUNT(DISTINCT o.customer_id)      AS customer_cnt\nFROM orders AS o\nWHERE EXTRACT(YEAR FROM o.order_date) = 2023\nGROUP BY EXTRACT(MONTH FROM o.order_date)\nORDER BY month;\n\n/* Answer the following: What percentage of all orders have a delivery record with status 'RETURNED'?  (Return the value as a decimal between 0 and 1.) */\nSELECT CAST(COUNT(DISTINCT CASE WHEN d.status = 'RETURNED' THEN o.order_id END) AS FLOAT)\n       / COUNT(*) AS return_ratio\nFROM orders AS o\nLEFT JOIN deliveries AS d ON d.order_id = o.order_id;\n\n/* Answer the following: Which store has the highest ratio of delivered orders to total orders among stores with at least 100 orders? */\nSELECT s.store_name\nFROM stores  AS s\nJOIN orders  AS o ON o.store_id = s.store_id\nLEFT JOIN deliveries AS d\n       ON d.order_id = o.order_id\n      AND d.status = 'DELIVERED'\nGROUP BY s.store_id , s.store_name\nHAVING COUNT(*) >= 100\nORDER BY (COUNT(DISTINCT CASE WHEN d.status = 'DELIVERED' THEN o.order_id END) * 1.0\n          / COUNT(*)) DESC\nLIMIT 1;\n\n/* Answer the following: On which weekday is the volume of orders the highest?  (Return the weekday name.) */\nSELECT TO_CHAR(o.order_date, 'Day') AS weekday\nFROM orders AS o\nGROUP BY TO_CHAR(o.order_date, 'Day')\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Among stores in the 'West' region, what is the total revenue generated by orders whose delivery status is 'CANCELLED'? */\nSELECT SUM(o.total_amount) AS cancelled_revenue\nFROM stores     AS s\nJOIN orders     AS o ON o.store_id  = s.store_id\nJOIN deliveries AS d ON d.order_id  = o.order_id\nWHERE s.region = 'West'\n  AND d.status = 'CANCELLED';\n\n/* Answer the following: What is the average number of days between order placement and delivery for orders delivered in 2021? */\nSELECT AVG(DATE(d.delivery_date) - DATE(o.order_date)) AS avg_delivery_days\nFROM orders     AS o\nJOIN deliveries AS d ON d.order_id = o.order_id\nWHERE d.status = 'DELIVERED'\n  AND EXTRACT(YEAR FROM d.delivery_date) = 2021;\n\n/* Answer the following: In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "n_examples": 9,
            "db_id": "delivery_center"
        },
        {
            "question": "Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "evidence": "",
            "raw_question": "Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which regions experienced a drop of more than 10 percent in finished orders from March to April? */\nSELECT r.region_name\nFROM regions AS r\nJOIN hubs   AS h ON h.region_id = r.region_id\nJOIN orders AS o ON o.hub_id    = h.hub_id\nWHERE o.status = 'finished'\nGROUP BY r.region_name\nHAVING 1.0 * SUM( CASE WHEN EXTRACT(MONTH FROM o.order_date)=4 THEN 1 ELSE 0 END ) /\n             NULLIF( SUM( CASE WHEN EXTRACT(MONTH FROM o.order_date)=3 THEN 1 ELSE 0 END ), 0)  < 0.90\n\n/* Answer the following: List the three hubs with the highest cancellation rate in January (cancellations \u00f7 total orders). */\nSELECT h.hub_name\nFROM hubs   AS h\nJOIN orders AS o ON o.hub_id = h.hub_id\nWHERE EXTRACT(MONTH FROM o.order_date)=1\nGROUP BY h.hub_name\nORDER BY 1.0 * SUM( CASE WHEN o.status='cancelled' THEN 1 ELSE 0 END )\n         / COUNT(*)  DESC\nLIMIT 3\n\n/* Answer the following: What is the total number of finished orders across all hubs during the first quarter (January\u2013March)? */\nSELECT COUNT(*) AS total_finished_Q1\nFROM   orders\nWHERE  status = 'finished'\n  AND  EXTRACT(MONTH FROM order_date) BETWEEN 1 AND 3\n\n/* Answer the following: What is the average delivery-time (in minutes) for finished orders handled by the New York hub in March? */\nSELECT AVG(o.delivery_time_min) AS avg_minutes\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nWHERE  h.hub_name = 'New York'\n  AND  o.status   = 'finished'\n  AND  EXTRACT(MONTH FROM o.order_date)=3\n\n/* Answer the following: Which hub generated the highest revenue (sum of amount) from finished orders in February? */\nSELECT h.hub_name\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nWHERE  o.status = 'finished'\n  AND  EXTRACT(MONTH FROM o.order_date)=2\nGROUP BY h.hub_name\nORDER BY SUM(o.amount) DESC\nLIMIT 1\n\n/* Answer the following: Identify every hub whose cancelled-order ratio exceeded 5 percent in any single month. */\nSELECT DISTINCT h.hub_name\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nGROUP BY h.hub_name, EXTRACT(MONTH FROM o.order_date)\nHAVING 1.0 * SUM( CASE WHEN o.status='cancelled' THEN 1 ELSE 0 END ) / COUNT(*) > 0.05\n\n/* Answer the following: How many distinct customers placed orders at the Los Angeles hub in March? */\nSELECT COUNT(DISTINCT o.customer_id) AS customer_cnt\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nWHERE  h.hub_name = 'Los Angeles'\n  AND  EXTRACT(MONTH FROM o.order_date)=3\n\n/* Answer the following: What is the difference in total finished orders between the Chicago hub and the Dallas hub in February?  (Chicago minus Dallas) */\nWITH feb_finished AS (\n    SELECT h.hub_name,\n           COUNT(*) AS cnt\n    FROM hubs   AS h\n    JOIN orders AS o ON o.hub_id = h.hub_id\n    WHERE o.status='finished'\n      AND EXTRACT(MONTH FROM o.order_date)=2\n    GROUP BY h.hub_name\n)\nSELECT COALESCE( (SELECT cnt FROM feb_finished WHERE hub_name='Chicago'),0)\n     - COALESCE( (SELECT cnt FROM feb_finished WHERE hub_name='Dallas') ,0)\n     AS difference\n\n/* Answer the following: For each hub, list the month in Q1 during which it recorded the maximum number of finished orders. */\nSELECT hub_name,\n       month_of_max\nFROM (\n    SELECT h.hub_name,\n           EXTRACT(MONTH FROM o.order_date) AS month_of_max,\n           COUNT(*)                        AS finished_cnt,\n           ROW_NUMBER() OVER (PARTITION BY h.hub_name\n                              ORDER BY COUNT(*) DESC) AS rn\n    FROM hubs   AS h\n    JOIN orders AS o ON o.hub_id = h.hub_id\n    WHERE o.status='finished'\n      AND EXTRACT(MONTH FROM o.order_date) BETWEEN 1 AND 3\n    GROUP BY h.hub_name, EXTRACT(MONTH FROM o.order_date)\n) ranked\nWHERE rn = 1\n\n/* Answer the following: Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "n_examples": 9,
            "db_id": "delivery_center"
        },
        {
            "question": "Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "evidence": "",
            "raw_question": "Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What are the names of the 3 drivers with the highest average number of deliveries per working day in 2021? */\nSELECT d.name\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.delivery_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY d.driver_id\nORDER BY (1.0 * COUNT(*) / COUNT(DISTINCT del.delivery_date)) DESC\nLIMIT 3;\n\n/* Answer the following: Which driver has the lowest average delivery distance in urban zones? */\nSELECT d.name\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.zone_type = 'Urban'\nGROUP BY d.driver_id\nORDER BY AVG(del.distance_km) ASC\nLIMIT 1;\n\n/* Answer the following: List the top 5 restaurants that generate the highest average number of deliveries per week. */\nSELECT r.name\nFROM restaurants AS r\nJOIN deliveries AS del ON r.restaurant_id = del.restaurant_id\nGROUP BY r.restaurant_id\nORDER BY (1.0 * COUNT(*) / COUNT(DISTINCT strftime('%Y-%W', del.delivery_date))) DESC\nLIMIT 5;\n\n/* Answer the following: How many drivers made on average more than 20 deliveries per day in December 2022? */\nWITH driver_avg AS (\n  SELECT d.driver_id,\n         COUNT(*) * 1.0 / COUNT(DISTINCT del.delivery_date) AS avg_per_day\n  FROM drivers AS d\n  JOIN deliveries AS del ON d.driver_id = del.driver_id\n  WHERE del.delivery_date BETWEEN '2022-12-01' AND '2022-12-31'\n  GROUP BY d.driver_id\n)\nSELECT COUNT(*)\nFROM driver_avg\nWHERE avg_per_day > 20;\n\n/* Answer the following: Show the average daily delivery count for each driver that worked at least 100 days in 2022. */\nSELECT d.name,\n       COUNT(*) * 1.0 / COUNT(DISTINCT del.delivery_date) AS avg_daily_deliveries\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.delivery_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY d.driver_id\nHAVING COUNT(DISTINCT del.delivery_date) >= 100;\n\n/* Answer the following: Which day of the week has the highest average delivery count across all drivers? (0 = Sunday \u2026 6 = Saturday) */\nSELECT strftime('%w', delivery_date) AS weekday,\n       AVG(daily_cnt) AS avg_deliveries\nFROM (\n  SELECT delivery_date, COUNT(*) AS daily_cnt\n  FROM deliveries\n  GROUP BY delivery_date\n) AS daily\nGROUP BY weekday\nORDER BY avg_deliveries DESC\nLIMIT 1;\n\n/* Answer the following: What is the average customer rating for the driver who handled the most deliveries in Q1 2023? */\nWITH top_driver AS (\n  SELECT d.driver_id\n  FROM drivers AS d\n  JOIN deliveries AS del ON d.driver_id = del.driver_id\n  WHERE del.delivery_date BETWEEN '2023-01-01' AND '2023-03-31'\n  GROUP BY d.driver_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)\nSELECT AVG(del.rating)\nFROM deliveries AS del\nWHERE del.driver_id = (SELECT driver_id FROM top_driver);\n\n/* Answer the following: Give the percentage difference between average daily deliveries of the most productive and least productive drivers in 2022. */\nWITH avg_daily AS (\n  SELECT driver_id,\n         COUNT(*) * 1.0 / COUNT(DISTINCT delivery_date) AS avg_per_day\n  FROM deliveries\n  WHERE delivery_date BETWEEN '2022-01-01' AND '2022-12-31'\n  GROUP BY driver_id\n),\nmax_min AS (\n  SELECT MAX(avg_per_day) AS max_avg,\n         MIN(avg_per_day) AS min_avg\n  FROM avg_daily\n)\nSELECT 100.0 * (max_avg - min_avg) / min_avg AS percent_difference\nFROM max_min;\n\n/* Answer the following: Provide the driver names who increased their average daily deliveries by at least 30 % from 2021 to 2022. */\nWITH avg_2021 AS (\n  SELECT driver_id,\n         COUNT(*) * 1.0 / COUNT(DISTINCT delivery_date) AS avg_2021\n  FROM deliveries\n  WHERE delivery_date BETWEEN '2021-01-01' AND '2021-12-31'\n  GROUP BY driver_id\n),\navg_2022 AS (\n  SELECT driver_id,\n         COUNT(*) * 1.0 / COUNT(DISTINCT delivery_date) AS avg_2022\n  FROM deliveries\n  WHERE delivery_date BETWEEN '2022-01-01' AND '2022-12-31'\n  GROUP BY driver_id\n)\nSELECT d.name\nFROM drivers AS d\nJOIN avg_2021 AS a21 ON d.driver_id = a21.driver_id\nJOIN avg_2022 AS a22 ON d.driver_id = a22.driver_id\nWHERE a22.avg_2022 >= a21.avg_2021 * 1.3;\n\n/* Answer the following: Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "n_examples": 9,
            "db_id": "delivery_center"
        },
        {
            "question": "Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "evidence": "",
            "raw_question": "Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum overall rating ever registered for any player? */\nSELECT MAX(overall_rating)\nFROM player_attributes;\n\n/* Answer the following: List the names of the 5 heaviest players. */\nSELECT player_name\nFROM player\nORDER BY weight DESC\nLIMIT 5;\n\n/* Answer the following: Which season had the highest average number of goals per match across all leagues? average number of goals per match refers to AVG(home_team_goal + away_team_goal) */\nSELECT season\nFROM match\nGROUP BY season\nORDER BY AVG(home_team_goal + away_team_goal) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a goalless draw? goalless draw refers to home_team_goal = 0 AND away_team_goal = 0 */\nSELECT COUNT(*)\nFROM match\nWHERE home_team_goal = 0 AND away_team_goal = 0;\n\n/* Answer the following: In the 2013/2014 season, which league hosted the most matches? */\nSELECT L.name\nFROM league AS L\nJOIN match  AS M ON L.id = M.league_id\nWHERE M.season = '2013/2014'\nGROUP BY L.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which player has the highest recorded finishing rating over all snapshots? finishing rating refers to column finishing; highest recorded refers to MAX(finishing) */\nSELECT P.player_name\nFROM player AS P\nJOIN player_attributes AS A\n     ON P.player_api_id = A.player_api_id\nGROUP BY P.player_api_id, P.player_name\nORDER BY MAX(A.finishing) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average height of players born after 1990? born after 1990 refers to birthday year > 1990 */\nSELECT AVG(height)\nFROM player\nWHERE CAST(substr(birthday, 1, 4) AS INT) > 1990;\n\n/* Answer the following: How many different teams have played at home in matches where the away side scored at least 5 goals? */\nSELECT COUNT(DISTINCT home_team_api_id)\nFROM match\nWHERE away_team_goal >= 5;\n\n/* Answer the following: Which country has the fewest leagues recorded in the database? */\nSELECT C.name\nFROM country AS C\nJOIN league  AS L ON C.id = L.country_id\nGROUP BY C.id, C.name\nORDER BY COUNT(L.id) ASC\nLIMIT 1;\n\n/* Answer the following: Can you calculate the median from the highest season goals of each team?",
            "n_examples": 9,
            "db_id": "EU_soccer"
        },
        {
            "question": "For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "evidence": "",
            "raw_question": "For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For every season, which single team scores the greatest total number of goals when we add together the goals they scored as the home side and as the away side?  If more than one team tie for the most goals in a season, return just one of them for that season. */\nSELECT s.season ,\n       t.team_long_name\nFROM   (\n          SELECT season ,\n                 team_id ,\n                 SUM(goals)                     AS total_goals ,\n                 ROW_NUMBER() OVER (PARTITION BY season\n                                    ORDER BY     SUM(goals) DESC ,\n                                                 team_id) AS rn\n          FROM   (\n                    SELECT season ,\n                           home_team_api_id AS team_id ,\n                           home_team_goal   AS goals\n                    FROM   match\n                    UNION ALL\n                    SELECT season ,\n                           away_team_api_id AS team_id ,\n                           away_team_goal   AS goals\n                    FROM   match\n                 ) AS g\n          GROUP  BY season ,\n                    team_id\n       ) AS s\nJOIN   team t\n       ON t.team_api_id = s.team_id\nWHERE  s.rn = 1;\n\n/* Answer the following: Which league has the highest average number of goals per match (home goals + away goals) across all seasons combined? */\nSELECT l.name\nFROM   league l\nJOIN   match  m\n       ON m.league_id = l.id\nGROUP  BY l.id\nORDER BY AVG(m.home_team_goal + m.away_team_goal) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a draw (home goals = away goals) during the 2010/2011 season? */\nSELECT COUNT(*)\nFROM   match\nWHERE  season = '2010/2011'\nAND    home_team_goal = away_team_goal;\n\n/* Answer the following: List the 5 teams with the highest overall win percentage in the English Premier League over all seasons.  (Win percentage = wins \u00f7 total matches played.) */\nSELECT t.team_long_name\nFROM   (\n          SELECT team_id ,\n                 1.0 * SUM(win) / COUNT(*) AS win_rate\n          FROM   (\n                     SELECT home_team_api_id AS team_id ,\n                            CASE WHEN home_team_goal > away_team_goal THEN 1 ELSE 0 END AS win\n                     FROM   match\n                     WHERE  league_id = (SELECT id FROM league WHERE name = 'England Premier League')\n                     UNION ALL\n                     SELECT away_team_api_id ,\n                            CASE WHEN away_team_goal > home_team_goal THEN 1 ELSE 0 END\n                     FROM   match\n                     WHERE  league_id = (SELECT id FROM league WHERE name = 'England Premier League')\n                 ) w\n          GROUP  BY team_id\n       ) r\nJOIN   team t\n       ON t.team_api_id = r.team_id\nORDER  BY r.win_rate DESC\nLIMIT 5;\n\n/* Answer the following: For every league, what is the average number of wins per team in the 2012/2013 season? */\nSELECT l.name ,\n       AVG(team_wins) AS avg_wins_per_team\nFROM   (\n          SELECT league_id ,\n                 team_id ,\n                 SUM(win) AS team_wins\n          FROM   (\n                     SELECT league_id ,\n                            home_team_api_id AS team_id ,\n                            CASE WHEN home_team_goal > away_team_goal THEN 1 ELSE 0 END AS win\n                     FROM   match\n                     WHERE  season = '2012/2013'\n                     UNION ALL\n                     SELECT league_id ,\n                            away_team_api_id ,\n                            CASE WHEN away_team_goal > home_team_goal THEN 1 ELSE 0 END\n                     FROM   match\n                     WHERE  season = '2012/2013'\n                 ) s\n          GROUP  BY league_id ,\n                    team_id\n       ) p\nJOIN   league l\n       ON l.id = p.league_id\nGROUP  BY l.id;\n\n/* Answer the following: Which team conceded the fewest goals while playing away during the 2014/2015 season?  (Return only one team even if there is a tie.) */\nSELECT t.team_long_name\nFROM   (\n          SELECT away_team_api_id AS team_id ,\n                 SUM(home_team_goal) AS goals_conceded\n          FROM   match\n          WHERE  season = '2014/2015'\n          GROUP  BY away_team_api_id\n          ORDER  BY goals_conceded ASC ,\n                    away_team_api_id\n          LIMIT 1\n       ) x\nJOIN   team t\n       ON t.team_api_id = x.team_id;\n\n/* Answer the following: Which season has the highest proportion of matches in which the total goals scored were greater than 4? */\nSELECT season\nFROM   (\n          SELECT season ,\n                 1.0 * SUM(CASE WHEN home_team_goal + away_team_goal > 4 THEN 1 ELSE 0 END) /\n                 COUNT(*)                                     AS high_scoring_ratio\n          FROM   match\n          GROUP  BY season\n       ) r\nORDER BY high_scoring_ratio DESC\nLIMIT 1;\n\n/* Answer the following: For every team, what is the largest winning margin it has achieved as the home side across all seasons?  (Winning margin = home goals \u2212 away goals and must be positive.) */\nSELECT t.team_long_name ,\n       MAX(m.home_team_goal - m.away_team_goal) AS biggest_home_win_margin\nFROM   match m\nJOIN   team  t\n       ON t.team_api_id = m.home_team_api_id\nWHERE  m.home_team_goal > m.away_team_goal\nGROUP  BY t.team_api_id;\n\n/* Answer the following: Which league has had the greatest number of distinct teams participate in its matches over all seasons?  Return only one league even if there is a tie. */\nSELECT l.name\nFROM   (\n          SELECT league_id ,\n                 COUNT(DISTINCT team_id) AS team_cnt\n          FROM   (\n                    SELECT league_id ,\n                           home_team_api_id AS team_id\n                    FROM   match\n                    UNION\n                    SELECT league_id ,\n                           away_team_api_id\n                    FROM   match\n                 ) d\n          GROUP  BY league_id\n          ORDER  BY team_cnt DESC ,\n                    league_id\n          LIMIT 1\n       ) c\nJOIN   league l\n       ON l.id = c.league_id;\n\n/* Answer the following: In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "n_examples": 9,
            "db_id": "EU_soccer"
        },
        {
            "question": "In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "evidence": "",
            "raw_question": "In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which stadium has hosted the greatest number of matches that finished in a draw? */\nSELECT s.name\nFROM matches AS m\nJOIN stadiums AS s ON s.stadium_id = m.stadium_id\nWHERE m.home_score = m.away_score\nGROUP BY s.stadium_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Who scored the earliest goal in a World-Cup final? earliest goal refers to MIN(g.minute); World-Cup final refers to m.competition = 'World Cup' AND m.stage = 'Final' */\nSELECT p.name\nFROM goals AS g\nJOIN matches AS m ON g.match_id = m.match_id\nJOIN players AS p ON p.player_id = g.scorer_id\nWHERE m.competition = 'World Cup'\n  AND m.stage = 'Final'\nORDER BY g.minute ASC\nLIMIT 1;\n\n/* Answer the following: Which teams won every match they played in the 2019 season? won every match means there exists no match where they drew or lost */\nSELECT t.name\nFROM teams AS t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM matches AS m\n    WHERE m.season = 2019\n      AND (m.home_team_id = t.team_id OR m.away_team_id = t.team_id)\n      AND (\n           (m.home_team_id = t.team_id AND m.home_score <= m.away_score) OR\n           (m.away_team_id = t.team_id AND m.away_score <= m.home_score)\n      )\n);\n\n/* Answer the following: What is the average number of yellow cards shown per match by referee 'Pierluigi Collina'? yellow cards refers to c.card_type = 'Y' */\nSELECT AVG(card_cnt)\nFROM (\n    SELECT m.match_id, COUNT(*) AS card_cnt\n    FROM matches AS m\n    JOIN referees AS r ON r.referee_id = m.referee_id\n    JOIN cards AS c ON c.match_id = m.match_id\n    WHERE r.name = 'Pierluigi Collina'\n      AND c.card_type = 'Y'\n    GROUP BY m.match_id\n) AS sub;\n\n/* Answer the following: Which coach has managed the highest number of different teams across all seasons? highest number refers to MAX(COUNT(DISTINCT team_id)) */\nSELECT c.name\nFROM coaches AS c\nJOIN coach_team_season AS cts ON c.coach_id = cts.coach_id\nGROUP BY c.coach_id\nORDER BY COUNT(DISTINCT cts.team_id) DESC\nLIMIT 1;\n\n/* Answer the following: Who was the oldest player to appear in at least 10 matches during the 2021 season? oldest refers to minimum birthdate; at least 10 matches refers to COUNT(*) >= 10 */\nSELECT p.name\nFROM players AS p\nJOIN appearances AS a ON a.player_id = p.player_id\nJOIN matches AS m ON m.match_id = a.match_id\nWHERE m.season = 2021\nGROUP BY p.player_id, p.birthdate\nHAVING COUNT(*) >= 10\nORDER BY p.birthdate ASC           -- earliest birthdate = oldest\nLIMIT 1;\n\n/* Answer the following: Which match saw the largest winning margin for the away team? largest winning margin refers to MAX(away_score - home_score) */\nSELECT m.match_id\nFROM matches AS m\nORDER BY (m.away_score - m.home_score) DESC\nLIMIT 1;\n\n/* Answer the following: In the 2020 season, which team conceded the highest average number of goals per match? conceded goals are the goals scored by its opponent */\nSELECT t.name\nFROM teams AS t\nJOIN matches AS m\n  ON t.team_id = m.home_team_id OR t.team_id = m.away_team_id\nWHERE m.season = 2020\nGROUP BY t.team_id\nORDER BY AVG(\n    CASE\n        WHEN t.team_id = m.home_team_id THEN m.away_score\n        ELSE m.home_score\n    END\n) DESC\nLIMIT 1;\n\n/* Answer the following: Which player has appeared in the most matches that ended 0\u20130? 0\u20130 refers to home_score = 0 AND away_score = 0 */\nSELECT p.name\nFROM players AS p\nJOIN appearances AS a ON a.player_id = p.player_id\nJOIN matches AS m ON m.match_id = a.match_id\nWHERE m.home_score = 0\n  AND m.away_score = 0\n  AND a.player_id IS NOT NULL          -- exclude null appearance records\nGROUP BY p.player_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "n_examples": 9,
            "db_id": "EU_soccer"
        },
        {
            "question": "Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "evidence": "",
            "raw_question": "Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which team recorded the most wins in the 2022 season? */\nSELECT t.name\nFROM teams AS t\nJOIN standings AS s ON t.id = s.team_id\nWHERE s.season = 2022\nORDER BY s.wins DESC\nLIMIT 1;\n\n/* Answer the following: List the top five players in total points scored during the 2021 season. */\nSELECT p.name\nFROM players AS p\nJOIN player_stats AS ps ON p.id = ps.player_id\nWHERE ps.season = 2021\nORDER BY ps.points DESC\nLIMIT 5;\n\n/* Answer the following: What is the average seating capacity of arenas located in the state of Texas? */\nSELECT AVG(a.capacity)\nFROM arenas AS a\nWHERE a.state = 'TX';\n\n/* Answer the following: How many games ended in a tie in the 2020 regular season? */\nSELECT COUNT(*)\nFROM games\nWHERE season = 2020\n  AND home_score = away_score;\n\n/* Answer the following: Who is the longest\u2013tenured active head coach as of 2023? */\nSELECT c.name\nFROM coaches AS c\nWHERE c.end_year IS NULL OR c.end_year >= 2023\nORDER BY c.start_year ASC\nLIMIT 1;\n\n/* Answer the following: What was the total salary expenditure for the Los Angeles Lakers in the 2019 season? */\nSELECT SUM(ps.salary)\nFROM player_salaries AS ps\nJOIN players AS p ON p.id = ps.player_id\nJOIN teams AS t ON t.id = p.team_id\nWHERE t.name = 'Los Angeles Lakers'\n  AND ps.season = 2019;\n\n/* Answer the following: Which city contains the largest number of league arenas? */\nSELECT a.city\nFROM arenas AS a\nGROUP BY a.city\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the teams that have never posted a losing season. */\nSELECT t.name\nFROM teams AS t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM standings AS s\n    WHERE s.team_id = t.id\n      AND s.wins < s.losses\n);\n\n/* Answer the following: How many first-round draft picks were selected in the 2015 draft? */\nSELECT COUNT(*)\nFROM draft_picks\nWHERE year = 2015\n  AND round = 1;\n\n/* Answer the following: Tell me top10 teams with the most wins across the league",
            "n_examples": 9,
            "db_id": "EU_soccer"
        },
        {
            "question": "Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "evidence": "",
            "raw_question": "Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For every IPL season, find the batsman with the highest strike-rate (minimum 100 balls faced) and the bowler with the best economy rate (minimum 20 overs bowled). Break ties using the lower player_id. Return season_id, batsman_id, strike_rate, bowler_id, economy ordered by season_id. */\nWITH BatAgg AS (\n    SELECT season_id,\n           batsman_id,\n           SUM(runs_off_bat)                    AS runs,\n           COUNT(*)                             AS balls\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, batsman_id\n    HAVING COUNT(*) >= 100\n),\nBatRank AS (\n    SELECT season_id,\n           batsman_id,\n           runs * 1.0 / balls * 100             AS strike_rate,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY runs * 1.0 / balls * 100 DESC, batsman_id) AS rk\n    FROM BatAgg\n),\nBowlAgg AS (\n    SELECT season_id,\n           bowler_id,\n           SUM(total_runs)                      AS runs_conceded,\n           COUNT(*)                             AS balls_bowled\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, bowler_id\n    HAVING COUNT(*) >= 120                -- 20 overs\n),\nBowlRank AS (\n    SELECT season_id,\n           bowler_id,\n           runs_conceded * 1.0 / (balls_bowled / 6.0) AS economy,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY runs_conceded * 1.0 / (balls_bowled / 6.0) ASC, bowler_id) AS rk\n    FROM BowlAgg\n)\nSELECT B.season_id,\n       B.batsman_id,\n       ROUND(B.strike_rate, 2) AS strike_rate,\n       L.bowler_id,\n       ROUND(L.economy, 2)     AS economy\nFROM BatRank  B\nJOIN BowlRank L\n  ON L.season_id = B.season_id\nWHERE B.rk = 1 AND L.rk = 1\nORDER BY B.season_id;\n\n/* Answer the following: For every venue, list the two batsmen with the most fours and the two bowlers with the most wickets (excluding run out, hit wicket, retired hurt). Pair the results by rank (rank-1 batsman with rank-1 bowler, etc.). Return venue_id, rank, batsman_id, fours, bowler_id, wickets ordered by venue_id, rank. */\nWITH FourCnt AS (\n    SELECT venue_id,\n           batsman_id,\n           COUNT(*) AS fours,\n           ROW_NUMBER() OVER (PARTITION BY venue_id\n                              ORDER BY COUNT(*) DESC, batsman_id) AS rk\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    WHERE runs_off_bat = 4\n    GROUP BY venue_id, batsman_id\n),\nWktCnt AS (\n    SELECT venue_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY venue_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    WHERE dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY venue_id, bowler_id\n)\nSELECT F.venue_id,\n       F.rk                            AS rank,\n       F.batsman_id,\n       F.fours,\n       W.bowler_id,\n       W.wkts                          AS wickets\nFROM FourCnt F\nJOIN WktCnt W\n  ON W.venue_id = F.venue_id\n AND W.rk       = F.rk\nWHERE F.rk <= 2\nORDER BY F.venue_id, F.rk;\n\n/* Answer the following: Across all IPL history, retrieve the five bowlers with the best bowling average (runs conceded per wicket) among those who have bowled at least 200 balls and taken at least 20 wickets. Break ties using the lower bowler_id. Return bowler_id and bowling_average. */\nWITH BowlStats AS (\n    SELECT bowler_id,\n           SUM(total_runs)          AS runs_conceded,\n           COUNT(*)                 AS balls_bowled,\n           COUNT(CASE WHEN dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n                       THEN 1 END)  AS wickets\n    FROM ball_by_ball\n    GROUP BY bowler_id\n    HAVING COUNT(*) >= 200 AND wickets >= 20\n)\nSELECT bowler_id,\n       ROUND(runs_conceded * 1.0 / wickets, 2) AS bowling_average\nFROM BowlStats\nORDER BY bowling_average ASC, bowler_id\nLIMIT 5;\n\n/* Answer the following: For every match in the 2019 season, identify (a) the bowler who took the most wickets in power-play overs (1\u20136) and (b) the batsman who scored the most runs in death overs (16\u201320). Ignore run-out, hit-wicket, retired-hurt dismissals for wickets and break all ties with the lower player_id. Return match_id, batsman_id, runs_in_death, bowler_id, powerplay_wkts ordered by match_id. */\nWITH Season19 AS (\n    SELECT match_id, season_id\n    FROM matches\n    WHERE season_id = 2019\n),\nPP_Wkts AS (\n    SELECT b.match_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY b.match_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM Season19 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE over BETWEEN 1 AND 6\n      AND dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY b.match_id, bowler_id\n),\nDeathRuns AS (\n    SELECT b.match_id,\n           batsman_id,\n           SUM(runs_off_bat) AS runs,\n           ROW_NUMBER() OVER (PARTITION BY b.match_id\n                              ORDER BY SUM(runs_off_bat) DESC, batsman_id) AS rk\n    FROM Season19 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE over BETWEEN 16 AND 20\n    GROUP BY b.match_id, batsman_id\n)\nSELECT s.match_id,\n       d.batsman_id,\n       d.runs        AS runs_in_death,\n       p.bowler_id,\n       p.wkts        AS powerplay_wkts\nFROM Season19 s\nJOIN DeathRuns d ON d.match_id = s.match_id AND d.rk = 1\nJOIN PP_Wkts  p ON p.match_id = s.match_id AND p.rk = 1\nORDER BY s.match_id;\n\n/* Answer the following: For each team in the 2020 season, find the top run-scorer and the top wicket-taker (ignoring run out, hit wicket, retired hurt dismissals). Break ties by lower player_id. Return team_id, batsman_id, runs, bowler_id, wickets ordered by team_id. */\nWITH Season20 AS (\n    SELECT match_id\n    FROM matches\n    WHERE season_id = 2020\n),\nBatRuns AS (\n    SELECT batting_team_id AS team_id,\n           batsman_id,\n           SUM(runs_off_bat) AS runs,\n           ROW_NUMBER() OVER (PARTITION BY batting_team_id\n                              ORDER BY SUM(runs_off_bat) DESC, batsman_id) AS rk\n    FROM Season20 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    GROUP BY batting_team_id, batsman_id\n),\nBowlWkts AS (\n    SELECT bowling_team_id AS team_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY bowling_team_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM Season20 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY bowling_team_id, bowler_id\n)\nSELECT B.team_id,\n       B.batsman_id,\n       B.runs,\n       W.bowler_id,\n       W.wkts AS wickets\nFROM BatRuns B\nJOIN BowlWkts W\n  ON W.team_id = B.team_id\nWHERE B.rk = 1 AND W.rk = 1\nORDER BY B.team_id;\n\n/* Answer the following: For every IPL season, determine the batting partnership (pair of batsmen) that scored the highest total runs across the whole season. Use the lower sum of player_ids to break ties. Return season_id, batsman1_id, batsman2_id, partnership_runs ordered by season_id. */\nWITH PairRuns AS (\n    SELECT season_id,\n           LEAST(striker_id, non_striker_id)  AS p1,\n           GREATEST(striker_id, non_striker_id) AS p2,\n           SUM(runs_off_bat)                   AS pruns\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, LEAST(striker_id, non_striker_id), GREATEST(striker_id, non_striker_id)\n),\nPairRank AS (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY pruns DESC, (p1 + p2) ASC) AS rk\n    FROM PairRuns\n)\nSELECT season_id,\n       p1 AS batsman1_id,\n       p2 AS batsman2_id,\n       pruns AS partnership_runs\nFROM PairRank\nWHERE rk = 1\nORDER BY season_id;\n\n/* Answer the following: Identify, for every season, the player who won the most \u201cMan of the Match\u201d awards. Break ties using the lower player_id. Return season_id, player_id, award_count ordered by season_id. */\nWITH Motm AS (\n    SELECT season_id,\n           man_of_the_match_id AS player_id,\n           COUNT(*)            AS awards,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY COUNT(*) DESC, man_of_the_match_id) AS rk\n    FROM matches\n    GROUP BY season_id, man_of_the_match_id\n)\nSELECT season_id,\n       player_id,\n       awards AS award_count\nFROM Motm\nWHERE rk = 1\nORDER BY season_id;\n\n/* Answer the following: Compute the total runs scored in first-innings versus second-innings for every IPL season. Return season_id, innings, total_runs ordered by season_id, innings. */\nSELECT season_id,\n       innings,\n       SUM(total_runs) AS total_runs\nFROM matches\nJOIN ball_by_ball USING (match_id)\nGROUP BY season_id, innings\nORDER BY season_id, innings;\n\n/* Answer the following: Retrieve the three umpires who have officiated the most IPL Final matches (match_stage = 'Final'). Break ties using the lower umpire_id. Return umpire_id, finals_count ordered descending by finals_count. */\nSELECT umpire_id,\n       COUNT(*) AS finals_count\nFROM matches\nJOIN match_umpires USING (match_id)\nWHERE match_stage = 'Final'\nGROUP BY umpire_id\nORDER BY finals_count DESC, umpire_id\nLIMIT 3;\n\n/* Answer the following: For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Can you calculate the median from the highest season goals of each team?",
            "evidence": "",
            "raw_question": "Can you calculate the median from the highest season goals of each team?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which partnership recorded the single-highest number of runs in the entire tournament?  Return the match id, the two player ids (player with more runs first, or higher id when tied), their individual runs and the partnership total. */\nSELECT\n    match_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_id ELSE partner_id\n    END   AS player1_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_id ELSE player_id\n    END   AS player2_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_runs ELSE partner_runs\n    END   AS player1_runs,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_runs ELSE player_runs\n    END   AS player2_runs,\n    partnership_runs\nFROM Partnership\nORDER BY partnership_runs DESC\nLIMIT 1;\n\n/* Answer the following: For match 101, list the top three partnerships by runs, showing the two player ids (higher scorer first) together with their individual and partnership scores. */\nSELECT\n    match_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_id ELSE partner_id\n    END   AS player1_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_id ELSE player_id\n    END   AS player2_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_runs ELSE partner_runs\n    END   AS player1_runs,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_runs ELSE player_runs\n    END   AS player2_runs,\n    partnership_runs\nFROM Partnership\nWHERE match_id = 101\nORDER BY partnership_runs DESC\nLIMIT 3;\n\n/* Answer the following: Provide the average partnership-runs for each match. */\nSELECT\n    match_id,\n    AVG(partnership_runs) AS avg_partnership_runs\nFROM Partnership\nGROUP BY match_id;\n\n/* Answer the following: For every player, show the total runs he scored in all his partnerships (counting only his own runs, not his partner\u2019s). */\nSELECT\n    player_id,\n    SUM(player_runs) AS total_individual_runs_in_partnerships\nFROM (\n    SELECT player_id, player_runs FROM Partnership\n    UNION ALL\n    SELECT partner_id AS player_id, partner_runs AS player_runs FROM Partnership\n) AS all_parts\nGROUP BY player_id;\n\n/* Answer the following: Which pair of players (over all matches combined) has accumulated the highest total partnership runs together?  Return player1 id, player2 id (lower id first), and their cumulative runs. */\nSELECT\n    LEAST(p1.player_id , p1.partner_id)  AS player_low_id,\n    GREATEST(p1.player_id , p1.partner_id) AS player_high_id,\n    SUM(p1.partnership_runs)              AS total_runs_together\nFROM Partnership AS p1\nGROUP BY LEAST(p1.player_id , p1.partner_id),\n         GREATEST(p1.player_id , p1.partner_id)\nORDER BY total_runs_together DESC\nLIMIT 1;\n\n/* Answer the following: For each match, identify the player with the highest individual score and return his id, the score, and his team id. */\nSELECT\n    m.match_id,\n    pm.player_id,\n    pm.runs_scored,\n    pm.team_id\nFROM PlayerMatch AS pm\nJOIN (\n    SELECT match_id,\n           MAX(runs_scored) AS top_score\n    FROM PlayerMatch\n    GROUP BY match_id\n) AS t\nON t.match_id = pm.match_id AND t.top_score = pm.runs_scored;\n\n/* Answer the following: List all matches whose highest partnership runs exceed 150. */\nSELECT DISTINCT match_id\nFROM Partnership\nGROUP BY match_id\nHAVING MAX(partnership_runs) > 150;\n\n/* Answer the following: For every match and inning, give the two batsmen involved in the highest-scoring partnership of that inning together with the partnership runs. */\nWITH Ranked AS (\n    SELECT\n        match_id,\n        inning,\n        player_id,\n        partner_id,\n        partnership_runs,\n        ROW_NUMBER() OVER (PARTITION BY match_id, inning ORDER BY partnership_runs DESC) AS rk\n    FROM Partnership\n)\nSELECT\n    match_id,\n    inning,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_id ELSE partner_id\n    END AS player1_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_id ELSE player_id\n    END AS player2_id,\n    partnership_runs\nFROM Ranked\nWHERE rk = 1;\n\n/* Answer the following: How many partnerships featured both batsmen scoring a fifty or more? */\nSELECT COUNT(*)\nFROM Partnership\nWHERE player_runs  >= 50\n  AND partner_runs >= 50;\n\n/* Answer the following: Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "evidence": "",
            "raw_question": "In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which five genres released after 2010 have the highest average rating (consider only genres with at least 20 movies)? */\nSELECT g.name,\n       AVG(m.rating) AS avg_rating\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nWHERE m.year > 2010\nGROUP BY g.id\nHAVING COUNT(*) >= 20\nORDER BY avg_rating DESC\nLIMIT 5;\n\n/* Answer the following: Who is the director that has made the largest number of Drama movies with a rating higher than 7? */\nSELECT d.name,\n       COUNT(*) AS drama_hits\nFROM directors AS d\nJOIN movie_directors AS md ON d.id = md.director_id\nJOIN movies AS m ON md.movie_id = m.id\nJOIN movie_genres AS mg ON m.id = mg.movie_id\nJOIN genres AS g ON mg.genre_id = g.id\nWHERE g.name = 'Drama'\n  AND m.rating > 7\nGROUP BY d.id\nORDER BY drama_hits DESC\nLIMIT 1;\n\n/* Answer the following: Give the ten actors who have appeared in at least five films rated above 8, showing their names and the number of such appearances. */\nSELECT a.name,\n       COUNT(*) AS high_rated_roles\nFROM actors AS a\nJOIN movie_actors AS ma ON a.id = ma.actor_id\nJOIN movies AS m ON ma.movie_id = m.id\nWHERE m.rating > 8\nGROUP BY a.id\nHAVING COUNT(*) >= 5\nORDER BY high_rated_roles DESC\nLIMIT 10;\n\n/* Answer the following: For each genre, what is the highest-rated movie released in 2020? List the genre, movie title and its rating. */\nSELECT g.name   AS genre,\n       m.title  AS top_2020_title,\n       m.rating\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nWHERE m.year = 2020\n  AND m.rating = (\n        SELECT MAX(m2.rating)\n        FROM movie_genres AS mg2\n        JOIN movies AS m2 ON mg2.movie_id = m2.id\n        WHERE mg2.genre_id = g.id\n          AND m2.year = 2020\n  );\n\n/* Answer the following: How many movies in each genre have been directed by female directors? Provide the genres in descending order of that count. */\nSELECT g.name,\n       COUNT(DISTINCT m.id) AS films_by_females\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nJOIN movie_directors AS md ON m.id = md.movie_id\nJOIN directors AS d ON md.director_id = d.id\nWHERE d.gender = 'F'\nGROUP BY g.id\nORDER BY films_by_females DESC;\n\n/* Answer the following: Which three directors have earned the highest total box-office revenue from Action films? Return their names with the summed revenue. */\nSELECT d.name,\n       SUM(m.revenue) AS total_action_revenue\nFROM directors AS d\nJOIN movie_directors AS md ON d.id = md.director_id\nJOIN movies AS m ON md.movie_id = m.id\nJOIN movie_genres AS mg ON m.id = mg.movie_id\nJOIN genres AS g ON mg.genre_id = g.id\nWHERE g.name = 'Action'\nGROUP BY d.id\nORDER BY total_action_revenue DESC\nLIMIT 3;\n\n/* Answer the following: Since 2000, which years had more than 100 releases and an average rating above 6? List those years. */\nSELECT m.year\nFROM movies AS m\nWHERE m.year >= 2000\nGROUP BY m.year\nHAVING COUNT(*) > 100\n   AND AVG(m.rating) > 6\nORDER BY m.year;\n\n/* Answer the following: Which pair of actors have co-starred in the most movies that are rated above 8? Show the two actor names and the number of such movies. */\nSELECT a1.name AS actor1,\n       a2.name AS actor2,\n       COUNT(*) AS high_rated_co_stars\nFROM movie_actors AS ma1\nJOIN movie_actors AS ma2\n     ON ma1.movie_id = ma2.movie_id\n    AND ma1.actor_id < ma2.actor_id\nJOIN actors AS a1 ON ma1.actor_id = a1.id\nJOIN actors AS a2 ON ma2.actor_id = a2.id\nJOIN movies AS m ON ma1.movie_id = m.id\nWHERE m.rating > 8\nGROUP BY a1.id, a2.id\nORDER BY high_rated_co_stars DESC\nLIMIT 1;\n\n/* Answer the following: List the directors who have never made a movie rated below 5 and show the total number of movies each has directed. */\nSELECT d.name,\n       COUNT(md.movie_id) AS total_films\nFROM directors AS d\nJOIN movie_directors AS md ON d.id = md.director_id\nJOIN movies AS m ON md.movie_id = m.id\nGROUP BY d.id\nHAVING MIN(m.rating) >= 5;\n\n/* Answer the following: Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "n_examples": 9,
            "db_id": "imdb_movies"
        },
        {
            "question": "Tell me top10 teams with the most wins across the league",
            "evidence": "",
            "raw_question": "Tell me top10 teams with the most wins across the league",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Calculate the duration of each track, classify them as short (under 3 min), medium (3\u20135 min) or long (over 5 min), then show the minimum and maximum time for each class in minutes together with the total revenue earned by the tracks in that class. */\nSELECT\n    CASE\n        WHEN length_sec < 180                 THEN 'short'\n        WHEN length_sec BETWEEN 180 AND 300   THEN 'medium'\n        ELSE                                        'long'\n    END                                                   AS duration_class,\n    MIN(length_sec) / 60.0                                AS min_minutes,\n    MAX(length_sec) / 60.0                                AS max_minutes,\n    SUM(revenue)                                          AS total_revenue\nFROM track\nGROUP BY duration_class;\n\n/* Answer the following: Group every movie by length (short < 90 min, medium 90\u2013150 min, long > 150 min) and list the minimum and maximum running time inside each group together with the total worldwide gross for that group. */\nSELECT\n    CASE\n        WHEN runtime_min < 90                  THEN 'short'\n        WHEN runtime_min BETWEEN 90 AND 150    THEN 'medium'\n        ELSE                                        'long'\n    END                                                  AS length_group,\n    MIN(runtime_min)                                     AS shortest_min,\n    MAX(runtime_min)                                     AS longest_min,\n    SUM(worldwide_gross)                                 AS group_gross\nFROM movie\nGROUP BY length_group;\n\n/* Answer the following: Classify podcast episodes as bite-size (<10 min), standard (10\u201330 min) or marathon (>30 min).  For each class return the minimum length, maximum length and the total advertising revenue generated. */\nSELECT\n    CASE\n        WHEN duration_sec < 600                   THEN 'bite-size'\n        WHEN duration_sec BETWEEN 600 AND 1800    THEN 'standard'\n        ELSE                                           'marathon'\n    END                                                     AS ep_type,\n    MIN(duration_sec) / 60.0                                AS min_min,\n    MAX(duration_sec) / 60.0                                AS max_min,\n    SUM(ad_revenue)                                         AS ads_total\nFROM episode\nGROUP BY ep_type;\n\n/* Answer the following: Divide audio-books into tiny (<2 hr), mid-size (2\u20136 hr) and epic (>6 hr).  Show the minimum and maximum running time (in hours) as well as total sales for every size group. */\nSELECT\n    CASE\n        WHEN length_min < 120                   THEN 'tiny'\n        WHEN length_min BETWEEN 120 AND 360     THEN 'mid-size'\n        ELSE                                         'epic'\n    END                                                AS size_bucket,\n    MIN(length_min) / 60.0                             AS min_hours,\n    MAX(length_min) / 60.0                             AS max_hours,\n    SUM(sales_amount)                                  AS total_sales\nFROM audiobook\nGROUP BY size_bucket;\n\n/* Answer the following: Put training videos into short (<15 min), medium (15\u201340 min) or long (>40 min).  Return, for each label, the minimum / maximum video length (minutes) and the combined subscription revenue produced. */\nSELECT\n    CASE\n        WHEN duration_min < 15                 THEN 'short'\n        WHEN duration_min BETWEEN 15 AND 40    THEN 'medium'\n        ELSE                                        'long'\n    END                                               AS video_len_cat,\n    MIN(duration_min)                                 AS min_min,\n    MAX(duration_min)                                 AS max_min,\n    SUM(subscription_rev)                             AS sub_total\nFROM training_video\nGROUP BY video_len_cat;\n\n/* Answer the following: Classify workout sessions as quick (<20 min), regular (20\u201350 min) or endurance (>50 min).  Provide the shortest and longest session time and the total pay-per-view income for each classification. */\nSELECT\n    CASE\n        WHEN session_min < 20                   THEN 'quick'\n        WHEN session_min BETWEEN 20 AND 50      THEN 'regular'\n        ELSE                                         'endurance'\n    END                                                   AS session_type,\n    MIN(session_min)                                      AS min_session,\n    MAX(session_min)                                      AS max_session,\n    SUM(ppv_income)                                       AS income_total\nFROM workout_session\nGROUP BY session_type;\n\n/* Answer the following: Categorize flights by distance: short-haul (<800 km), medium-haul (800\u20132500 km) and long-haul (>2500 km).  For every category return the minimum and maximum distance plus the aggregate fuel burned. */\nSELECT\n    CASE\n        WHEN distance_km < 800                    THEN 'short-haul'\n        WHEN distance_km BETWEEN 800 AND 2500     THEN 'medium-haul'\n        ELSE                                           'long-haul'\n    END                                                   AS haul_type,\n    MIN(distance_km)                                        AS min_km,\n    MAX(distance_km)                                        AS max_km,\n    SUM(fuel_kg)                                            AS total_fuel\nFROM flight\nGROUP BY haul_type;\n\n/* Answer the following: Split books by page count into novella (<150 pages), novel (150\u2013400 pages), tome (>400 pages).  Output the minimum and maximum pages in each slot together with total royalty earned. */\nSELECT\n    CASE\n        WHEN pages < 150                     THEN 'novella'\n        WHEN pages BETWEEN 150 AND 400       THEN 'novel'\n        ELSE                                      'tome'\n    END                                             AS page_band,\n    MIN(pages)                                      AS min_pages,\n    MAX(pages)                                      AS max_pages,\n    SUM(royalty)                                    AS royalty_total\nFROM book\nGROUP BY page_band;\n\n/* Answer the following: Group mobile-app user sessions into micro (<2 min), normal (2\u201310 min), or extended (>10 min).  For each group list the minimum/maximum session duration (minutes) and total in-app purchase revenue generated. */\nSELECT\n    CASE\n        WHEN session_sec < 120                  THEN 'micro'\n        WHEN session_sec BETWEEN 120 AND 600    THEN 'normal'\n        ELSE                                         'extended'\n    END                                                  AS session_group,\n    MIN(session_sec) / 60.0                             AS min_min,\n    MAX(session_sec) / 60.0                             AS max_min,\n    SUM(inapp_revenue)                                  AS revenue_total\nFROM app_session\nGROUP BY session_group;\n\n/* Answer the following: Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "n_examples": 9,
            "db_id": "music"
        },
        {
            "question": "Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "evidence": "",
            "raw_question": "Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which are the top 3 companies by average salary in the entire country after stripping all non-numeric characters from the salary column? */\nSELECT company_name\nFROM salary_data\nGROUP BY company_name\nORDER BY AVG(\n         CAST( REGEXP_REPLACE(salary , '[^0-9.]' , '' , 'g') AS NUMERIC)\n       ) DESC\nLIMIT 3;\n\n\n/* Answer the following: What is the median salary (after cleaning) of employees located in Bangalore? */\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY clean_salary) AS median_salary\nFROM (\n        SELECT CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC) AS clean_salary\n        FROM salary_data\n        WHERE location = 'Bangalore'\n     ) AS sub;\n\n\n/* Answer the following: Compare the national average salary of employees in the \u201cIT\u201d sector to those in the \u201cManufacturing\u201d sector.  Return two columns: sector and avg_salary. */\nSELECT sector,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nWHERE sector IN ('IT','Manufacturing')\nGROUP BY sector;\n\n\n/* Answer the following: For every company that operates in Chennai, show the absolute difference between its average salary in Chennai and the national average salary for that company (after cleaning salaries). */\nWITH national AS (\n    SELECT company_name,\n           AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS nat_avg\n    FROM salary_data\n    GROUP BY company_name\n),\nchennai AS (\n    SELECT company_name,\n           AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS chn_avg\n    FROM salary_data\n    WHERE location = 'Chennai'\n    GROUP BY company_name\n)\nSELECT 'Chennai'                     AS location,\n       c.company_name,\n       c.chn_avg                     AS avg_salary_chennai,\n       n.nat_avg                     AS avg_salary_national,\n       ABS(c.chn_avg - n.nat_avg)    AS diff\nFROM chennai c\nJOIN national n USING (company_name);\n\n\n/* Answer the following: List the 5 job titles in Kolkata that have the highest average cleaned salary.  Show the job title and its average salary. */\nSELECT job_title,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nWHERE location = 'Kolkata'\nGROUP BY job_title\nORDER BY avg_salary DESC\nLIMIT 5;\n\n\n/* Answer the following: Which city has the highest overall average salary once salaries are converted to numeric values?  Return the city name and its average salary. */\nSELECT location,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nGROUP BY location\nORDER BY avg_salary DESC\nLIMIT 1;\n\n\n/* Answer the following: How many employees earn more than 100000 (after removing currency symbols and commas) across the whole dataset? */\nSELECT COUNT(*) AS high_earners\nFROM salary_data\nWHERE CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC) > 100000;\n\n\n/* Answer the following: Which company in Gurgaon shows the largest spread between its maximum and minimum cleaned salaries?  Return the company and that spread. */\nSELECT company_name,\n       (MAX(clean_salary) - MIN(clean_salary)) AS salary_spread\nFROM (\n        SELECT company_name,\n               CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC) AS clean_salary\n        FROM salary_data\n        WHERE location = 'Gurgaon'\n     ) AS t\nGROUP BY company_name\nORDER BY salary_spread DESC\nLIMIT 1;\n\n\n/* Answer the following: Show the 10 employees with the highest salaries nationally after converting salary to a numeric field, displaying their employee_id, company_name, and cleaned salary. */\nSELECT employee_id,\n       company_name,\n       CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC) AS clean_salary\nFROM salary_data\nORDER BY clean_salary DESC\nLIMIT 10;\n\n/* Answer the following: Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "n_examples": 9,
            "db_id": "education_business"
        },
        {
            "question": "For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "evidence": "",
            "raw_question": "For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Who was the highest wicket-taker in the 2021 IPL season, ignoring run-outs and other dismissals that do not credit the bowler? */\nSELECT P.player_name ,\n       COUNT(*) AS wickets\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.tournament = 'IPL'\n  AND  M.season     = 2021\n  AND  B.wicket_type IS NOT NULL\n  AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field' , 'handled the ball')\nGROUP  BY P.player_name\nORDER  BY wickets DESC\nLIMIT  1;\n\n\n/* Answer the following: What was Pat Cummins\u2019 economy rate in the 2019 Ashes series (runs off the bat per over, wides and no-balls excluded)? */\nSELECT ( SUM(B.runs_off_bat) * 1.0 ) / ( COUNT(*) / 6.0 ) AS economy_rate\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  P.player_name = 'Pat Cummins'\n  AND  M.series      = 'The Ashes'\n  AND  M.season      = 2019\n  AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') );\n\n\n/* Answer the following: List every bowler whose career T20I strike-rate is below 18 (minimum 50 wickets), ordered from best to worst.  Strike-rate is balls per wicket. */\nSELECT P.player_name ,\n       ( COUNT(*) * 1.0 ) /\n       SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) AS strike_rate\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.match_format = 'T20I'\n  AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\nGROUP  BY P.player_name\nHAVING SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) >= 50\n   AND ( COUNT(*) * 1.0 ) /\n       SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) < 18\nORDER  BY strike_rate ASC;\n\n\n/* Answer the following: How many \u2018bowled\u2019 dismissals did each bowler achieve in the 2022 international season? */\nSELECT P.player_name ,\n       COUNT(*) AS bowled_wkts\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.season      = 2022\n  AND  B.wicket_type = 'bowled'\nGROUP  BY P.player_name\nORDER  BY bowled_wkts DESC;\n\n\n/* Answer the following: For every bowler, give his best bowling figure in the 2015 World Cup (format \u201cwickets-runs\u201d, runs exclude wides and no-balls). */\nWITH per_match AS (\n    SELECT B.bowler_id ,\n           B.match_id ,\n           SUM( CASE WHEN B.wicket_type IS NOT NULL\n                     AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                     THEN 1 ELSE 0 END ) AS wkts ,\n           SUM( B.runs_off_bat )          AS runs\n    FROM   Balls   AS B\n    JOIN   Matches AS M ON M.match_id = B.match_id\n    WHERE  M.tournament = 'World Cup'\n      AND  M.season     = 2015\n      AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\n    GROUP  BY B.bowler_id , B.match_id\n)\nSELECT P.player_name ,\n       CONCAT(wkts , '-' , runs) AS best_figure\nFROM   (\n       SELECT bowler_id , wkts , runs ,\n              ROW_NUMBER() OVER (PARTITION BY bowler_id\n                                 ORDER BY wkts DESC , runs ASC) AS rn\n       FROM   per_match\n) X\nJOIN   Players P ON P.player_id = X.bowler_id\nWHERE  rn = 1;\n\n\n/* Answer the following: Which bowler delivered the most maiden overs (overs conceding zero runs off the bat) in Test matches during 2020? */\nWITH over_runs AS (\n    SELECT B.bowler_id ,\n           B.match_id ,\n           B.innings_no ,\n           B.over_id ,\n           SUM(B.runs_off_bat) AS runs_in_over\n    FROM   Balls   AS B\n    JOIN   Matches AS M ON M.match_id = B.match_id\n    WHERE  M.match_format = 'Test'\n      AND  M.season       = 2020\n      AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\n    GROUP  BY B.bowler_id , B.match_id , B.innings_no , B.over_id\n)\nSELECT P.player_name ,\n       COUNT(*) AS maiden_overs\nFROM   over_runs\nJOIN   Players P ON P.player_id = over_runs.bowler_id\nWHERE  runs_in_over = 0\nGROUP  BY P.player_name\nORDER  BY maiden_overs DESC\nLIMIT  1;\n\n\n/* Answer the following: What was each team\u2019s average runs conceded per over in the 2021 season (calculated only from runs off the bat and legal balls)? */\nSELECT T.team_name ,\n       ( SUM(B.runs_off_bat) * 1.0 ) / ( COUNT(*) / 6.0 ) AS runs_per_over\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id = B.match_id\nJOIN   Teams   AS T ON T.team_id  = M.team1_id   -- use bowling side; assumes team1 bowls first\nWHERE  M.season = 2021\n  AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\nGROUP  BY T.team_name\nORDER  BY runs_per_over ASC;\n\n\n/* Answer the following: Identify the bowler who conceded the most runs in a single over during the 2018 IPL (runs_off_bat only).  Show the over\u2019s total runs as well. */\nWITH over_totals AS (\n    SELECT B.bowler_id ,\n           B.match_id ,\n           B.innings_no ,\n           B.over_id ,\n           SUM(B.runs_off_bat) AS over_runs\n    FROM   Balls B\n    JOIN   Matches M ON M.match_id = B.match_id\n    WHERE  M.tournament = 'IPL'\n      AND  M.season     = 2018\n    GROUP  BY B.bowler_id , B.match_id , B.innings_no , B.over_id\n)\nSELECT P.player_name ,\n       over_runs\nFROM   over_totals OT\nJOIN   Players P ON P.player_id = OT.bowler_id\nORDER  BY over_runs DESC\nLIMIT  1;\n\n\n/* Answer the following: How many five-wicket hauls has Ravichandran Ashwin taken in Test matches?  (Five-wicket haul = 5 or more wickets in an innings.) */\nWITH per_innings AS (\n    SELECT B.match_id ,\n           B.innings_no ,\n           SUM( CASE WHEN B.wicket_type IS NOT NULL\n                     AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                     THEN 1 ELSE 0 END ) AS wkts\n    FROM   Balls   AS B\n    JOIN   Players AS P ON P.player_id = B.bowler_id\n    JOIN   Matches AS M ON M.match_id  = B.match_id\n    WHERE  P.player_name = 'Ravichandran Ashwin'\n      AND  M.match_format = 'Test'\n    GROUP  BY B.match_id , B.innings_no\n)\nSELECT COUNT(*) AS five_wkt_hauls\nFROM   per_innings\nWHERE  wkts >= 5;\n\n/* Answer the following: Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "evidence": "",
            "raw_question": "Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which player has bowled the greatest number of overs in his entire IPL career? greatest number of overs refers to MAX(SUM(overs)) per player */\nSELECT P.player_name\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nGROUP BY P.player_id, P.player_name\nORDER BY SUM(PM.overs) DESC\nLIMIT 1;\n\n/* Answer the following: List the id, name and total runs of the top-5 run-scorers in IPL history. total runs refers to SUM(batting_score) */\nSELECT P.player_id,\n       P.player_name,\n       SUM(PM.batting_score) AS total_runs\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nGROUP BY P.player_id, P.player_name\nORDER BY total_runs DESC\nLIMIT 5;\n\n/* Answer the following: Give the names of all right-hand batsmen who bowl left-arm spin. right-hand batsmen refers to batting_hand = 'Right-hand bat'; left-arm spin refers to bowling_skill LIKE '%left-arm%' */\nSELECT player_name\nFROM player\nWHERE batting_hand = 'Right-hand bat'\n  AND bowling_skill LIKE '%left-arm%';\n\n/* Answer the following: What is the highest individual batting score ever recorded in an IPL match? highest individual batting score refers to MAX(batting_score) */\nSELECT MAX(batting_score)\nFROM player_match;\n\n/* Answer the following: Which player has the best bowling figure in a single match? best bowling figure means the most wickets in one match, and if tied the fewest runs conceded; show player name, wickets and runs conceded */\nSELECT P.player_name,\n       PM.wickets,\n       PM.runs_conceded\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nWHERE (PM.wickets, PM.runs_conceded) IN (\n      SELECT PM2.wickets,\n             MIN(PM2.runs_conceded)\n      FROM player_match AS PM2\n      GROUP BY PM2.wickets\n      ORDER BY PM2.wickets DESC\n      LIMIT 1\n);\n\n/* Answer the following: Find the strike rate of \u201cVirat Kohli\u201d across his career. strike rate refers to 100 * SUM(runs) / SUM(balls) */\nSELECT 100.0 * SUM(PM.batting_score) / SUM(PM.balls) AS strike_rate\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nWHERE P.player_name = 'Virat Kohli';\n\n/* Answer the following: Provide the name of every player who has scored at least one century (batting_score \u2265 100) and taken at least three wickets in the same match. */\nSELECT DISTINCT P.player_name\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nWHERE PM.batting_score >= 100\n  AND PM.wickets >= 3;\n\n/* Answer the following: For each IPL season, which player scored the most total runs? output season and player name */\nSELECT M.season,\n       P.player_name\nFROM match AS M\nJOIN player_match AS PM ON M.match_id = PM.match_id\nJOIN player AS P ON P.player_id = PM.player_id\nGROUP BY M.season, P.player_name\nHAVING SUM(PM.batting_score) = (\n      SELECT MAX(total_runs)\n      FROM (\n           SELECT SUM(PM2.batting_score) AS total_runs\n           FROM match AS M2\n           JOIN player_match AS PM2 ON M2.match_id = PM2.match_id\n           WHERE M2.season = M.season\n           GROUP BY PM2.player_id\n      )\n);\n\n/* Answer the following: How many distinct players have taken at least 50 wickets in their IPL careers? at least 50 wickets refers to SUM(wickets) >= 50 */\nSELECT COUNT(*)\nFROM (\n     SELECT player_id\n     FROM player_match\n     GROUP BY player_id\n     HAVING SUM(wickets) >= 50\n) AS T;\n\n/* Answer the following: For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "n_examples": 9,
            "db_id": "IPL"
        },
        {
            "question": "Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "evidence": "",
            "raw_question": "Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: In step 1, which versions have a greater number of problems solved by the \u2018Stack\u2019 model (test_score = 1) than by all non-\u2018Stack\u2019 models combined? solved refers to test_score = 1; step 1 refers to step = 1 */\nSELECT R1.version\nFROM results AS R1\nWHERE R1.model = 'Stack'\n  AND R1.step = 1\n  AND R1.test_score = 1\nGROUP BY R1.version\nHAVING COUNT(*) >\n       (\n         SELECT COUNT(*)\n         FROM results AS R2\n         WHERE R2.version = R1.version\n           AND R2.step = 1\n           AND R2.model <> 'Stack'\n           AND R2.test_score = 1\n       );\n\n/* Answer the following: For every problem, what is the highest test score achieved in version \u2018v3\u2019 across all models and steps? version \u2018v3\u2019 refers to version = 'v3' */\nSELECT problem_id, MAX(test_score) AS max_test_score\nFROM results\nWHERE version = 'v3'\nGROUP BY problem_id;\n\n/* Answer the following: List the problems where any model achieved a perfect validation score (validation_score = 1) but failed the test (test_score < 1) in step 2. step 2 refers to step = 2 */\nSELECT DISTINCT problem_id\nFROM results\nWHERE step = 2\n  AND validation_score = 1\n  AND test_score < 1;\n\n/* Answer the following: Which models have an average validation score higher than their average test score across all problems, versions, and steps? */\nSELECT model\nFROM results\nGROUP BY model\nHAVING AVG(validation_score) > AVG(test_score);\n\n/* Answer the following: Give the total number of result rows whose test score is NULL. test score is NULL refers to test_score IS NULL */\nSELECT COUNT(*)\nFROM results\nWHERE test_score IS NULL;\n\n/* Answer the following: In step 3, which problem has the largest gap between the \u2018Stack\u2019 model\u2019s test score and the best non-\u2018Stack\u2019 model\u2019s test score within the same version? step 3 refers to step = 3; largest gap refers to MAX(Stack_score \u2013 Best_other_score) */\nSELECT R1.problem_id\nFROM (\n    SELECT version,\n           problem_id,\n           MAX(test_score) AS stack_score\n    FROM results\n    WHERE model = 'Stack'\n      AND step = 3\n    GROUP BY version, problem_id\n) AS R1\nJOIN (\n    SELECT version,\n           problem_id,\n           MAX(test_score) AS best_other_score\n    FROM results\n    WHERE model <> 'Stack'\n      AND step = 3\n    GROUP BY version, problem_id\n) AS R2\nON R1.version = R2.version\nAND R1.problem_id = R2.problem_id\nORDER BY (R1.stack_score - R2.best_other_score) DESC\nLIMIT 1;\n\n/* Answer the following: How many problems, across all versions, were solved (test_score = 1) by at least three different models in the same step? solved refers to test_score = 1 */\nSELECT COUNT(DISTINCT problem_id)\nFROM (\n    SELECT version,\n           step,\n           problem_id,\n           COUNT(DISTINCT model) AS model_cnt\n    FROM results\n    WHERE test_score = 1\n    GROUP BY version, step, problem_id\n    HAVING COUNT(DISTINCT model) >= 3\n) AS sub;\n\n/* Answer the following: Retrieve the problems where the \u2018Stack\u2019 model\u2019s train score is lower than its test score in any version and step. train_score lower than test_score refers to train_score < test_score */\nSELECT DISTINCT problem_id\nFROM results\nWHERE model = 'Stack'\n  AND train_score < test_score;\n\n/* Answer the following: What is the average test score of non-\u2018Stack\u2019 models in step 3 across all versions? non-\u2018Stack\u2019 models refers to model <> 'Stack'; step 3 refers to step = 3 */\nSELECT AVG(test_score)\nFROM results\nWHERE model <> 'Stack'\n  AND step = 3;\n\n/* Answer the following: Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "n_examples": 9,
            "db_id": "stacking"
        },
        {
            "question": "Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "evidence": "",
            "raw_question": "Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the highest test-score reached by a non-'Stack' component for every model? non-'Stack' component refers to component <> 'Stack'. */\nSELECT \n    M.name , \n    M.version , \n    MAX(S.test_score) AS best_non_stack_score\nFROM Models AS M\nJOIN Steps  AS S  ON S.model_id = M.model_id\nWHERE S.component <> 'Stack'\nGROUP BY M.name , M.version ;\n\n/* Answer the following: How many models are classified as having a strong status? strong status refers to EXISTS a step where MAX(test_score) of non-'Stack' components < test_score of the 'Stack' component. */\nSELECT COUNT(*) \nFROM Models AS M\nWHERE EXISTS (\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component  = 'Stack'\n          AND S1.test_score > (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n);\n\n/* Answer the following: List the name and version of every model with soft status but without strong status. soft status refers to one step where MAX(non-'Stack') = Stack, while no step satisfies strong status. */\nSELECT DISTINCT M.name , M.version\nFROM Models AS M\nWHERE EXISTS (               -- at least one soft step\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component = 'Stack'\n          AND S1.test_score = (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n)\nAND NOT EXISTS (             -- zero strong steps\n        SELECT 1\n        FROM Steps AS S3\n        WHERE S3.model_id = M.model_id\n          AND S3.component = 'Stack'\n          AND S3.test_score > (\n                SELECT MAX(S4.test_score)\n                FROM Steps AS S4\n                WHERE S4.model_id = M.model_id\n                  AND S4.step_number = S3.step_number\n                  AND S4.component <> 'Stack'\n          )\n);\n\n/* Answer the following: For every L1_model, how many associated models (name, version) have a strong status? */\nSELECT \n    M.l1_model , \n    COUNT(DISTINCT M.model_id) AS strong_model_cnt\nFROM Models AS M\nWHERE EXISTS (\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component = 'Stack'\n          AND S1.test_score > (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n)\nGROUP BY M.l1_model ;\n\n/* Answer the following: Which L1_model has the highest average 'Stack' test score across all of its models? 'Stack' refers to component = 'Stack'. */\nSELECT \n    M.l1_model\nFROM Models  AS M\nJOIN Steps   AS S ON S.model_id = M.model_id\nWHERE S.component = 'Stack'\nGROUP BY M.l1_model\nORDER BY AVG(S.test_score) DESC\nLIMIT 1;\n\n/* Answer the following: Which model (name and version) shows the largest positive gap between its best 'Stack' score and its best non-'Stack' score? */\nWITH best_scores AS (\n    SELECT \n        M.model_id ,\n        M.name ,\n        M.version ,\n        MAX(CASE WHEN S.component = 'Stack'     THEN S.test_score END) AS best_stack ,\n        MAX(CASE WHEN S.component <> 'Stack'   THEN S.test_score END) AS best_non_stack\n    FROM Models AS M\n    JOIN Steps  AS S ON S.model_id = M.model_id\n    GROUP BY M.model_id , M.name , M.version\n)\nSELECT \n    name , \n    version\nFROM best_scores\nORDER BY (best_stack - best_non_stack) DESC\nLIMIT 1;\n\n/* Answer the following: For each model and each step, indicate whether the 'Stack' component is the top performer (1) or not (0). */\nSELECT \n    M.name ,\n    M.version ,\n    S1.step_number ,\n    CASE \n        WHEN S1.test_score >= (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id   = S1.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component  <> 'Stack'\n        ) THEN 1\n        ELSE 0\n    END AS stack_is_best\nFROM Models AS M\nJOIN Steps  AS S1 ON S1.model_id = M.model_id\nWHERE S1.component = 'Stack';\n\n/* Answer the following: What is the average number of steps executed per model? */\nSELECT AVG(step_cnt)\nFROM (\n    SELECT model_id , COUNT(*) AS step_cnt\n    FROM Steps\n    GROUP BY model_id\n) AS sub ;\n\n/* Answer the following: Which models (name and version) do not contain a 'Stack' component in any of their steps? */\nSELECT DISTINCT M.name , M.version\nFROM Models AS M\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM Steps AS S\n        WHERE S.model_id = M.model_id\n          AND S.component = 'Stack'\n);\n\n/* Answer the following: Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "n_examples": 9,
            "db_id": "stacking"
        },
        {
            "question": "Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "evidence": "",
            "raw_question": "Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many total records correspond to the Stack model across all steps and versions? */\nSELECT COUNT(*) \nFROM model_comparison \nWHERE model_type = 'Stack';\n\n/* Answer the following: List every distinct version that has at least one traditional model entry. */\nSELECT DISTINCT version \nFROM model_comparison \nWHERE model_type = 'Traditional';\n\n/* Answer the following: Which step contains the highest number of traditional\u2013model rows, and what is that row-count? */\nSELECT step, COUNT(*) AS row_cnt\nFROM model_comparison\nWHERE model_type = 'Traditional'\nGROUP BY step\nORDER BY row_cnt DESC\nLIMIT 1;\n\n/* Answer the following: For each version, give the number of Stack\u2013model rows, sorted from most to fewest. */\nSELECT version, COUNT(*) AS stack_rows\nFROM model_comparison\nWHERE model_type = 'Stack'\nGROUP BY version\nORDER BY stack_rows DESC;\n\n/* Answer the following: Which L1_model categories appear in both the Stack and Traditional model groups? */\nSELECT DISTINCT L1_model\nFROM model_comparison\nWHERE model_type = 'Stack'\nINTERSECT\nSELECT DISTINCT L1_model\nFROM model_comparison\nWHERE model_type = 'Traditional';\n\n/* Answer the following: Find the version with the fewest distinct steps among Stack models and return that version together with the number of different steps it contains. */\nSELECT version, COUNT(DISTINCT step) AS steps_cnt\nFROM model_comparison\nWHERE model_type = 'Stack'\nGROUP BY version\nORDER BY steps_cnt ASC\nLIMIT 1;\n\n/* Answer the following: What is the total number of traditional model rows whose step number is greater than 5? */\nSELECT COUNT(*) \nFROM model_comparison\nWHERE model_type = 'Traditional' \n  AND step > 5;\n\n/* Answer the following: Retrieve all L1_model categories whose total occurrence in the entire table exceeds 100. */\nSELECT L1_model\nFROM model_comparison\nGROUP BY L1_model\nHAVING COUNT(*) > 100;\n\n/* Answer the following: Among traditional models, which L1_model appears most often in version 'v3', and what is its occurrence count? */\nSELECT L1_model, COUNT(*) AS occ_cnt\nFROM model_comparison\nWHERE model_type = 'Traditional' \n  AND version = 'v3'\nGROUP BY L1_model\nORDER BY occ_cnt DESC\nLIMIT 1;\n\n/* Answer the following: Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "n_examples": 9,
            "db_id": "stacking"
        },
        {
            "question": "For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "evidence": "",
            "raw_question": "For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which packaging combination contains the largest number of distinct leaf-level items after fully expanding every nested layer?  A leaf-level item is any component whose id exists in the Items table (i.e., it is not itself a package). */\nWITH RECURSIVE unpack AS (\n    /* start with components that are listed directly inside a package */\n    SELECT \n        pc.parent_package_id       AS root_pkg,\n        pc.child_component_id      AS component_id\n    FROM package_components AS pc\n    \n    UNION ALL\n        \n    /* if that component is itself a package, keep drilling down */\n    SELECT \n        u.root_pkg,\n        pc.child_component_id\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)           -- only keep walking when the node is itself a package\n)\nSELECT p.package_name\nFROM unpack AS u\nJOIN packages AS p ON p.package_id = u.root_pkg\nWHERE u.component_id IN (SELECT item_id FROM items)                      -- keep only leaves\nGROUP BY p.package_id, p.package_name\nORDER BY COUNT(DISTINCT u.component_id) DESC\nLIMIT 1;\n\n\n\n/* Answer the following: In the combination called \u201cGift Box Deluxe\u201d, what is the total quantity of the item \u201cChocolate Bar\u201d after all inner packages have been unpacked? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.child_component_id      AS component_id,\n        pc.child_quantity          AS qty\n    FROM packages        AS p\n    JOIN package_components AS pc\n         ON pc.parent_package_id = p.package_id\n    WHERE p.package_name = 'Gift Box Deluxe'\n    \n    UNION ALL\n    \n    SELECT \n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT COALESCE(SUM(u.qty),0) AS total_chocolate_bars\nFROM unpack AS u\nJOIN items  AS i ON i.item_id = u.component_id\nWHERE i.item_name = 'Chocolate Bar';\n\n\n\n/* Answer the following: List the five leaf-level items that appear in the largest number of different packaging combinations (after recursive expansion). */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT i.item_name,\n       COUNT(DISTINCT u.root_pkg) AS combination_count\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id\nGROUP BY i.item_id, i.item_name\nORDER BY combination_count DESC\nLIMIT 5;\n\n\n\n/* Answer the following: For every packaging combination, what is the deepest nesting level encountered inside its hierarchy?  (Top-level components are depth 1.) */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id,\n        1                      AS depth\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id,\n        u.depth + 1\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT p.package_name,\n       MAX(depth) AS max_depth\nFROM unpack AS u\nJOIN packages AS p ON p.package_id = u.root_pkg\nGROUP BY p.package_id, p.package_name\nORDER BY max_depth DESC;\n\n\n\n/* Answer the following: Return the names of packaging combinations whose immediate children are all leaf-level items (i.e., they have no nested packages inside them). */\nSELECT p.package_name\nFROM packages AS p\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM package_components AS pc\n        WHERE pc.parent_package_id = p.package_id\n          AND pc.child_component_id IN (SELECT package_id FROM packages)   -- child that is itself a package\n);\n\n\n\n/* Answer the following: What is the total weight (in grams) of the \u201cHoliday Bundle\u201d combination, assuming each leaf item\u2019s weight is stored in items.item_weight? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.child_component_id  AS component_id,\n        pc.child_quantity      AS qty\n    FROM packages AS p\n    JOIN package_components AS pc\n         ON pc.parent_package_id = p.package_id\n    WHERE p.package_name = 'Holiday Bundle'\n    \n    UNION ALL\n    \n    SELECT \n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT SUM(u.qty * i.item_weight) AS total_weight_grams\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id;\n\n\n\n/* Answer the following: How many distinct packaging combinations contain the leaf item \u201cAA Battery\u201d at least once after all nesting is resolved? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT COUNT(DISTINCT u.root_pkg) AS combos_with_aa_battery\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id\nWHERE i.item_name = 'AA Battery';\n\n\n\n/* Answer the following: For each leaf-level item, compute its total quantity summed across every packaging combination in the catalog (fully expanded). */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id,\n        pc.child_quantity      AS qty\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT i.item_name,\n       SUM(u.qty) AS total_quantity_across_all_combos\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id\nGROUP BY i.item_id, i.item_name\nORDER BY total_quantity_across_all_combos DESC;\n\n\n\n/* Answer the following: What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id,\n        pc.child_quantity      AS qty\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n),\nper_combo AS (\n    SELECT \n        u.root_pkg,\n        SUM(u.qty) AS total_qty_per_combo\n    FROM unpack AS u\n    WHERE u.component_id IN (SELECT item_id FROM items)           -- keep only leaf items\n    GROUP BY u.root_pkg\n)\nSELECT AVG(total_qty_per_combo) AS avg_total_quantity_per_combo\nFROM per_combo;\n\n/* Answer the following: What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "evidence": "",
            "raw_question": "Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which top-level packaging containers (those that are not placed inside any other packaging) hold more than 3 distinct kinds of items directly inside them?  */\nSELECT p.name\nFROM Packaging AS p\nJOIN PackagingItem AS pi ON pi.packaging_id = p.id\nWHERE p.parent_packaging_id IS NULL\nGROUP BY p.id, p.name\nHAVING COUNT(DISTINCT pi.item_id) > 3;\n\n/* Answer the following: What is the total quantity of the item called 'Screws' contained anywhere inside the packaging container named 'Box A', counting every nested level beneath it? */\nWITH RECURSIVE descendants AS (\n    SELECT id\n    FROM Packaging\n    WHERE name = 'Box A'\n    UNION ALL\n    SELECT c.id\n    FROM Packaging AS c\n    JOIN descendants AS d ON c.parent_packaging_id = d.id\n)\nSELECT SUM(pi.quantity)\nFROM descendants AS d\nJOIN PackagingItem AS pi ON pi.packaging_id = d.id\nJOIN Item AS i        ON i.id  = pi.item_id\nWHERE i.name = 'Screws';\n\n/* Answer the following: List the names of all items that appear in at least five different top-level containers. */\nSELECT i.name\nFROM Item AS i\nJOIN PackagingItem AS pi ON pi.item_id = i.id\nJOIN Packaging     AS p  ON p.id        = pi.packaging_id\nWHERE p.parent_packaging_id IS NULL\nGROUP BY i.id, i.name\nHAVING COUNT(DISTINCT p.id) >= 5;\n\n/* Answer the following: Which packaging container has the greatest total quantity of items directly inside it, and what is that total? */\nSELECT p.name, SUM(pi.quantity) AS total_quantity\nFROM Packaging AS p\nJOIN PackagingItem AS pi ON pi.packaging_id = p.id\nGROUP BY p.id, p.name\nORDER BY total_quantity DESC\nLIMIT 1;\n\n/* Answer the following: What are the names of items whose overall quantity across the entire warehouse (all packaging combined) is less than 10? */\nSELECT i.name\nFROM Item AS i\nJOIN PackagingItem AS pi ON pi.item_id = i.id\nGROUP BY i.id, i.name\nHAVING SUM(pi.quantity) < 10;\n\n/* Answer the following: Which non-top-level packaging units (those that have a parent) do not contain any items directly inside them? */\nSELECT p.name\nFROM Packaging AS p\nLEFT JOIN PackagingItem AS pi ON pi.packaging_id = p.id\nWHERE p.parent_packaging_id IS NOT NULL\nGROUP BY p.id, p.name\nHAVING COUNT(pi.item_id) = 0;\n\n/* Answer the following: What is the average quantity per item directly placed in the container named 'Crate 12'? */\nSELECT AVG(pi.quantity) AS avg_quantity\nFROM Packaging AS p\nJOIN PackagingItem AS pi ON pi.packaging_id = p.id\nWHERE p.name = 'Crate 12';\n\n/* Answer the following: Which single item entry records the largest quantity in any one packaging line, and how many units was that? */\nSELECT i.name, pi.quantity\nFROM PackagingItem AS pi\nJOIN Item AS i ON i.id = pi.item_id\nORDER BY pi.quantity DESC\nLIMIT 1;\n\n/* Answer the following: For each top-level container, how many distinct sub-packaging units (at any depth) does it contain? */\nWITH RECURSIVE hierarchy AS (\n    SELECT id AS root_id, id AS child_id\n    FROM Packaging\n    WHERE parent_packaging_id IS NULL\n    UNION ALL\n    SELECT h.root_id, p.id\n    FROM hierarchy AS h\n    JOIN Packaging AS p ON p.parent_packaging_id = h.child_id\n)\nSELECT pr.name AS top_container,\n       COUNT(DISTINCT h.child_id) - 1 AS total_subpackages   -- subtract 1 to exclude the root itself\nFROM hierarchy AS h\nJOIN Packaging AS pr ON pr.id = h.root_id\nGROUP BY pr.id, pr.name;\n\n/* Answer the following: Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "evidence": "",
            "raw_question": "Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For order 423, what are the distinct product IDs together with the total quantity ordered for each? */\nSELECT product_id,\n       SUM(quantity) AS ordered_qty\nFROM order_lines\nWHERE order_id = 423\nGROUP BY product_id;\n\n/* Answer the following: For the products that appear on order 423, list every inventory location in warehouse 1, ordering them by oldest purchase_date and then by smallest on_hand quantity. */\nSELECT I.product_id,\n       I.id      AS location_id,\n       I.aisle,\n       I.position,\n       I.on_hand,\n       I.purchase_date\nFROM inventory AS I\nWHERE I.warehouse_id = 1\n  AND I.product_id IN (SELECT product_id\n                       FROM order_lines\n                       WHERE order_id = 423)\nORDER BY I.purchase_date,\n         I.on_hand;\n\n/* Answer the following: Provide the cumulative ordered quantity after each line for products that appear more than once on order 423. */\nSELECT line_number,\n       product_id,\n       quantity,\n       SUM(quantity) OVER (PARTITION BY product_id\n                           ORDER BY line_number) AS cumulative_qty\nFROM order_lines\nWHERE order_id = 423\nORDER BY line_number;\n\n/* Answer the following: Which products on order 423 do not have enough inventory in warehouse 1 to cover the total ordered quantity? */\nWITH ordered AS (\n  SELECT product_id,\n         SUM(quantity) AS ordered_qty\n  FROM order_lines\n  WHERE order_id = 423\n  GROUP BY product_id\n),\nstock AS (\n  SELECT product_id,\n         SUM(on_hand) AS available_qty\n  FROM inventory\n  WHERE warehouse_id = 1\n  GROUP BY product_id\n)\nSELECT o.product_id\nFROM ordered AS o\nLEFT JOIN stock AS s\n       ON s.product_id = o.product_id\nWHERE COALESCE(s.available_qty,0) < o.ordered_qty;\n\n/* Answer the following: For product 205 on order 423, return the first inventory location from which picking should start (oldest purchase_date and smallest on_hand in warehouse 1). */\nSELECT id    AS location_id,\n       aisle,\n       position,\n       on_hand\nFROM inventory\nWHERE warehouse_id = 1\n  AND product_id = 205\nORDER BY purchase_date,\n         on_hand\nLIMIT 1;\n\n/* Answer the following: Show the ordered quantity for product 205 on order 423 and the running total of available inventory as locations are sorted by purchase_date (warehouse 1). */\nWITH need AS (\n  SELECT SUM(quantity) AS ordered_qty\n  FROM order_lines\n  WHERE order_id = 423\n    AND product_id = 205\n)\nSELECT i.id       AS location_id,\n       i.purchase_date,\n       i.on_hand,\n       SUM(i.on_hand) OVER (ORDER BY i.purchase_date, i.on_hand) AS running_stock,\n       n.ordered_qty\nFROM inventory AS i\nCROSS JOIN need n\nWHERE i.warehouse_id = 1\n  AND i.product_id = 205\nORDER BY i.purchase_date,\n         i.on_hand;\n\n/* Answer the following: Count how many inventory locations in warehouse 1 will be completely emptied when fulfilling order 423 under the oldest-first rule. */\nWITH need AS (\n  SELECT product_id,\n         SUM(quantity) AS ordered_qty\n  FROM order_lines\n  WHERE order_id = 423\n  GROUP BY product_id\n), inv AS (\n  SELECT i.id,\n         i.product_id,\n         i.on_hand,\n         SUM(i.on_hand) OVER (PARTITION BY i.product_id\n                              ORDER BY i.purchase_date, i.on_hand) AS running_total\n  FROM inventory AS i\n  WHERE i.warehouse_id = 1\n)\nSELECT COUNT(*) AS locations_depleted\nFROM inv\nJOIN need n ON n.product_id = inv.product_id\nWHERE inv.running_total <= n.ordered_qty;\n\n/* Answer the following: What percentage of the total units on order 423 will be picked from aisle 'B' of warehouse 1 when allocating inventory oldest first? */\nWITH order_tot AS (\n  SELECT SUM(quantity) AS total_units\n  FROM order_lines\n  WHERE order_id = 423\n), picks AS (\n  SELECT i.product_id,\n         i.aisle,\n         i.on_hand,\n         SUM(i.on_hand) OVER (PARTITION BY i.product_id\n                              ORDER BY i.purchase_date, i.on_hand) AS running_total,\n         o.order_qty\n  FROM inventory i\n  JOIN (SELECT product_id,\n               SUM(quantity) AS order_qty\n        FROM order_lines\n        WHERE order_id = 423\n        GROUP BY product_id) o\n    ON o.product_id = i.product_id\n  WHERE i.warehouse_id = 1\n), picked_from_aisle_b AS (\n  SELECT CASE\n           WHEN running_total - on_hand < order_qty AND running_total >= order_qty\n           THEN order_qty - (running_total - on_hand)\n           WHEN running_total <= order_qty\n           THEN on_hand\n           ELSE 0\n         END AS picked_qty\n  FROM picks\n  WHERE aisle = 'B'\n)\nSELECT 100.0 * SUM(picked_qty) / (SELECT total_units FROM order_tot) AS pct_from_aisle_b\nFROM picked_from_aisle_b;\n\n/* Answer the following: Retrieve product IDs, aisles and pick quantities for the first order line of order 423, allocating inventory in warehouse 1 based on oldest purchase_date. */\nWITH first_line AS (\n  SELECT line_number, product_id, quantity\n  FROM order_lines\n  WHERE order_id = 423\n  ORDER BY line_number\n  LIMIT 1\n),\ninv AS (\n  SELECT i.id,\n         i.product_id,\n         i.aisle,\n         i.position,\n         i.on_hand,\n         i.purchase_date,\n         SUM(i.on_hand) OVER (ORDER BY i.purchase_date, i.on_hand) AS running_stock\n  FROM inventory i\n  JOIN first_line fl ON fl.product_id = i.product_id\n  WHERE i.warehouse_id = 1\n)\nSELECT id        AS location_id,\n       aisle,\n       position,\n       CASE\n         WHEN running_stock - on_hand < (SELECT quantity FROM first_line)\n              AND running_stock >= (SELECT quantity FROM first_line)\n         THEN (SELECT quantity FROM first_line) - (running_stock - on_hand)\n         WHEN running_stock <= (SELECT quantity FROM first_line)\n         THEN on_hand\n         ELSE 0\n       END       AS pick_qty\nFROM inv\nWHERE (running_stock - on_hand) < (SELECT quantity FROM first_line)\nORDER BY purchase_date,\n         on_hand;\n\n/* Answer the following: For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "evidence": "",
            "raw_question": "Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many total units are currently available for each product across all inventory locations? */\nSELECT \n    P.product_name, \n    SUM(I.qty_available) AS total_qty_available\nFROM products AS P\nJOIN inventory AS I \n     ON P.product_id = I.product_id\nGROUP BY P.product_name\nORDER BY P.product_name;\n\n/* Answer the following: Which (product , location) pair has the smallest on-hand quantity among items purchased before 2023-01-01? purchased before 2023-01-01 refers to purchase_date < '2023-01-01' */\nSELECT \n    P.product_name, \n    I.location_id, \n    I.qty_available\nFROM inventory AS I\nJOIN products  AS P \n     ON P.product_id = I.product_id\nWHERE I.purchase_date < '2023-01-01'\nORDER BY I.qty_available ASC , I.purchase_date ASC\nLIMIT 1;\n\n/* Answer the following: What is the average fulfillment (picked / required) percentage for orders placed in March 2023? orders placed in March 2023 refers to order_date BETWEEN '2023-03-01' AND '2023-03-31' */\nWITH order_fulfillment AS (\n    SELECT \n        O.order_id,\n        SUM(PK.picked_qty) AS picked_qty,\n        O.qty_required\n    FROM orders AS O\n    JOIN picks  AS PK \n         ON PK.order_id = O.order_id\n    WHERE O.order_date BETWEEN '2023-03-01' AND '2023-03-31'\n    GROUP BY O.order_id, O.qty_required\n)\nSELECT \n    ROUND(AVG(picked_qty * 1.0 / qty_required),4) AS avg_fulfillment_pct\nFROM order_fulfillment;\n\n/* Answer the following: List the first five orders (by date) for product \u2018Widget A\u2019 that were not fully picked, together with their pick percentage. \u2018Widget A\u2019 refers to product_name = 'Widget A'; not fully picked refers to picked_qty < qty_required */\nWITH order_level AS (\n    SELECT \n        O.order_id,\n        O.order_date,\n        SUM(PK.picked_qty)        AS picked_qty,\n        O.qty_required\n    FROM orders  AS O\n    JOIN products AS P  ON P.product_id = O.product_id\n    JOIN picks    AS PK ON PK.order_id = O.order_id\n    WHERE P.product_name = 'Widget A'\n    GROUP BY O.order_id, O.order_date, O.qty_required\n    HAVING SUM(PK.picked_qty) < O.qty_required\n)\nSELECT \n    order_id,\n    order_date,\n    ROUND(picked_qty * 1.0 / qty_required ,4) AS pick_pct\nFROM order_level\nORDER BY order_date\nLIMIT 5;\n\n/* Answer the following: For each product, show the location that still has on-hand inventory with the earliest purchase date. still has on-hand inventory refers to qty_available > 0; earliest purchase date refers to MIN(purchase_date) */\nWITH earliest AS (\n    SELECT \n        product_id,\n        MIN(purchase_date) AS first_date\n    FROM inventory\n    WHERE qty_available > 0\n    GROUP BY product_id\n)\nSELECT \n    P.product_name,\n    I.location_id,\n    I.purchase_date\nFROM earliest  AS E\nJOIN inventory AS I \n     ON I.product_id   = E.product_id\n    AND I.purchase_date = E.first_date\nJOIN products  AS P \n     ON P.product_id   = I.product_id\nORDER BY P.product_name;\n\n/* Answer the following: For each product, what percentage of its orders were completely fulfilled? completely fulfilled refers to SUM(picked_qty) = qty_required for an order */\nWITH order_status AS (\n    SELECT \n        O.order_id,\n        O.product_id,\n        CASE WHEN SUM(PK.picked_qty) = O.qty_required THEN 1 ELSE 0 END AS full_flag\n    FROM orders AS O\n    JOIN picks  AS PK \n         ON PK.order_id = O.order_id\n    GROUP BY O.order_id, O.product_id, O.qty_required\n)\nSELECT \n    P.product_name,\n    ROUND(AVG(full_flag) * 100 ,2) AS pct_orders_fully_fulfilled\nFROM order_status AS OS\nJOIN products     AS P \n     ON P.product_id = OS.product_id\nGROUP BY P.product_name\nORDER BY pct_orders_fully_fulfilled DESC;\n\n/* Answer the following: Among orders requiring more than 100 units, which product has the highest average pick percentage? requiring more than 100 units refers to qty_required > 100 */\nWITH big_orders AS (\n    SELECT \n        O.order_id,\n        O.product_id,\n        O.qty_required,\n        SUM(PK.picked_qty) AS picked_qty\n    FROM orders AS O\n    JOIN picks  AS PK \n         ON PK.order_id = O.order_id\n    WHERE O.qty_required > 100\n    GROUP BY O.order_id, O.product_id, O.qty_required\n), pct AS (\n    SELECT \n        product_id,\n        picked_qty * 1.0 / qty_required AS pick_pct\n    FROM big_orders\n)\nSELECT \n    P.product_name\nFROM pct AS C\nJOIN products AS P \n     ON P.product_id = C.product_id\nGROUP BY P.product_name\nORDER BY AVG(pick_pct) DESC\nLIMIT 1;\n\n/* Answer the following: For each product, compute the cumulative quantity picked over time (by order date), assuming FIFO consumption of inventory (earliest purchase_date first). */\nWITH ordered_inventory AS (\n    SELECT \n        I.*,\n        ROW_NUMBER() OVER (PARTITION BY product_id \n                           ORDER BY purchase_date) AS inv_seq\n    FROM inventory I\n), expanded AS (\n    SELECT \n        O.order_id,\n        O.order_date,\n        I.product_id,\n        I.location_id,\n        I.qty_available,\n        O.qty_required,\n        SUM(I.qty_available) OVER (PARTITION BY O.order_id \n                                   ORDER BY inv_seq) AS running_inv\n    FROM orders O\n    JOIN ordered_inventory I \n         ON I.product_id = O.product_id\n), picked AS (\n    SELECT \n        order_id,\n        product_id,\n        CASE\n            WHEN running_inv - qty_available >= qty_required THEN 0\n            WHEN running_inv >= qty_required THEN qty_required - (running_inv - qty_available)\n            ELSE qty_available\n        END AS picked_now\n    FROM expanded\n)\nSELECT \n    P.product_name,\n    O.order_date,\n    SUM(picked_now) AS cumulative_picked\nFROM picked       AS PK\nJOIN orders       AS O ON O.order_id   = PK.order_id\nJOIN products     AS P ON P.product_id = PK.product_id\nGROUP BY P.product_name , O.order_date\nORDER BY P.product_name , O.order_date;\n\n/* Answer the following: Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name. first-in-first-out refers to ORDER BY purchase_date, qty_available ASC; pick percentage refers to picked_qty / qty_required */\nWITH fifo_inv AS (\n    SELECT \n        I.*,\n        ROW_NUMBER() OVER (PARTITION BY product_id \n                           ORDER BY purchase_date , qty_available) AS seq\n    FROM inventory AS I\n),\nexpand AS (\n    SELECT \n        O.order_id,\n        O.product_id,\n        O.qty_required,\n        I.location_id,\n        I.purchase_date,\n        I.qty_available,\n        SUM(I.qty_available) OVER (PARTITION BY O.order_id \n                                   ORDER BY seq) AS cum_qty\n    FROM orders      AS O\n    JOIN fifo_inv    AS I \n         ON I.product_id = O.product_id\n),\nalloc AS (\n    SELECT \n        order_id,\n        product_id,\n        CASE\n            WHEN cum_qty - qty_available >= qty_required THEN 0\n            WHEN cum_qty >= qty_required THEN qty_required - (cum_qty - qty_available)\n            ELSE qty_available\n        END AS picked_qty,\n        qty_required\n    FROM expand\n),\norder_pct AS (\n    SELECT \n        order_id,\n        product_id,\n        SUM(picked_qty) AS picked_total,\n        MAX(qty_required) AS qty_required\n    FROM alloc\n    GROUP BY order_id, product_id\n),\nproduct_pct AS (\n    SELECT \n        P.product_name,\n        AVG(picked_total * 1.0 / qty_required) AS avg_pick_pct\n    FROM order_pct  AS OP\n    JOIN products   AS P\n         ON P.product_id = OP.product_id\n    GROUP BY P.product_name\n)\nSELECT \n    product_name,\n    ROUND(avg_pick_pct ,4) AS average_pick_percentage\nFROM product_pct\nORDER BY product_name;\n\n/* Answer the following: Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "evidence": "",
            "raw_question": "What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of units picked for order 421? */\nSELECT SUM(units_picked)\nFROM Picks\nWHERE order_id = 421;\n\n/* Answer the following: Which products currently have fewer than 10 units remaining across all inventory lots? */\nSELECT P.product_name\nFROM Products AS P\nJOIN Inventory AS I ON P.product_id = I.product_id\nGROUP BY P.product_id, P.product_name\nHAVING SUM(I.units_remaining) < 10;\n\n/* Answer the following: For each product in order 421, what was the receipt date of the inventory lot that was picked first (FIFO)? */\nSELECT Pk.product_id,\n       MIN(I.received_date) AS first_receipt_date\nFROM Picks     AS Pk\nJOIN Inventory AS I ON Pk.inventory_id = I.inventory_id\nWHERE Pk.order_id = 421\nGROUP BY Pk.product_id;\n\n/* Answer the following: What is the average number of days between inventory receipt and pick events for all picks made in 2023? */\nSELECT AVG(DATEDIFF('day', I.received_date, P.pick_date))\nFROM Picks     AS P\nJOIN Inventory AS I ON P.inventory_id = I.inventory_id\nWHERE EXTRACT(year FROM P.pick_date) = 2023;\n\n/* Answer the following: Which employees picked over 500 units in total during May 2023? */\nSELECT E.employee_name\nFROM Employees AS E\nJOIN Picks     AS P ON E.employee_id = P.employee_id\nWHERE P.pick_date BETWEEN '2023-05-01' AND '2023-05-31'\nGROUP BY E.employee_id, E.employee_name\nHAVING SUM(P.units_picked) > 500;\n\n/* Answer the following: How many units of product 'A123' are currently on hand? */\nSELECT SUM(units_remaining)\nFROM Inventory\nWHERE product_id = 'A123';\n\n/* Answer the following: Which order had the highest number of distinct products picked in February 2023? */\nSELECT P.order_id\nFROM Picks AS P\nWHERE P.pick_date BETWEEN '2023-02-01' AND '2023-02-28'\nGROUP BY P.order_id\nORDER BY COUNT(DISTINCT P.product_id) DESC\nLIMIT 1;\n\n/* Answer the following: Who was the customer that ordered the largest total quantity of 'Widget' in 2022? */\nSELECT C.customer_name\nFROM Orders      AS O\nJOIN OrderLines  AS L ON O.order_id   = L.order_id\nJOIN Products    AS P ON L.product_id = P.product_id\nJOIN Customers   AS C ON O.customer_id = C.customer_id\nWHERE P.product_name = 'Widget'\n  AND EXTRACT(year FROM O.order_date) = 2022\nGROUP BY C.customer_id, C.customer_name\nORDER BY SUM(L.quantity) DESC\nLIMIT 1;\n\n/* Answer the following: Among products in the 'Gadgets' category, which one had the highest turnover rate (total units picked divided by average units on hand) during Q1 2023? */\nSELECT Pr.product_name\nFROM Products   AS Pr\nJOIN Picks      AS Pk ON Pr.product_id = Pk.product_id\nJOIN Inventory  AS Inv ON Pr.product_id = Inv.product_id\nWHERE Pr.category = 'Gadgets'\n  AND Pk.pick_date BETWEEN '2023-01-01' AND '2023-03-31'\n  AND Inv.received_date <= '2023-03-31'\nGROUP BY Pr.product_id, Pr.product_name\nORDER BY SUM(Pk.units_picked) / NULLIF(AVG(Inv.units_remaining),0) DESC\nLIMIT 1;\n\n/* Answer the following: Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "evidence": "",
            "raw_question": "Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which products had a seasonality\u2013adjusted sales ratio that fell below 0.6 at least once in calendar year 2016?  (Seasonality-adjusted ratio = units_sold / 12-month centered moving average) */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2016-01-01' AND '2016-12-31'\n)\nSELECT p.product_name\nFROM cma\nJOIN products p ON p.product_id = cma.product_id\nGROUP BY p.product_name\nHAVING MIN(ratio) < 0.6;\n\n/* Answer the following: For the product called \u2018Widget X\u2019, what was the highest seasonality-adjusted units_sold value recorded in any month of 2020? */\nWITH cma AS (\n    SELECT\n        ms.sale_month,\n        ms.units_sold / NULLIF(\n            AVG(ms.units_sold) OVER (PARTITION BY ms.product_id\n                                      ORDER BY ms.sale_month\n                                      ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS sa_units\n    FROM monthly_sales ms\n    JOIN products p ON p.product_id = ms.product_id\n    WHERE p.product_name = 'Widget X'\n      AND ms.sale_month BETWEEN '2020-01-01' AND '2020-12-31'\n)\nSELECT MAX(sa_units) AS max_sa_units_2020\nFROM cma;\n\n/* Answer the following: During which month of 2018 did the product \u2018Gadget Z\u2019 experience its largest month-over-month increase in seasonality-adjusted units sold?  Return the month and the increase amount. */\nWITH cma AS (\n    SELECT\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS sa_units\n    FROM monthly_sales\n    WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Gadget Z')\n      AND sale_month BETWEEN '2018-01-01' AND '2018-12-31'\n),\ndiffs AS (\n    SELECT\n        sale_month,\n        sa_units - LAG(sa_units) OVER (ORDER BY sale_month) AS mom_increase\n    FROM cma\n)\nSELECT sale_month, mom_increase\nFROM diffs\nORDER BY mom_increase DESC\nLIMIT 1;\n\n/* Answer the following: Which product category recorded the highest average seasonality-adjusted sales ratio during the second quarter (April-June) of 2019? */\nWITH cma AS (\n    SELECT\n        p.category,\n        ms.units_sold / NULLIF(\n            AVG(ms.units_sold) OVER (PARTITION BY ms.product_id\n                                      ORDER BY ms.sale_month\n                                      ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales ms\n    JOIN products p ON p.product_id = ms.product_id\n    WHERE ms.sale_month BETWEEN '2019-04-01' AND '2019-06-30'\n)\nSELECT category, AVG(ratio) AS avg_q2_ratio\nFROM cma\nGROUP BY category\nORDER BY avg_q2_ratio DESC\nLIMIT 1;\n\n/* Answer the following: How many products showed a strictly increasing seasonality-adjusted sales ratio for every consecutive month of 2017? */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2017-01-01' AND '2017-12-31'\n),\nflag AS (\n    SELECT product_id\n    FROM (\n        SELECT\n            product_id,\n            ratio,\n            LAG(ratio) OVER (PARTITION BY product_id ORDER BY sale_month) AS prev_ratio\n        FROM cma\n    ) t\n    GROUP BY product_id\n    HAVING MIN(CASE WHEN prev_ratio IS NOT NULL AND ratio <= prev_ratio THEN 0 ELSE 1 END) = 1\n)\nSELECT COUNT(*) AS strictly_increasing_products_2017\nFROM flag;\n\n/* Answer the following: List the top 3 products by average seasonality-adjusted sales ratio over the full period 2016-2020, excluding any product that had fewer than 48 months of data. */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2016-01-01' AND '2020-12-31'\n),\nagg AS (\n    SELECT\n        product_id,\n        COUNT(*) AS months_cnt,\n        AVG(ratio) AS avg_ratio\n    FROM cma\n    GROUP BY product_id\n    HAVING months_cnt >= 48\n)\nSELECT p.product_name, agg.avg_ratio\nFROM agg\nJOIN products p ON p.product_id = agg.product_id\nORDER BY agg.avg_ratio DESC\nLIMIT 3;\n\n/* Answer the following: What was the total seasonality-adjusted units sold across all products in December 2019? */\nWITH cma AS (\n    SELECT\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS sa_units\n    FROM monthly_sales\n    WHERE sale_month = '2019-12-01'\n)\nSELECT SUM(sa_units) AS total_sa_units_dec_2019\nFROM cma;\n\n/* Answer the following: Identify any products whose seasonality-adjusted sales ratio never rose above 1.0 in the entire year 2018. */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2018-01-01' AND '2018-12-31'\n),\nbad AS (\n    SELECT product_id\n    FROM cma\n    GROUP BY product_id\n    HAVING MAX(ratio) <= 1.0\n)\nSELECT product_name\nFROM products\nWHERE product_id IN (SELECT product_id FROM bad);\n\n/* Answer the following: During 2020, which product achieved the single largest positive deviation from its centered 12-month moving average (i.e., highest seasonality-adjusted ratio), and what was that ratio? */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2020-01-01' AND '2020-12-31'\n)\nSELECT p.product_name,\n       ratio AS max_ratio_2020\nFROM cma\nJOIN products p ON p.product_id = cma.product_id\nORDER BY ratio DESC\nLIMIT 1;\n\n/* Answer the following: Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "evidence": "",
            "raw_question": "For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which forecast run ID gave the highest total forecasted sales for product 4160 in 2018 when using weighted regression? weighted regression refers to weighted_regression = 1; total forecasted sales refers to SUM(forecast_sales) during 2018 */\nSELECT fd.forecast_id\nFROM forecast_detail AS fd\nJOIN forecast_run AS fr ON fr.forecast_id = fd.forecast_id\nWHERE fr.product_id = 4160\n  AND fr.weighted_regression = 1\n  AND fd.forecast_date BETWEEN '2018-01-01' AND '2018-12-31'\nGROUP BY fd.forecast_id\nORDER BY SUM(fd.forecast_sales) DESC\nLIMIT 1;\n\n/* Answer the following: List the first 12 months of training data used for forecast run 210. Training data refers to the months starting from fr.start_date within sales_monthly table. */\nSELECT sm.sale_date\nFROM sales_monthly AS sm\nJOIN forecast_run AS fr ON fr.product_id = sm.product_id\nWHERE fr.forecast_id = 210\n  AND sm.sale_date >= fr.start_date\nORDER BY sm.sale_date\nLIMIT 12;\n\n/* Answer the following: What is the average actual monthly sales for products 4160 and 7790 from January 2016 to December 2018 inclusive? */\nSELECT AVG(sales) \nFROM sales_monthly\nWHERE product_id IN (4160, 7790)\n  AND sale_date BETWEEN '2016-01-01' AND '2018-12-31';\n\n/* Answer the following: What is the maximum seasonality factor between time steps 7 and 30 for product 7790? */\nSELECT MAX(factor)\nFROM seasonality\nWHERE product_id = 7790\n  AND timestep BETWEEN 7 AND 30;\n\n/* Answer the following: For each product, how many time steps have a negative seasonality factor? negative refers to factor < 0 */\nSELECT product_id, COUNT(*) AS negative_steps\nFROM seasonality\nWHERE factor < 0\nGROUP BY product_id;\n\n/* Answer the following: Identify the product that recorded the lowest MAPE in 2018 among all weighted regression forecasts. lowest refers to MIN(mape); weighted regression refers to weighted_regression = 1 */\nSELECT fr.product_id\nFROM forecast_run AS fr\nJOIN forecast_error AS fe ON fe.forecast_id = fr.forecast_id\nWHERE fr.weighted_regression = 1\n  AND fe.year = 2018\nORDER BY fe.mape\nLIMIT 1;\n\n/* Answer the following: What is the combined weight assigned to time steps 7 through 30 in forecast run 332? combined weight refers to SUM(weight) */\nSELECT SUM(weight)\nFROM regression_weights\nWHERE forecast_id = 332\n  AND timestep BETWEEN 7 AND 30;\n\n/* Answer the following: Provide the average forecasted monthly sales for product 1234 during the first quarter of 2020 (Jan\u2013Mar) under the forecast run that uses the ARIMA method. */\nSELECT AVG(fd.forecast_sales)\nFROM forecast_detail AS fd\nJOIN forecast_run AS fr ON fr.forecast_id = fd.forecast_id\nWHERE fr.product_id = 1234\n  AND fr.method = 'ARIMA'\n  AND fd.forecast_date BETWEEN '2020-01-01' AND '2020-03-31';\n\n/* Answer the following: What percentage of all forecasts generated in 2019 used at least 36 months of history? percentage = 100 * count(condition)/total */\nSELECT 100.0 * SUM(CASE WHEN months_history >= 36 THEN 1 ELSE 0 END) / COUNT(*) AS percent_forecasts\nFROM forecast_run\nWHERE EXTRACT(YEAR FROM start_date) = 2019;\n\n/* Answer the following: What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "evidence": "",
            "raw_question": "Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For each product, what is the first month in 2019 when its ending inventory dropped below the minimum required level? */\nSELECT \n    product_id, \n    MIN(month) AS first_understock_month\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND ending_inventory < min_required\nGROUP BY product_id;\n\n/* Answer the following: Which products never required restocking in 2019 (i.e., their restocked quantity was always 0)? */\nSELECT \n    product_id\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY product_id\nHAVING SUM(restocked_quantity) = 0;\n\n/* Answer the following: How many units were restocked for each product across the whole year 2019? */\nSELECT \n    product_id, \n    SUM(restocked_quantity) AS total_units_restocked_2019\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY product_id;\n\n/* Answer the following: During 2019, in which month did the highest number of products require restocking? */\nSELECT \n    month, \n    COUNT(DISTINCT product_id) AS products_restocked\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND restocked_quantity > 0\nGROUP BY month\nORDER BY products_restocked DESC\nLIMIT 1;\n\n/* Answer the following: For every product, find the month in 2019 where its ending inventory exceeded the minimum required level by the greatest amount and show that surplus. */\nSELECT  i1.product_id,\n        i1.month,\n        i1.ending_inventory - i1.min_required AS max_surplus\nFROM inventory_monthly AS i1\nJOIN (\n      SELECT product_id,\n             MAX(ending_inventory - min_required) AS max_surplus\n      FROM inventory_monthly\n      WHERE month BETWEEN '2019-01' AND '2019-12'\n      GROUP BY product_id\n) AS i2\nON  i1.product_id = i2.product_id\nAND i1.ending_inventory - i1.min_required = i2.max_surplus\nWHERE i1.month BETWEEN '2019-01' AND '2019-12';\n\n/* Answer the following: What was the average ending inventory across all products for every month in 2019? */\nSELECT \n    month,\n    AVG(ending_inventory) AS avg_ending_inventory\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: For each month in 2019, how many distinct products finished with an ending inventory within 10 units (higher or lower) of the minimum required level? */\nSELECT \n    month,\n    COUNT(DISTINCT product_id) AS products_within_10_units\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND ABS(ending_inventory - min_required) <= 10\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: List the products that at any point in 2019 had an ending inventory below 50 units. */\nSELECT DISTINCT\n    product_id\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND ending_inventory < 50;\n\n/* Answer the following: For product 123, list the months in 2019 when restocking occurred and how many units were added. */\nSELECT \n    month,\n    restocked_quantity\nFROM inventory_monthly\nWHERE product_id = 123\n  AND month BETWEEN '2019-01' AND '2019-12'\n  AND restocked_quantity > 0\nORDER BY month;\n\n/* Answer the following: Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "n_examples": 9,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "evidence": "",
            "raw_question": "Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which team scored the most total goals in the 2013/2014 Premier League season? */\nSELECT T.name\nFROM team AS T\nJOIN match AS M\n  ON T.id = M.home_team_id OR T.id = M.away_team_id\nJOIN league AS L\n  ON M.league_id = L.id\nWHERE L.name = 'Premier League'\n  AND M.season = '2013/2014'\nGROUP BY T.name\nORDER BY SUM(\n             CASE\n               WHEN T.id = M.home_team_id THEN M.home_goal\n               ELSE M.away_goal\n             END\n           ) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a draw for each league in the 2016/2017 season? */\nSELECT L.name,\n       COUNT(*) AS draw_matches\nFROM match AS M\nJOIN league AS L ON M.league_id = L.id\nWHERE M.season = '2016/2017'\n  AND M.home_goal = M.away_goal\nGROUP BY L.name;\n\n/* Answer the following: What is the average number of goals per match in La Liga across all seasons? */\nSELECT AVG(M.home_goal + M.away_goal)\nFROM match AS M\nJOIN league AS L ON M.league_id = L.id\nWHERE L.name = 'La Liga';\n\n/* Answer the following: Which country hosted the most soccer matches between the 2010/2011 and 2014/2015 seasons (inclusive)? */\nSELECT C.name\nFROM match AS M\nJOIN country AS C ON M.country_id = C.id\nWHERE M.season BETWEEN '2010/2011' AND '2014/2015'\nGROUP BY C.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For each season, which team had the highest number of away wins in Serie A and how many away wins did it have? */\nSELECT M.season,\n       T.name,\n       COUNT(*) AS away_wins\nFROM match AS M\nJOIN team  AS T ON M.away_team_id = T.id\nJOIN league AS L ON M.league_id  = L.id\nWHERE L.name = 'Serie A'\n  AND M.away_goal > M.home_goal\nGROUP BY M.season, T.name\nHAVING COUNT(*) = (\n        SELECT MAX(cnt)\n        FROM (\n              SELECT COUNT(*) AS cnt\n              FROM match AS M2\n              JOIN team AS T2 ON M2.away_team_id = T2.id\n              JOIN league AS L2 ON M2.league_id  = L2.id\n              WHERE L2.name = 'Serie A'\n                AND M2.away_goal > M2.home_goal\n                AND M2.season = M.season\n              GROUP BY T2.name\n             )\n      );\n\n/* Answer the following: What is the Bundesliga match with the largest goal difference? Return the date, the home team, the away team and the final score. */\nSELECT M.date,\n       HT.name AS home_team,\n       AT.name AS away_team,\n       M.home_goal,\n       M.away_goal\nFROM match AS M\nJOIN team AS HT ON M.home_team_id = HT.id\nJOIN team AS AT ON M.away_team_id = AT.id\nJOIN league AS L ON M.league_id = L.id\nWHERE L.name = 'Bundesliga'\nORDER BY ABS(M.home_goal - M.away_goal) DESC\nLIMIT 1;\n\n/* Answer the following: How many total points did FC Barcelona earn in the 2012/2013 La Liga season? (Win = 3, Draw = 1, Loss = 0) */\nSELECT\n  3 * SUM(CASE\n            WHEN (T.id = M.home_team_id AND M.home_goal  > M.away_goal) OR\n                 (T.id = M.away_team_id AND M.away_goal  > M.home_goal) THEN 1\n            ELSE 0\n          END) +\n  1 * SUM(CASE\n            WHEN M.home_goal = M.away_goal THEN 1\n            ELSE 0\n          END)      AS total_points\nFROM team  AS T\nJOIN match AS M\n  ON T.id = M.home_team_id OR T.id = M.away_team_id\nJOIN league AS L ON M.league_id = L.id\nWHERE T.name  = 'FC Barcelona'\n  AND L.name  = 'La Liga'\n  AND M.season = '2012/2013';\n\n/* Answer the following: What was the first Premier League season for every team? */\nSELECT T.name,\n       MIN(M.season) AS first_season\nFROM team AS T\nJOIN match AS M\n  ON T.id = M.home_team_id OR T.id = M.away_team_id\nJOIN league AS L ON M.league_id = L.id\nWHERE L.name = 'Premier League'\nGROUP BY T.name;\n\n/* Answer the following: List the top three leagues with the highest average number of points awarded per match in the 2017/2018 season. (Win = 3 points total, Draw = 2 points total) */\nSELECT L.name,\n       1.0 * SUM(\n                 CASE\n                   WHEN M.home_goal = M.away_goal THEN 2\n                   ELSE 3\n                 END\n               ) / COUNT(*) AS avg_points_per_match\nFROM match AS M\nJOIN league AS L ON M.league_id = L.id\nWHERE M.season = '2017/2018'\nGROUP BY L.name\nORDER BY avg_points_per_match DESC\nLIMIT 3;\n\n/* Answer the following: Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "n_examples": 9,
            "db_id": "EU_soccer"
        },
        {
            "question": "Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "evidence": "",
            "raw_question": "Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the average loss rate across all vegetable-wholesale items? */\nSELECT AVG(loss_rate) \nFROM item_loss;\n\n/* Answer the following: Which item has the highest loss rate and what is that rate? */\nSELECT i.item_name, l.loss_rate\nFROM item_loss AS l\nJOIN items AS i USING (item_id)\nORDER BY l.loss_rate DESC\nLIMIT 1;\n\n/* Answer the following: How many items have a loss rate greater than one standard deviation above the overall average? */\nWITH stats AS (\n    SELECT AVG(loss_rate) AS avg_lr,\n           STDDEV_SAMP(loss_rate) AS sd_lr\n    FROM item_loss\n)\nSELECT COUNT(*) \nFROM item_loss, stats\nWHERE item_loss.loss_rate > stats.avg_lr + stats.sd_lr;\n\n/* Answer the following: Give each category and its average loss rate, ordered from highest to lowest. */\nSELECT c.category_name,\n       AVG(l.loss_rate) AS avg_loss_rate\nFROM item_loss AS l\nJOIN items      AS i USING (item_id)\nJOIN categories AS c USING (category_id)\nGROUP BY c.category_name\nORDER BY avg_loss_rate DESC;\n\n/* Answer the following: What was the average loss rate for the year 2022? */\nSELECT AVG(loss_rate)\nFROM item_loss\nWHERE year = 2022;\n\n/* Answer the following: List the 5 items in the \u201cLeafy Greens\u201d category with the lowest loss rates. */\nSELECT i.item_name,\n       l.loss_rate\nFROM item_loss   AS l\nJOIN items       AS i USING (item_id)\nJOIN categories  AS c USING (category_id)\nWHERE c.category_name = 'Leafy Greens'\nORDER BY l.loss_rate\nLIMIT 5;\n\n/* Answer the following: How many items have a loss rate between 0.02 and 0.04 inclusive? */\nSELECT COUNT(*)\nFROM item_loss\nWHERE loss_rate BETWEEN 0.02 AND 0.04;\n\n/* Answer the following: What is the standard deviation of loss rates for all items? */\nSELECT STDDEV_SAMP(loss_rate)\nFROM item_loss;\n\n/* Answer the following: Produce a summary of loss rates \u2014 report the average loss rate and the counts of items that fall below, within, and above one standard deviation of that average. */\nWITH stats AS (\n    SELECT AVG(loss_rate)        AS avg_lr,\n           STDDEV_SAMP(loss_rate) AS sd_lr\n    FROM item_loss\n), banded AS (\n    SELECT CASE\n               WHEN l.loss_rate < stats.avg_lr - stats.sd_lr THEN 'below'\n               WHEN l.loss_rate > stats.avg_lr + stats.sd_lr THEN 'above'\n               ELSE 'within'\n           END AS band\n    FROM item_loss AS l, stats\n)\nSELECT stats.avg_lr,\n       SUM(CASE WHEN band = 'below'  THEN 1 END)  AS cnt_below_one_std,\n       SUM(CASE WHEN band = 'within' THEN 1 END)  AS cnt_within_one_std,\n       SUM(CASE WHEN band = 'above'  THEN 1 END)  AS cnt_above_one_std\nFROM stats, banded;\n\n/* Answer the following: For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "evidence": "",
            "raw_question": "What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which category had the highest average wholesale price in 2021? highest average wholesale price refers to MAX(AVG(wholesale_price)); in 2021 refers to year = 2021 */\nSELECT category\nFROM veg_whsle\nWHERE year = 2021\nGROUP BY category\nORDER BY AVG(wholesale_price) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total selling price for each year from 2020 to 2023? from 2020 to 2023 refers to year BETWEEN 2020 AND 2023 */\nSELECT year,\n       ROUND(SUM(selling_price), 2) AS total_selling_price\nFROM veg_whsle\nWHERE year BETWEEN 2020 AND 2023\nGROUP BY year;\n\n/* Answer the following: List the top 5 categories with the greatest total loss in 2022. greatest total loss refers to ORDER BY SUM(loss) DESC; in 2022 refers to year = 2022 */\nSELECT category\nFROM veg_whsle\nWHERE year = 2022\nGROUP BY category\nORDER BY SUM(loss) DESC\nLIMIT 5;\n\n/* Answer the following: What is the average profit per kilogram for 'Tomato' in 2023? 'Tomato' refers to category = 'Tomato'; in 2023 refers to year = 2023 */\nSELECT ROUND(AVG(profit), 2)\nFROM veg_whsle\nWHERE category = 'Tomato'\n  AND year = 2023;\n\n/* Answer the following: For each category, show the minimum selling price recorded in 2022. minimum selling price refers to MIN(selling_price); in 2022 refers to year = 2022 */\nSELECT category,\n       ROUND(MIN(selling_price), 2) AS min_selling_price\nFROM veg_whsle\nWHERE year = 2022\nGROUP BY category;\n\n/* Answer the following: Which year between 2020 and 2023 had the highest total wholesale price? highest total wholesale price refers to MAX(SUM(wholesale_price)); year BETWEEN 2020 AND 2023 refers to year BETWEEN 2020 AND 2023 */\nSELECT year\nFROM veg_whsle\nWHERE year BETWEEN 2020 AND 2023\nGROUP BY year\nORDER BY SUM(wholesale_price) DESC\nLIMIT 1;\n\n/* Answer the following: How many records have a loss rate greater than 0.20? loss rate greater than 0.20 refers to loss_rate > 0.20 */\nSELECT COUNT(*)\nFROM veg_whsle\nWHERE loss_rate > 0.20;\n\n/* Answer the following: Provide the total profit for 'Leafy Greens' from 2020 through 2023, rounded to two decimals. 'Leafy Greens' refers to category = 'Leafy Greens'; from 2020 through 2023 refers to year BETWEEN 2020 AND 2023 */\nSELECT ROUND(SUM(profit), 2)\nFROM veg_whsle\nWHERE category = 'Leafy Greens'\n  AND year BETWEEN 2020 AND 2023;\n\n/* Answer the following: What is the average difference between selling price and wholesale price for each category in 2023? difference refers to selling_price - wholesale_price; in 2023 refers to year = 2023 */\nSELECT category,\n       ROUND(AVG(selling_price - wholesale_price), 2) AS avg_price_diff\nFROM veg_whsle\nWHERE year = 2023\nGROUP BY category;\n\n/* Answer the following: For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "evidence": "",
            "raw_question": "Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What is the average review score for every seller who has sold more than 500 items in total? */\nSELECT \n    O.seller_id,\n    AVG(R.score) AS avg_review_score\nFROM orders AS O\nJOIN reviews AS R  ON O.order_id = R.order_id\nGROUP BY O.seller_id\nHAVING SUM(O.quantity) > 500;\n\n/* Answer the following: Which product category (Spanish name) has the greatest number of items sold? */\nSELECT \n    C.category_local\nFROM categories   AS C\nJOIN products     AS P ON C.category_id = P.category_id\nJOIN orders       AS O ON P.product_id  = O.product_id\nGROUP BY C.category_id\nORDER BY SUM(O.quantity) DESC\nLIMIT 1;\n\n/* Answer the following: Find every seller whose average packing time is under 15 minutes and whose total sales value is above 50,000 USD. */\nSELECT \n    O.seller_id\nFROM orders  AS O\nJOIN packing AS P ON O.order_id = P.order_id\nGROUP BY O.seller_id\nHAVING AVG(P.packing_time_minutes) < 15\n   AND SUM(O.sale_price * O.quantity) > 50000;\n\n/* Answer the following: List the ten products with the highest sales volume together with their English category names. */\nSELECT\n    P.product_name,\n    C.category_en,\n    SUM(O.quantity) AS total_sold\nFROM products   AS P\nJOIN categories AS C ON P.category_id = C.category_id\nJOIN orders     AS O ON P.product_id  = O.product_id\nGROUP BY P.product_id\nORDER BY total_sold DESC\nLIMIT 10;\n\n/* Answer the following: Which seller has the highest average selling price among those who have processed at least 200 orders? */\nSELECT\n    O.seller_id\nFROM orders AS O\nGROUP BY O.seller_id\nHAVING COUNT(DISTINCT O.order_id) >= 200\nORDER BY AVG(O.sale_price) DESC\nLIMIT 1;\n\n/* Answer the following: How many sellers maintain a perfect average review score of 5 and have shipped more than 1,000 items? */\nSELECT COUNT(*) \nFROM (\n    SELECT \n        O.seller_id\n    FROM orders  AS O\n    JOIN reviews AS R ON O.order_id = R.order_id\n    GROUP BY O.seller_id\n    HAVING AVG(R.score) = 5\n       AND SUM(O.quantity) > 1000\n) AS perfect_sellers;\n\n/* Answer the following: Provide, for every category, its English name, total revenue, and average review score. */\nSELECT\n    C.category_en,\n    SUM(O.sale_price * O.quantity) AS total_revenue,\n    AVG(R.score)                    AS avg_review\nFROM categories AS C\nJOIN products   AS P ON C.category_id = P.category_id\nJOIN orders     AS O ON P.product_id  = O.product_id\nLEFT JOIN reviews AS R ON O.order_id  = R.order_id\nGROUP BY C.category_id;\n\n/* Answer the following: Identify the seller with the lowest average packing time among those who have handled more than 300 orders. */\nSELECT\n    O.seller_id\nFROM orders  AS O\nJOIN packing AS P ON O.order_id = P.order_id\nGROUP BY O.seller_id\nHAVING COUNT(DISTINCT O.order_id) > 300\nORDER BY AVG(P.packing_time_minutes) ASC\nLIMIT 1;\n\n/* Answer the following: What is the total quantity of items sold in categories whose English name starts with \u201cElect\u201d? */\nSELECT \n    SUM(O.quantity) AS total_quantity\nFROM orders     AS O\nJOIN products   AS P ON O.product_id  = P.product_id\nJOIN categories AS C ON P.category_id = C.category_id\nWHERE C.category_en LIKE 'Elect%';\n\n/* Answer the following: Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "n_examples": 9,
            "db_id": "electronic_sales"
        },
        {
            "question": "Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "evidence": "",
            "raw_question": "Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For each customer, what is their net transaction amount (deposits minus withdrawals) in the calendar year 2023? deposits refer to amount > 0; withdrawals refer to amount < 0; net refers to SUM(amount) */\nSELECT c.customer_id,\n       SUM(t.amount) AS net_amount_2023\nFROM customers      AS c\nJOIN accounts       AS a ON a.customer_id = c.customer_id\nJOIN transactions   AS t ON t.account_id  = a.account_id\nWHERE t.txn_date >= '2023-01-01'\n  AND t.txn_date <  '2024-01-01'\nGROUP BY c.customer_id;\n\n/* Answer the following: Which customer incurred the highest net withdrawal (i.e., lowest SUM(amount)) in January 2022? withdrawals are negative amounts, so the lowest total is the greatest withdrawal */\nSELECT c.customer_id\nFROM customers      AS c\nJOIN accounts       AS a ON a.customer_id = c.customer_id\nJOIN transactions   AS t ON t.account_id  = a.account_id\nWHERE t.txn_date >= '2022-01-01'\n  AND t.txn_date <  '2022-02-01'\nGROUP BY c.customer_id\nORDER BY SUM(t.amount) ASC\nLIMIT 1;\n\n/* Answer the following: What is the average monthly net amount (deposit minus withdrawal) across all customers for the year 2023? */\nWITH month_net AS (\n    SELECT DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_amt\n    FROM transactions AS t\n    WHERE t.txn_date >= '2023-01-01'\n      AND t.txn_date <  '2024-01-01'\n    GROUP BY DATE_TRUNC('month', t.txn_date)\n)\nSELECT AVG(net_amt) AS avg_monthly_net_2023\nFROM month_net;\n\n/* Answer the following: List the top three customers whose closing balance increased the most from June 2023 to July 2023. closing balance for a month is the cumulative sum of all amounts up to the last day of that month */\nWITH month_end AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_month\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    WHERE t.txn_date >= '2023-06-01'\n      AND t.txn_date <  '2023-08-01'\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), cumu AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_month) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM month_end\n), pivot AS (\n    SELECT customer_id,\n           MAX(CASE WHEN mon = '2023-06-01' THEN close_bal END) AS bal_jun,\n           MAX(CASE WHEN mon = '2023-07-01' THEN close_bal END) AS bal_jul\n    FROM cumu\n    GROUP BY customer_id\n)\nSELECT customer_id\nFROM pivot\nORDER BY (bal_jul - bal_jun) DESC\nLIMIT 3;\n\n/* Answer the following: For each customer, return the first month when their cumulative closing balance became negative. */\nWITH monthly AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date)        AS mon,\n           SUM(t.amount)                          AS net_mon\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), running AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_mon) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM monthly\n)\nSELECT customer_id,\n       MIN(mon) AS first_neg_month\nFROM running\nWHERE close_bal < 0\nGROUP BY customer_id;\n\n/* Answer the following: What percentage of customers have a growth rate above 5 % in their most recent month? growth rate = (latest_balance - prior_balance) / prior_balance * 100; if prior_balance = 0, growth rate = latest_balance * 100 */\nWITH month_net AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_mon\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), running AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_mon) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM month_net\n), latest AS (\n    SELECT DISTINCT ON (customer_id)\n           customer_id, mon, close_bal,\n           LAG(close_bal) OVER (PARTITION BY customer_id ORDER BY mon) AS prev_bal\n    FROM running\n    ORDER BY customer_id, mon DESC\n), growth AS (\n    SELECT customer_id,\n           CASE\n              WHEN prev_bal = 0 OR prev_bal IS NULL\n                   THEN close_bal * 100\n              ELSE (close_bal - prev_bal) / prev_bal * 100\n           END AS growth_pct\n    FROM latest\n)\nSELECT 100.0 * SUM(CASE WHEN growth_pct > 5 THEN 1 END) / COUNT(*) AS pct_with_gt_5_growth\nFROM growth;\n\n/* Answer the following: For every account, show the closing balance at the end of the latest month with at least one transaction. */\nWITH t_month AS (\n    SELECT a.account_id,\n           DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_mon\n    FROM accounts      AS a\n    JOIN transactions  AS t ON t.account_id = a.account_id\n    GROUP BY a.account_id, DATE_TRUNC('month', t.txn_date)\n), run AS (\n    SELECT account_id,\n           mon,\n           SUM(net_mon) OVER (PARTITION BY account_id ORDER BY mon) AS close_bal\n    FROM t_month\n), latest AS (\n    SELECT DISTINCT ON (account_id) account_id, close_bal\n    FROM run\n    ORDER BY account_id, mon DESC\n)\nSELECT account_id, close_bal AS latest_closing_balance\nFROM latest;\n\n/* Answer the following: In which month of 2022 did the bank record the largest total deposit volume? deposits are amounts > 0 */\nSELECT DATE_TRUNC('month', txn_date) AS month_2022\nFROM transactions\nWHERE txn_date >= '2022-01-01'\n  AND txn_date <  '2023-01-01'\n  AND amount > 0\nGROUP BY DATE_TRUNC('month', txn_date)\nORDER BY SUM(amount) DESC\nLIMIT 1;\n\n/* Answer the following: How many customers had no withdrawals (amount < 0) during the last three complete months? */\nWITH recent AS (\n    SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'  AS m1,\n           DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 month'  AS m2,\n           DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 month'  AS m3\n), last3 AS (\n    SELECT c.customer_id, t.amount,\n           DATE_TRUNC('month', t.txn_date) AS mon\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    JOIN recent       AS r ON DATE_TRUNC('month', t.txn_date) IN (r.m1, r.m2, r.m3)\n)\nSELECT COUNT(DISTINCT customer_id) AS customers_without_withdrawals\nFROM (\n    SELECT customer_id\n    FROM last3\n    GROUP BY customer_id\n    HAVING SUM(CASE WHEN amount < 0 THEN 1 ELSE 0 END) = 0\n) AS sub;\n\n/* Answer the following: For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "evidence": "",
            "raw_question": "For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: For every month after the very first one, what is the total user balance recorded in the previous month, counting negative balances as zero?  The result must be sorted chronologically. */\nSELECT\n        curr.month                                   AS month,\n        ( SELECT SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END )\n            FROM monthly_user_balances\n           WHERE month = curr.month - INTERVAL '1 month'\n        )                                           AS prev_month_total_balance\nFROM   ( SELECT DISTINCT month\n         FROM monthly_user_balances ) AS curr\nWHERE  curr.month >\n       ( SELECT MIN(month) FROM monthly_user_balances )        -- drop the first month itself\nORDER BY curr.month;\n\n\n/* Answer the following: Show, for every month except the first, the change (delta) in total balance compared with the previous month after turning all negative balances into zero.  List the month together with the delta, ordered by month. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n)\nSELECT\n       curr.month,\n       curr.total_pos_bal - prev.total_pos_bal  AS delta_from_prev\nFROM   month_totals  AS curr\nJOIN   month_totals  AS prev\n       ON prev.month = curr.month - INTERVAL '1 month'\nORDER  BY curr.month;\n\n\n/* Answer the following: Which month saw the single-largest jump (positive delta) in total balance versus the previous month when negatives are replaced with zero?  Return the month and the size of the jump. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n),\ndeltas AS (\n       SELECT\n              curr.month,\n              curr.total_pos_bal - prev.total_pos_bal AS delta_from_prev\n       FROM   month_totals AS curr\n       JOIN   month_totals AS prev\n              ON prev.month = curr.month - INTERVAL '1 month'\n)\nSELECT month, delta_from_prev\nFROM   deltas\nORDER  BY delta_from_prev DESC\nLIMIT  1;\n\n\n/* Answer the following: List the five users who had the highest non-negative balance in the month immediately preceding the latest month in the table. */\nWITH latest_month AS (\n       SELECT MAX(month) AS lm FROM monthly_user_balances\n),\nprev_month_balances AS (\n       SELECT\n              user_id,\n              CASE WHEN balance < 0 THEN 0 ELSE balance END AS pos_balance\n       FROM   monthly_user_balances, latest_month\n       WHERE  month = lm - INTERVAL '1 month'\n)\nSELECT user_id\nFROM   prev_month_balances\nORDER  BY pos_balance DESC\nLIMIT  5;\n\n\n/* Answer the following: Produce a running cumulative total of monthly positive balances (negative counted as 0) across all users, omitting the first month that only serves as baseline.  List month and cumulative_total. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n),\nfiltered AS (\n       SELECT *\n       FROM   month_totals\n       WHERE  month >\n              ( SELECT MIN(month) FROM month_totals )\n)\nSELECT\n       month,\n       SUM(total_pos_bal) OVER (ORDER BY month) AS cumulative_total\nFROM   filtered\nORDER  BY month;\n\n\n/* Answer the following: For every user and every month except their first one, show that user\u2019s balance from the previous month (negative treated as 0). */\nWITH ranked AS (\n       SELECT\n              user_id,\n              month,\n              balance,\n              LAG(balance) OVER (PARTITION BY user_id ORDER BY month) AS prev_bal\n       FROM   monthly_user_balances\n)\nSELECT\n       user_id,\n       month,\n       CASE WHEN prev_bal IS NULL OR prev_bal < 0 THEN 0 ELSE prev_bal END AS prev_month_balance\nFROM   ranked\nWHERE  prev_bal IS NOT NULL\nORDER  BY user_id, month;\n\n\n/* Answer the following: For each user, what is their average previous-month balance (negative shown as zero) across their entire history after their first recorded month? */\nWITH ranked AS (\n       SELECT\n              user_id,\n              LAG(balance) OVER (PARTITION BY user_id ORDER BY month) AS prev_bal\n       FROM   monthly_user_balances\n)\nSELECT\n       user_id,\n       AVG( CASE WHEN prev_bal < 0 THEN 0 ELSE prev_bal END ) AS avg_prev_month_balance\nFROM   ranked\nWHERE  prev_bal IS NOT NULL\nGROUP  BY user_id;\n\n\n/* Answer the following: How many users improved their balance (after negatives\u21920) compared with the immediately preceding month in each month after the first?  Give month and count. */\nWITH ordered AS (\n       SELECT\n              user_id,\n              month,\n              CASE WHEN balance < 0 THEN 0 ELSE balance END AS pos_bal,\n              LAG( CASE WHEN balance < 0 THEN 0 ELSE balance END )\n                   OVER (PARTITION BY user_id ORDER BY month) AS prev_pos_bal\n       FROM monthly_user_balances\n)\nSELECT\n       month,\n       COUNT(*) AS users_with_improvement\nFROM   ordered\nWHERE  prev_pos_bal IS NOT NULL\n  AND  pos_bal > prev_pos_bal\nGROUP  BY month\nORDER  BY month;\n\n\n/* Answer the following: Identify the earliest month in which the total of all users\u2019 previous-month positive balances exceeded 1,000,000.  Return that month. */\nWITH month_prev_tot AS (\n       SELECT\n              curr.month,\n              ( SELECT SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END )\n                  FROM monthly_user_balances\n                 WHERE month = curr.month - INTERVAL '1 month'\n              ) AS prev_total\n       FROM ( SELECT DISTINCT month FROM monthly_user_balances ) AS curr\n       WHERE curr.month >\n             ( SELECT MIN(month) FROM monthly_user_balances )\n)\nSELECT month\nFROM   month_prev_tot\nWHERE  prev_total > 1000000\nORDER  BY month\nLIMIT  1;\n\n/* Answer the following: For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "evidence": "",
            "raw_question": "For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the highest single-day ending balance reached by any customer during calendar year 2023? highest single-day ending balance refers to MAX(daily_balance); ending balance is the cumulative sum of deposits (transaction_type = 'DEPOSIT') minus everything else; calendar year 2023 refers to transaction_date BETWEEN '2023-01-01' AND '2023-12-31' (inclusive). */\nSELECT MAX(daily_balance)\nFROM (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id \n                  ORDER BY transaction_date\n                  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)       AS daily_balance\n    FROM transactions\n    WHERE transaction_date BETWEEN '2023-01-01' AND '2023-12-31'\n) AS D;\n\n/* Answer the following: List the 5 customers who experienced the longest consecutive run of days with a negative running balance at any time in their history. negative running balance refers to daily_balance < 0; longest consecutive run refers to MAX(streak_len) per customer; list 5 customers with the largest streak_len. */\nWITH daily AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id \n                  ORDER BY transaction_date)                              AS daily_balance\n    FROM transactions\n),\nneg AS (\n    SELECT *,\n           CASE WHEN daily_balance < 0 THEN 1 ELSE 0 END                  AS is_neg\n    FROM daily\n),\ngrp AS (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY day) -\n           ROW_NUMBER() OVER (PARTITION BY customer_id, is_neg ORDER BY day) AS grp_id\n    FROM neg\n),\nstreaks AS (\n    SELECT customer_id,\n           COUNT(*) AS streak_len\n    FROM grp\n    WHERE is_neg = 1\n    GROUP BY customer_id, grp_id\n)\nSELECT customer_id\nFROM streaks\nORDER BY streak_len DESC\nLIMIT 5;\n\n/* Answer the following: For every calendar month, how many customers had a 30-day rolling average running balance of more than 5,000 on at least one day within that month? 30-day rolling average refers to AVG(daily_balance) over the preceding 29 days plus current; more than 5,000 refers to > 5000. */\nWITH daily AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id ORDER BY transaction_date)      AS daily_balance\n    FROM transactions\n),\nroll30 AS (\n    SELECT\n        customer_id,\n        day,\n        AVG(daily_balance) OVER (PARTITION BY customer_id\n                                 ORDER BY day\n                                 ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS avg30\n    FROM daily\n    QUALIFY COUNT(*) OVER (PARTITION BY customer_id ORDER BY day\n                           ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) = 30\n),\nflagged AS (\n    SELECT DISTINCT\n        customer_id,\n        DATE_TRUNC('month', day) AS month\n    FROM roll30\n    WHERE avg30 > 5000\n)\nSELECT month,\n       COUNT(DISTINCT customer_id) AS customers_above_5k\nFROM flagged\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: For each customer, return their first deposit date and their first withdrawal date. deposit refers to transaction_type = 'DEPOSIT'; withdrawal refers to transaction_type IN ('WITHDRAWAL','FEE', etc.). */\nSELECT\n    c.customer_id,\n    MIN(CASE WHEN t.transaction_type = 'DEPOSIT'     THEN t.transaction_date END) AS first_deposit_date,\n    MIN(CASE WHEN t.transaction_type <> 'DEPOSIT'    THEN t.transaction_date END) AS first_withdrawal_date\nFROM customers AS c\nJOIN transactions AS t ON t.customer_id = c.customer_id\nGROUP BY c.customer_id;\n\n/* Answer the following: Which customers have an average transaction amount greater than the overall average transaction amount, and what was each of their ending balances in the most recent full month? most recent full month refers to MAX(month) in transactions truncated to month. */\nWITH overall AS (\n    SELECT AVG(amount) AS overall_avg FROM transactions\n),\ncust_avg AS (\n    SELECT customer_id, AVG(amount) AS cust_avg FROM transactions GROUP BY customer_id\n),\nlatest_month AS (\n    SELECT DATE_TRUNC('month', MAX(transaction_date)) AS mth FROM transactions\n),\nending AS (\n    SELECT\n        t.customer_id,\n        SUM(CASE WHEN t.transaction_type = 'DEPOSIT' \n                 THEN t.amount ELSE -t.amount END)\n            OVER (PARTITION BY t.customer_id \n                  ORDER BY t.transaction_date\n                  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)       AS running_bal,\n        DATE_TRUNC('month', t.transaction_date)                           AS mth\n    FROM transactions AS t\n)\nSELECT DISTINCT\n       e.customer_id,\n       e.running_bal AS ending_balance\nFROM ending       AS e\nJOIN latest_month AS lm   ON e.mth = lm.mth\nJOIN cust_avg     AS ca   ON ca.customer_id = e.customer_id\nJOIN overall      AS o    ON ca.cust_avg > o.overall_avg\nQUALIFY e.transaction_date = MAX(e.transaction_date) OVER (PARTITION BY e.customer_id);\n\n/* Answer the following: For every customer, what percentage of their transactions are deposits? percentage of deposits = (deposit_count / total_count)*100. */\nWITH counts AS (\n    SELECT\n        customer_id,\n        COUNT(*)                                                AS total_cnt,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' THEN 1 ELSE 0 END) AS dep_cnt\n    FROM transactions\n    GROUP BY customer_id\n)\nSELECT\n    customer_id,\n    ROUND(dep_cnt * 100.0 / NULLIF(total_cnt,0), 2) AS pct_deposit\nFROM counts;\n\n/* Answer the following: Identify all months during which total withdrawal amounts exceeded total deposit amounts by more than 20 percent. withdrawal refers to transaction_type <> 'DEPOSIT'; exceeded by more than 20 percent refers to withdrawals > deposits * 1.2. */\nWITH monthly AS (\n    SELECT\n        DATE_TRUNC('month', transaction_date)                              AS month,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE 0 END)                                   AS deposits,\n        SUM(CASE WHEN transaction_type <> 'DEPOSIT' \n                 THEN amount ELSE 0 END)                                   AS withdrawals\n    FROM transactions\n    GROUP BY month\n)\nSELECT month\nFROM monthly\nWHERE withdrawals > deposits * 1.2\nORDER BY month;\n\n/* Answer the following: For each customer, on which day in 2022 did they record their highest 7-day rolling sum of withdrawal amounts? withdrawal refers to transaction_type <> 'DEPOSIT'; 7-day rolling sum uses window ROWS BETWEEN 6 PRECEDING AND CURRENT ROW; 2022 refers to transaction_date BETWEEN '2022-01-01' AND '2022-12-31'. */\nWITH daily_w AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                   AS day,\n        SUM(CASE WHEN transaction_type <> 'DEPOSIT' \n                 THEN amount ELSE 0 END)                         AS day_withdraw\n    FROM transactions\n    WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31'\n    GROUP BY customer_id, day\n),\nroll7 AS (\n    SELECT\n        customer_id,\n        day,\n        SUM(day_withdraw) OVER (PARTITION BY customer_id \n                                ORDER BY day\n                                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS sum7\n    FROM daily_w\n)\nSELECT customer_id, day AS peak_day\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY sum7 DESC, day) AS rn\n    FROM roll7\n) AS x\nWHERE rn = 1\nORDER BY customer_id;\n\n/* Answer the following: Compute, for every calendar quarter, the total across all customers of their maximum 90-day rolling average balances, excluding each customer\u2019s baseline quarter (the first quarter in which they appear). baseline quarter refers to MIN(quarter) per customer; 90-day rolling average as AVG(daily_balance) over 90 days; maximum 90-day rolling average per customer per quarter refers to MAX(avg90) within that quarter. */\nWITH daily AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                         AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id \n                  ORDER BY transaction_date)                           AS daily_balance\n    FROM transactions\n),\navg90 AS (\n    SELECT\n        customer_id,\n        day,\n        AVG(daily_balance) OVER (PARTITION BY customer_id \n                                 ORDER BY day\n                                 ROWS BETWEEN 89 PRECEDING AND CURRENT ROW) AS avg90\n    FROM daily\n    QUALIFY COUNT(*) OVER (PARTITION BY customer_id ORDER BY day\n                           ROWS BETWEEN 89 PRECEDING AND CURRENT ROW) = 90\n),\nper_qtr AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('quarter', day) AS qtr,\n        MAX(avg90)                 AS max_avg90\n    FROM avg90\n    GROUP BY customer_id, qtr\n),\nno_base AS (\n    SELECT p.*\n    FROM per_qtr AS p\n    JOIN (\n        SELECT customer_id,\n               MIN(qtr) AS base_qtr\n        FROM per_qtr\n        GROUP BY customer_id\n    ) b ON b.customer_id = p.customer_id\n    WHERE p.qtr <> b.base_qtr\n)\nSELECT\n    qtr,\n    SUM(max_avg90) AS sum_of_max_avg90\nFROM no_base\nGROUP BY qtr\nORDER BY qtr;\n\n/* Answer the following: For a bank database with customer transactions, calculate each customer's daily running balance (where deposits add to the balance and other transaction types subtract). For each customer and each day, compute the 30-day rolling average balance (only after having 30 days of data, and treating negative averages as zero). Then group these daily averages by month and find each customer's maximum 30-day average balance within each month. Sum these maximum values across all customers for each month. Consider the first month of each customer's transaction history as the baseline period and exclude it from the final results, presenting monthly totals of these summed maximum 30-day average balances.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "evidence": "",
            "raw_question": "Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following:  For each account, work out its balance for every calendar day between the account\u2019s first and last transaction (propagating the last known balance forward when no transaction occurs and turning negative balances into 0).  After that, find the highest daily balance each account reached in every month, and finally show, month-by-month, the sum of those monthly highs across all accounts. */\nSELECT mth,\n       SUM(max_daily_bal) AS total_max_balance\nFROM (\n        WITH all_days AS (\n            SELECT  account_id,\n                    generate_series(MIN(transaction_date),\n                                    MAX(transaction_date),\n                                    INTERVAL '1 day')::date AS day\n            FROM account_transactions\n            GROUP BY account_id\n        ),\n        daily_deltas AS (\n            SELECT  d.account_id,\n                    d.day,\n                    COALESCE(SUM(t.amount),0) AS delta\n            FROM all_days d\n            LEFT JOIN account_transactions t\n                   ON t.account_id = d.account_id\n                  AND t.transaction_date = d.day\n            GROUP BY d.account_id, d.day\n        ),\n        running_balance AS (\n            SELECT  account_id,\n                    day,\n                    GREATEST(\n                        SUM(delta) OVER (PARTITION BY account_id\n                                         ORDER BY day\n                                         ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                        0) AS balance\n            FROM daily_deltas\n        ),\n        monthly_max AS (\n            SELECT  account_id,\n                    DATE_TRUNC('month',day)::date       AS mth,\n                    MAX(balance)                        AS max_daily_bal\n            FROM running_balance\n            GROUP BY account_id, DATE_TRUNC('month',day)\n        )\n        SELECT * FROM monthly_max\n     ) x\nGROUP BY mth\nORDER BY mth;\n\n\n/* Answer the following:  Determine each warehouse\u2019s inventory level for every day between its earliest and latest stock movement, forward-filling any gaps and coercing negative levels to zero.  Then, for every quarter, obtain the highest daily level seen in each warehouse and total those peaks to get the company-wide quarterly inventory maximum. */\nSELECT qtr,\n       SUM(max_level) AS company_quarterly_peak\nFROM (\n        WITH days AS (\n            SELECT warehouse_id,\n                   generate_series(MIN(movement_date),\n                                   MAX(movement_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM warehouse_inventory\n            GROUP BY warehouse_id\n        ),\n        deltas AS (\n            SELECT d.warehouse_id,\n                   d.d,\n                   COALESCE(SUM(wi.quantity_change),0) AS delta\n            FROM days d\n            LEFT JOIN warehouse_inventory wi\n                   ON wi.warehouse_id = d.warehouse_id\n                  AND wi.movement_date = d.d\n            GROUP BY d.warehouse_id, d.d\n        ),\n        levels AS (\n            SELECT warehouse_id,\n                   d,\n                   GREATEST(\n                       SUM(delta) OVER (PARTITION BY warehouse_id\n                                        ORDER BY d\n                                        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS lvl\n            FROM deltas\n        ),\n        qmax AS (\n            SELECT warehouse_id,\n                   DATE_TRUNC('quarter',d)::date AS qtr,\n                   MAX(lvl)                     AS max_level\n            FROM levels\n            GROUP BY warehouse_id, DATE_TRUNC('quarter',d)\n        )\n        SELECT * FROM qmax\n     ) s\nGROUP BY qtr\nORDER BY qtr;\n\n\n/* Answer the following:  Build a per-project daily total of hours worked between first and last time-log entries, filling missing days with 0, never allowing the cumulative hours to be negative.  For each month, find the maximum daily hours logged for each project and then sum those maxima at the department level. */\nSELECT dept.department_id,\n       mth,\n       SUM(max_daily_hrs) AS dept_monthly_peak_hours\nFROM (\n        WITH base AS (\n            SELECT project_id,\n                   generate_series(MIN(log_date),\n                                   MAX(log_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM time_logs\n            GROUP BY project_id\n        ),\n        daily AS (\n            SELECT b.project_id,\n                   b.d,\n                   COALESCE(SUM(tl.hours),0) AS hrs\n            FROM base b\n            LEFT JOIN time_logs tl\n                   ON tl.project_id = b.project_id\n                  AND tl.log_date   = b.d\n            GROUP BY b.project_id, b.d\n        ),\n        cumu AS (\n            SELECT project_id,\n                   d,\n                   GREATEST(\n                       SUM(hrs) OVER (PARTITION BY project_id\n                                      ORDER BY d\n                                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS tot_hrs\n            FROM daily\n        ),\n        pmax AS (\n            SELECT project_id,\n                   DATE_TRUNC('month',d)::date AS mth,\n                   MAX(tot_hrs)               AS max_daily_hrs\n            FROM cumu\n            GROUP BY project_id, DATE_TRUNC('month',d)\n        )\n        SELECT p.project_id,\n               p.mth,\n               p.max_daily_hrs\n        FROM pmax p\n     ) pm\nJOIN projects pr       ON pr.project_id = pm.project_id\nJOIN departments dept  ON dept.department_id = pr.department_id\nGROUP BY dept.department_id, mth\nORDER BY dept.department_id, mth;\n\n\n/* Answer the following:  For every IoT sensor, generate a continuous daily series of energy consumption from its first to last reading by forward-filling missing days and replacing negatives with 0.  Identify each sensor\u2019s peak daily consumption every month and then compute the facility\u2019s overall monthly peak (sum of sensors\u2019 peaks). */\nSELECT month,\n       SUM(sensor_peak) AS facility_monthly_peak_kwh\nFROM (\n        WITH days AS (\n            SELECT sensor_id,\n                   generate_series(MIN(read_date),\n                                   MAX(read_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM energy_readings\n            GROUP BY sensor_id\n        ),\n        daily AS (\n            SELECT d.sensor_id,\n                   d.d,\n                   COALESCE(er.kwh,0) AS kwh\n            FROM days d\n            LEFT JOIN energy_readings er\n                   ON er.sensor_id = d.sensor_id\n                  AND er.read_date = d.d\n            GROUP BY d.sensor_id, d.d\n        ),\n        filled AS (\n            SELECT sensor_id,\n                   d,\n                   GREATEST(\n                       SUM(kwh) OVER (PARTITION BY sensor_id ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS cons\n            FROM daily\n        ),\n        mmax AS (\n            SELECT sensor_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(cons)                  AS sensor_peak\n            FROM filled\n            GROUP BY sensor_id, DATE_TRUNC('month',d)\n        )\n        SELECT * FROM mmax\n     ) t\nGROUP BY month\nORDER BY month;\n\n\n/* Answer the following:  Compute each mobile subscriber\u2019s data balance on a day-to-day basis between their initial and most recent usage record, forwarding balances when no usage is recorded and treating negatives as 0.  Per calendar month, retrieve every subscriber\u2019s highest daily balance and sum these per subscription plan. */\nSELECT plan_id,\n       month,\n       SUM(max_bal) AS total_plan_peak_mb\nFROM (\n        WITH seq AS (\n            SELECT subscriber_id,\n                   generate_series(MIN(usage_date),\n                                   MAX(usage_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM data_usage\n            GROUP BY subscriber_id\n        ),\n        deltas AS (\n            SELECT s.subscriber_id,\n                   s.d,\n                   COALESCE(SUM(du.delta_mb),0) AS delta\n            FROM seq s\n            LEFT JOIN data_usage du\n                   ON du.subscriber_id = s.subscriber_id\n                  AND du.usage_date   = s.d\n            GROUP BY s.subscriber_id, s.d\n        ),\n        bal AS (\n            SELECT subscriber_id,\n                   d,\n                   GREATEST(\n                       SUM(delta) OVER (PARTITION BY subscriber_id ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS balance\n            FROM deltas\n        ),\n        mpeak AS (\n            SELECT subscriber_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(balance)               AS max_bal\n            FROM bal\n            GROUP BY subscriber_id, DATE_TRUNC('month',d)\n        )\n        SELECT sp.plan_id,\n               mp.month,\n               mp.max_bal\n        FROM mpeak mp\n        JOIN subscribers sp ON sp.subscriber_id = mp.subscriber_id\n     ) u\nGROUP BY plan_id, month\nORDER BY plan_id, month;\n\n\n/* Answer the following:  Produce each stock\u2019s closing price for every trading day within its observed range by carrying the last known close forward on missing days (with 0 as floor).  Next, get the highest close per stock for every month, and finally compute the average of those monthly highs for each sector. */\nSELECT sector,\n       month,\n       AVG(monthly_high_close) AS sector_avg_monthly_high\nFROM (\n        WITH span AS (\n            SELECT symbol,\n                   generate_series(MIN(trade_date),\n                                   MAX(trade_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM stock_prices\n            GROUP BY symbol\n        ),\n        closes AS (\n            SELECT s.symbol,\n                   s.d,\n                   sp.close_price\n            FROM span s\n            LEFT JOIN stock_prices sp\n                   ON sp.symbol     = s.symbol\n                  AND sp.trade_date = s.d\n        ),\n        filled AS (\n            SELECT symbol,\n                   d,\n                   MAX(close_price) OVER (PARTITION BY symbol ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS close_filled\n            FROM closes\n        ),\n        bounded AS (\n            SELECT symbol,\n                   d,\n                   COALESCE(close_filled,0) AS close_fix\n            FROM filled\n        ),\n        mhigh AS (\n            SELECT symbol,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(close_fix)             AS monthly_high_close\n            FROM bounded\n            GROUP BY symbol, DATE_TRUNC('month',d)\n        )\n        SELECT st.sector,\n               m.month,\n               m.monthly_high_close\n        FROM mhigh m\n        JOIN stocks st ON st.symbol = m.symbol\n     ) r\nGROUP BY sector, month\nORDER BY sector, month;\n\n\n/* Answer the following:  For every product, make a daily sales time series from first to last sale, filling gaps with 0 and avoiding negative cumulative units.  Fetch each product\u2019s maximum daily sales per month, and provide per region the sum of these peaks. */\nSELECT region_id,\n       month,\n       SUM(max_units) AS regional_monthly_peak_units\nFROM (\n        WITH range AS (\n            SELECT product_id,\n                   generate_series(MIN(sale_date),\n                                   MAX(sale_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM sales\n            GROUP BY product_id\n        ),\n        dly AS (\n            SELECT r.product_id,\n                   r.d,\n                   COALESCE(SUM(s.units),0) AS units\n            FROM range r\n            LEFT JOIN sales s\n                   ON s.product_id = r.product_id\n                  AND s.sale_date  = r.d\n            GROUP BY r.product_id, r.d\n        ),\n        cum AS (\n            SELECT product_id,\n                   d,\n                   GREATEST(\n                       SUM(units) OVER (PARTITION BY product_id ORDER BY d),\n                       0) AS bal_units\n            FROM dly\n        ),\n        mtop AS (\n            SELECT product_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(bal_units)             AS max_units\n            FROM cum\n            GROUP BY product_id, DATE_TRUNC('month',d)\n        )\n        SELECT pr.region_id,\n               m.month,\n               m.max_units\n        FROM mtop m\n        JOIN products pr ON pr.product_id = m.product_id\n     ) q\nGROUP BY region_id, month\nORDER BY region_id, month;\n\n\n/* Answer the following:  Track each employee\u2019s leave-hour balance day by day between their first and last leave transaction, filling in gaps and replacing negative balances with 0.  For every calendar month, capture the peak daily balance per employee and then total those peaks company-wide. */\nSELECT month,\n       SUM(emp_peak_bal) AS company_monthly_peak_leave_hours\nFROM (\n        WITH cal AS (\n            SELECT employee_id,\n                   generate_series(MIN(trx_date),\n                                   MAX(trx_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM leave_transactions\n            GROUP BY employee_id\n        ),\n        diffs AS (\n            SELECT c.employee_id,\n                   c.d,\n                   COALESCE(SUM(lt.delta_hours),0) AS delta\n            FROM cal c\n            LEFT JOIN leave_transactions lt\n                   ON lt.employee_id = c.employee_id\n                  AND lt.trx_date    = c.d\n            GROUP BY c.employee_id, c.d\n        ),\n        bal AS (\n            SELECT employee_id,\n                   d,\n                   GREATEST(\n                       SUM(delta) OVER (PARTITION BY employee_id ORDER BY d),\n                       0) AS bal\n            FROM diffs\n        ),\n        p AS (\n            SELECT employee_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(bal)                   AS emp_peak_bal\n            FROM bal\n            GROUP BY employee_id, DATE_TRUNC('month',d)\n        )\n        SELECT * FROM p\n     ) fin\nGROUP BY month\nORDER BY month;\n\n\n/* Answer the following:  For each manufacturing line, determine its daily defect count from the first to the last recorded production day, forward-fill missing days with the previous count and clamp negatives to 0.  Then, for every quarter, find the maximum daily defects per line and add them together to get the plant\u2019s quarterly worst-case defect total. */\nSELECT quarter,\n       SUM(line_peak_defects) AS plant_quarterly_peak_defects\nFROM (\n        WITH span AS (\n            SELECT line_id,\n                   generate_series(MIN(prod_date),\n                                   MAX(prod_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM defects\n            GROUP BY line_id\n        ),\n        raw AS (\n            SELECT s.line_id,\n                   s.d,\n                   COALESCE(SUM(df.defect_cnt),0) AS cnt\n            FROM span s\n            LEFT JOIN defects df\n                   ON df.line_id  = s.line_id\n                  AND df.prod_date = s.d\n            GROUP BY s.line_id, s.d\n        ),\n        fill AS (\n            SELECT line_id,\n                   d,\n                   GREATEST(\n                       SUM(cnt) OVER (PARTITION BY line_id ORDER BY d),\n                       0) AS balance\n            FROM raw\n        ),\n        qpk AS (\n            SELECT line_id,\n                   DATE_TRUNC('quarter',d)::date AS quarter,\n                   MAX(balance)                AS line_peak_defects\n            FROM fill\n            GROUP BY line_id, DATE_TRUNC('quarter',d)\n        )\n        SELECT * FROM qpk\n     ) g\nGROUP BY quarter\nORDER BY quarter;\n\n/* Answer the following: For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "evidence": "",
            "raw_question": "For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What were the total sales in the four weeks leading up to June 15, 2020? */\nSELECT SUM(sales) AS total_pre_jun15_2020\nFROM weekly_sales\nWHERE week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14';\n\n/* Answer the following: By what percentage did sales change in the four weeks after June 15 compared with the four weeks before June 15 in 2019? */\nSELECT\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2019-06-15' AND DATE '2019-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2019-05-18' AND DATE '2019-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2019-05-18' AND DATE '2019-06-14' THEN sales END) \n  AS pct_change_2019\nFROM weekly_sales\nWHERE year = 2019;\n\n/* Answer the following: For each of the years 2018, 2019, and 2020, what was the percentage change in sales for the four weeks after June 15 versus the four weeks before? */\nSELECT \n  year,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n  AS pct_change\nFROM weekly_sales\nWHERE year IN (2018,2019,2020)\nGROUP BY year\nORDER BY year;\n\n/* Answer the following: Which of the years 2018-2020 showed the largest positive percentage change in sales around June 15? */\nWITH year_changes AS (\n  SELECT \n    year,\n    (SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) -\n     SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n    ) * 100.0 /\n    SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n    AS pct_change\n  FROM weekly_sales\n  WHERE year IN (2018,2019,2020)\n  GROUP BY year\n)\nSELECT year\nFROM year_changes\nORDER BY pct_change DESC\nLIMIT 1;\n\n/* Answer the following: For each product category, what was the percentage change in sales around June 15, 2020? */\nSELECT \n  product_category,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2020-06-15' AND DATE '2020-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14' THEN sales END) AS pct_change_2020\nFROM weekly_sales\nWHERE year = 2020\nGROUP BY product_category\nORDER BY pct_change_2020 DESC;\n\n/* Answer the following: Show the regions that experienced a decline (negative percentage change) in sales around June 15, 2018. */\nSELECT \n  region,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2018-06-15' AND DATE '2018-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2018-05-18' AND DATE '2018-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2018-05-18' AND DATE '2018-06-14' THEN sales END) AS pct_change_2018\nFROM weekly_sales\nWHERE year = 2018\nGROUP BY region\nHAVING pct_change_2018 < 0;\n\n/* Answer the following: What was the absolute difference in total sales (not percentage) around June 15, 2019? */\nSELECT \n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2019-06-15' AND DATE '2019-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2019-05-18' AND DATE '2019-06-14' THEN sales END)\n  ) AS sales_difference_2019\nFROM weekly_sales\nWHERE year = 2019;\n\n/* Answer the following: Across all three years combined, what was the average weekly sales in the four weeks before June 15 versus the four weeks after? */\nSELECT \n  AVG(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END) AS avg_weekly_pre,\n  AVG(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) AS avg_weekly_post\nFROM weekly_sales\nWHERE year IN (2018,2019,2020);\n\n/* Answer the following: Give the combined total sales for the four weeks before and the four weeks after June 15 across 2018-2020. */\nSELECT\n  SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END) AS total_before,\n  SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) AS total_after\nFROM weekly_sales\nWHERE year IN (2018,2019,2020);\n\n/* Answer the following: For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "evidence": "",
            "raw_question": "Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What were the total sales for every platform during the four weeks that immediately followed the product launch on 1 March 2021?  Four weeks after launch refers to sale_date BETWEEN '2021-03-01' AND '2021-03-28'. */\nSELECT platform,\n       SUM(sales_amount) AS total_sales\nFROM sales\nWHERE sale_date BETWEEN '2021-03-01' AND '2021-03-28'\nGROUP BY platform;\n\n/* Answer the following: For every region, what was the average weekly sales growth between the eight weeks before and the eight weeks after Black Friday 2022 (25 Nov 2022)? */\nSELECT region,\n       AVG(after_week.sales_sum - before_week.sales_sum) / NULLIF(before_week.sales_sum,0) * 100 AS avg_pct_growth\nFROM\n    (SELECT region,\n            strftime('%W', sale_date) AS wk,\n            SUM(sales_amount) AS sales_sum\n     FROM sales\n     WHERE sale_date BETWEEN date('2022-09-30','-8 weeks') AND '2022-11-24'\n     GROUP BY region, wk) AS before_week\nJOIN\n    (SELECT region,\n            strftime('%W', sale_date) AS wk,\n            SUM(sales_amount) AS sales_sum\n     FROM sales\n     WHERE sale_date BETWEEN '2022-11-25' AND date('2022-11-25','+8 weeks','-1 day')\n     GROUP BY region, wk) AS after_week\nON before_week.region = after_week.region AND before_week.wk = after_week.wk\nGROUP BY region;\n\n/* Answer the following: Which platform generated the highest share of sales among customers aged 25-34 during the second quarter of 2020 (1 Apr 2020 \u2013 30 Jun 2020)? */\nSELECT platform\nFROM sales\nWHERE age_band = '25-34'\n  AND sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY platform\nORDER BY SUM(sales_amount) DESC\nLIMIT 1;\n\n/* Answer the following: Calculate the percentage change in total sales for each customer type when comparing January 2020 with January 2021. */\nSELECT customer_type,\n       (SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2021-01' THEN sales_amount END) -\n        SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2020-01' THEN sales_amount END))\n       * 100.0 /\n       NULLIF(SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2020-01' THEN sales_amount END),0) AS pct_change\nFROM sales\nWHERE strftime('%Y-%m', sale_date) IN ('2020-01','2021-01')\nGROUP BY customer_type;\n\n/* Answer the following: Which demographic segment saw the greatest decline in revenue in the two months following the COVID-19 lockdown that started on 15 March 2020 (analysis window: 15 Mar \u2013 14 May 2020 compared with 15 Jan \u2013 14 Mar 2020)? */\nSELECT demographic\nFROM (\n    SELECT demographic,\n           (SUM(CASE WHEN sale_date BETWEEN '2020-03-15' AND '2020-05-14' THEN sales_amount END) -\n            SUM(CASE WHEN sale_date BETWEEN '2020-01-15' AND '2020-03-14' THEN sales_amount END)) * 100.0 /\n            NULLIF(SUM(CASE WHEN sale_date BETWEEN '2020-01-15' AND '2020-03-14' THEN sales_amount END),0) AS pct_change\n    FROM sales\n    WHERE sale_date BETWEEN '2020-01-15' AND '2020-05-14'\n    GROUP BY demographic\n) \nORDER BY pct_change ASC\nLIMIT 1;\n\n/* Answer the following: List the three age bands with the highest average order value during 2021 inside the North America region. */\nSELECT age_band\nFROM sales\nWHERE region = 'North America'\n  AND strftime('%Y', sale_date) = '2021'\nGROUP BY age_band\nORDER BY AVG(sales_amount) DESC\nLIMIT 3;\n\n/* Answer the following: What were the total online-platform sales for loyal customers during the holiday season (1 Dec \u2013 31 Dec) each year from 2018 through 2021?  Loyal customers refers to customer_type = 'Loyal'; online platform refers to platform = 'Online'. */\nSELECT strftime('%Y', sale_date) AS sales_year,\n       SUM(sales_amount) AS holiday_sales\nFROM sales\nWHERE customer_type = 'Loyal'\n  AND platform = 'Online'\n  AND strftime('%m-%d', sale_date) BETWEEN '12-01' AND '12-31'\n  AND strftime('%Y', sale_date) BETWEEN '2018' AND '2021'\nGROUP BY sales_year\nORDER BY sales_year;\n\n/* Answer the following: Provide cumulative sales up to 30 Jun 2020 for each region. */\nSELECT region,\n       SUM(sales_amount) AS cumulative_sales\nFROM sales\nWHERE sale_date <= '2020-06-30'\nGROUP BY region;\n\n/* Answer the following: Which customer type exhibited the greatest month-to-month sales volatility (highest standard deviation of monthly sales) during 2020? */\nWITH monthly AS (\n    SELECT customer_type,\n           strftime('%Y-%m', sale_date) AS ym,\n           SUM(sales_amount) AS month_sales\n    FROM sales\n    WHERE strftime('%Y', sale_date) = '2020'\n    GROUP BY customer_type, ym\n), stats AS (\n    SELECT customer_type,\n           AVG(month_sales) AS mean_sales,\n           AVG((month_sales - AVG(month_sales) OVER (PARTITION BY customer_type)) * \n               (month_sales - AVG(month_sales) OVER (PARTITION BY customer_type))) AS variance\n    FROM monthly\n)\nSELECT customer_type\nFROM stats\nORDER BY sqrt(variance) DESC\nLIMIT 1;\n\n/* Answer the following: Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "n_examples": 9,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "evidence": "",
            "raw_question": "How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each season, which constructor won the championship? */\nSELECT DISTINCT ra.year,\n       c.name AS constructor_name\nFROM constructor_standings AS cs\nJOIN races AS ra ON ra.raceId = cs.raceId\nJOIN constructors AS c ON c.constructorId = cs.constructorId\nWHERE cs.position = '1'\nORDER BY ra.year;\n\n/* Answer the following: What is the full name of the youngest driver who has ever won a race? */\nSELECT d.forename || ' ' || d.surname AS full_name\nFROM drivers AS d\nJOIN results AS r ON r.driverId = d.driverId\nWHERE r.position = 1\nORDER BY d.dob DESC\nLIMIT 1;\n\n/* Answer the following: What was the average number of laps completed by all cars in the 2008 Monaco Grand Prix? */\nSELECT AVG(r.laps)\nFROM results AS r\nJOIN races  AS ra ON ra.raceId = r.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Monaco Grand Prix';\n\n/* Answer the following: Which country has hosted the most Formula-1 races? */\nSELECT c.country,\n       COUNT(*) AS total_races\nFROM races    AS ra\nJOIN circuits AS c ON c.circuitId = ra.circuitId\nGROUP BY c.country\nORDER BY total_races DESC\nLIMIT 1;\n\n/* Answer the following: How many constructors are registered with British nationality? */\nSELECT COUNT(*)\nFROM constructors\nWHERE nationality = 'British';\n\n/* Answer the following: List the drivers who have won at least 10 Grand Prix in total. */\nSELECT d.forename || ' ' || d.surname AS driver_name\nFROM drivers AS d\nJOIN results AS r ON r.driverId = d.driverId\nWHERE r.position = 1\nGROUP BY d.driverId\nHAVING COUNT(*) >= 10;\n\n/* Answer the following: In the 2012 season, which race awarded the most points to its winner? */\nSELECT ra.name\nFROM results AS r\nJOIN races   AS ra ON ra.raceId = r.raceId\nWHERE ra.year = 2012\n  AND r.position = 1\nORDER BY r.points DESC\nLIMIT 1;\n\n/* Answer the following: Which driver has started from pole position (grid position = 1) the most times? */\nSELECT d.forename || ' ' || d.surname AS driver_name\nFROM results AS r\nJOIN drivers AS d ON d.driverId = r.driverId\nWHERE r.grid = 1\nGROUP BY r.driverId\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many Formula-1 races did Michael Schumacher participate in? */\nSELECT COUNT(*)\nFROM results AS r\nJOIN drivers AS d ON d.driverId = r.driverId\nWHERE d.forename = 'Michael'\n  AND d.surname  = 'Schumacher';\n\n/* Answer the following: For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Using only the data from the log table, compute for each web page  the number of unique user sessions where that page is either the first landing page or the exit page of the session based on the timestamp.",
            "evidence": "",
            "raw_question": "Using only the data from the log table, compute for each web page  the number of unique user sessions where that page is either the first landing page or the exit page of the session based on the timestamp.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which three driver-and-year combinations produced the highest single-season point totals, and what were those totals? */\nSELECT driverId,\n       year,\n       SUM(points) AS total_points\nFROM results\nGROUP BY year, driverId\nORDER BY total_points DESC\nLIMIT 3;\n\n/* Answer the following: For every year, what was the highest number of points scored by any single constructor that season? */\nSELECT y.year,\n       MAX(y.constructor_points) AS top_constructor_points\nFROM (\n        SELECT year,\n               constructorId,\n               SUM(points) AS constructor_points\n        FROM results\n        GROUP BY year, constructorId\n     ) AS y\nGROUP BY y.year\nORDER BY y.year;\n\n/* Answer the following: In which season did driver 1 collect his greatest total number of points, and how many did he earn?  */\nSELECT year,\n       SUM(points) AS total_points\nFROM results\nWHERE driverId = 1\nGROUP BY year\nORDER BY total_points DESC\nLIMIT 1;\n\n/* Answer the following: What is the average, across all seasons, of each season\u2019s best driver total (i.e., take the top driver for every season, then average those season-winning totals)? */\nSELECT AVG(season_best) AS avg_of_season_bests\nFROM (\n        SELECT year,\n               MAX(driver_points) AS season_best\n        FROM (\n                SELECT year,\n                       driverId,\n                       SUM(points) AS driver_points\n                FROM results\n                GROUP BY year, driverId\n             ) AS d\n        GROUP BY year\n     ) AS t;\n\n/* Answer the following: List the five constructors that have accumulated the greatest grand-total of points over all seasons, together with their totals. */\nSELECT constructorId,\n       SUM(points) AS total_points\nFROM results\nGROUP BY constructorId\nORDER BY total_points DESC\nLIMIT 5;\n\n/* Answer the following: What is the smallest non-zero seasonal point total ever recorded by driver 44, and in which year did it occur? */\nSELECT year,\n       total_points\nFROM (\n        SELECT year,\n               SUM(points) AS total_points\n        FROM results\n        WHERE driverId = 44\n        GROUP BY year\n        HAVING SUM(points) > 0\n     ) AS s\nORDER BY total_points\nLIMIT 1;\n\n/* Answer the following: Which driver shows the largest gap between his best and worst season totals, and what is that gap? */\nWITH yearly AS (\n     SELECT driverId,\n            year,\n            SUM(points) AS total_points\n     FROM results\n     GROUP BY driverId, year\n),\nextremes AS (\n     SELECT driverId,\n            MAX(total_points) AS max_pts,\n            MIN(total_points) AS min_pts\n     FROM yearly\n     GROUP BY driverId\n)\nSELECT driverId,\n       (max_pts - min_pts) AS point_gap\nFROM extremes\nORDER BY point_gap DESC\nLIMIT 1;\n\n/* Answer the following: How many total points were awarded across all drivers in the 2016 season? */\nSELECT SUM(points) AS total_points_2016\nFROM results\nWHERE year = 2016;\n\n/* Answer the following: Give the three seasons in which the constructors\u2019 champions scored the fewest points, together with those winning totals (ordered from smallest upward).  Constructors\u2019 champion refers to the constructor with the highest point total in that season. */\nSELECT year,\n       MAX(constructor_points) AS champion_points\nFROM (\n        SELECT year,\n               constructorId,\n               SUM(points) AS constructor_points\n        FROM results\n        GROUP BY year, constructorId\n     ) AS c\nGROUP BY year\nORDER BY champion_points ASC\nLIMIT 3;\n\n/* Answer the following: Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "evidence": "",
            "raw_question": "Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which drivers have won at least 3 races in any season since 2010? */\nSELECT DISTINCT D.name , DS.year\nFROM driver_standings AS DS\nJOIN drivers AS D ON D.driver_id = DS.driver_id\nWHERE DS.year >= 2010\n  AND DS.wins >= 3;\n\n/* Answer the following: What are the top 5 teams with the lowest average pit-stop duration in the 2019 season? */\nSELECT C.name ,\n       AVG(P.duration_ms) AS avg_stop_ms\nFROM pit_stops AS P\nJOIN results      AS R ON R.race_id   = P.race_id \n                       AND R.driver_id = P.driver_id\nJOIN constructors AS C ON C.constructor_id = R.constructor_id\nJOIN races        AS Ra ON Ra.race_id = P.race_id\nWHERE Ra.year = 2019\nGROUP BY C.name\nORDER BY avg_stop_ms ASC\nLIMIT 5;\n\n/* Answer the following: How many races have been run on circuits whose length exceeds 5 kilometres? */\nSELECT COUNT(*)\nFROM races   AS Ra\nJOIN circuits AS C ON C.circuit_id = Ra.circuit_id\nWHERE C.length_km > 5;\n\n/* Answer the following: In which year did Lewis Hamilton lead the most total laps, and how many laps did he lead? */\nSELECT Ra.year ,\n       SUM(R.laps_led) AS total_laps_led\nFROM results  AS R\nJOIN races    AS Ra ON Ra.race_id = R.race_id\nJOIN drivers  AS D  ON D.driver_id = R.driver_id\nWHERE D.name = 'Lewis Hamilton'\nGROUP BY Ra.year\nORDER BY total_laps_led DESC\nLIMIT 1;\n\n/* Answer the following: List the circuits where the fastest speed recorded exceeded 350 km/h. */\nSELECT DISTINCT C.name\nFROM speed_trap AS S\nJOIN races      AS Ra ON Ra.race_id = S.race_id\nJOIN circuits   AS C  ON C.circuit_id = Ra.circuit_id\nGROUP BY C.name\nHAVING MAX(S.speed_kmh) > 350;\n\n/* Answer the following: Which drivers have started from pole position but failed to finish the race more than twice? */\nSELECT D.name\nFROM results AS R\nJOIN drivers AS D ON D.driver_id = R.driver_id\nWHERE R.grid_position = 1\n  AND R.status <> 'Finished'\nGROUP BY D.name\nHAVING COUNT(*) > 2;\n\n/* Answer the following: How many constructors with an annual budget above 500 million dollars have gone on to win the constructors\u2019 championship? */\nSELECT COUNT(DISTINCT CS.constructor_id)\nFROM constructor_standings AS CS\nJOIN budgets               AS B \n     ON B.constructor_id = CS.constructor_id\n    AND B.year           = CS.year\nWHERE B.budget_million > 500\n  AND CS.position = 1;\n\n/* Answer the following: Who is the youngest driver ever to score a podium finish, and how old was he at that race? */\nSELECT D.name ,\n       (JULIANDAY(Ra.date) - JULIANDAY(D.birth_date)) / 365.25 AS age_years\nFROM results  AS R\nJOIN drivers  AS D  ON D.driver_id = R.driver_id\nJOIN races    AS Ra ON Ra.race_id  = R.race_id\nWHERE R.position <= 3\nORDER BY age_years ASC\nLIMIT 1;\n\n/* Answer the following: What is the average finishing position for each rookie driver in his debut season? */\nWITH debut AS (\n     SELECT R.driver_id ,\n            MIN(Ra.year) AS debut_year\n     FROM results AS R\n     JOIN races   AS Ra ON Ra.race_id = R.race_id\n     GROUP BY R.driver_id\n)\nSELECT D.name ,\n       AVG(R.position) AS avg_finish_position\nFROM results AS R\nJOIN races   AS Ra ON Ra.race_id = R.race_id\nJOIN debut   AS DB ON DB.driver_id = R.driver_id\n                 AND DB.debut_year = Ra.year\nJOIN drivers AS D  ON D.driver_id = R.driver_id\nGROUP BY D.name;\n\n/* Answer the following: Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "evidence": "",
            "raw_question": "How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many total page views were recorded for the '/home' page? */\nSELECT COUNT(*) \nFROM page_views \nWHERE page_url = '/home';\n\n/* Answer the following: Which five pages were visited by the highest number of unique sessions? */\nSELECT page_url\nFROM page_views\nGROUP BY page_url\nORDER BY COUNT(DISTINCT session_id) DESC\nLIMIT 5;\n\n/* Answer the following: What is the average number of pages a visitor looks at within a single session? */\nSELECT AVG(cnt)\nFROM (\n    SELECT COUNT(*) AS cnt\n    FROM page_views\n    GROUP BY session_id\n) AS session_counts;\n\n/* Answer the following: Give the IDs of sessions that visited the '/login' page but never visited the '/logout' page. */\nSELECT DISTINCT pv1.session_id\nFROM page_views AS pv1\nWHERE pv1.page_url = '/login'\n  AND NOT EXISTS (\n      SELECT 1\n      FROM page_views AS pv2\n      WHERE pv2.session_id = pv1.session_id\n        AND pv2.page_url = '/logout'\n  );\n\n/* Answer the following: How many sessions began on the '/landing' page? */\nSELECT COUNT(*)\nFROM sessions\nWHERE start_page = '/landing';\n\n/* Answer the following: What is the maximum number of pages viewed in any single session? */\nSELECT MAX(cnt)\nFROM (\n    SELECT COUNT(*) AS cnt\n    FROM page_views\n    GROUP BY session_id\n) AS t;\n\n/* Answer the following: On which date did the highest number of sessions reach the '/purchase/complete' page? */\nSELECT DATE(pv.view_time) AS visit_date\nFROM page_views AS pv\nWHERE pv.page_url = '/purchase/complete'\nGROUP BY visit_date\nORDER BY COUNT(DISTINCT pv.session_id) DESC\nLIMIT 1;\n\n/* Answer the following: How many sessions viewed '/cart' and then '/checkout' right after, with no intervening pages inside that session? */\nSELECT COUNT(DISTINCT pv1.session_id)\nFROM page_views AS pv1\nJOIN page_views AS pv2\n  ON pv1.session_id = pv2.session_id\n  AND pv2.view_order = pv1.view_order + 1\nWHERE pv1.page_url = '/cart'\n  AND pv2.page_url = '/checkout';\n\n/* Answer the following: List the pages that were viewed immediately before an '/error' page view. */\nSELECT DISTINCT pv_prev.page_url\nFROM page_views AS pv_err\nJOIN page_views AS pv_prev\n  ON pv_err.session_id = pv_prev.session_id\n  AND pv_prev.view_order = pv_err.view_order - 1\nWHERE pv_err.page_url = '/error';\n\n/* Answer the following: How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "n_examples": 9,
            "db_id": "log"
        },
        {
            "question": "Identify the sessions with the minimal number of events occurring before the first '/detail' click or '/complete' conversion within the session, considering only events with non-empty search types. If multiple sessions share this minimum count, include all of them. For each session, display the associated paths and search types.",
            "evidence": "",
            "raw_question": "Identify the sessions with the minimal number of events occurring before the first '/detail' click or '/complete' conversion within the session, considering only events with non-empty search types. If multiple sessions share this minimum count, include all of them. For each session, display the associated paths and search types.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which page is the most common landing page and how many sessions began there? */\nSELECT al.page_url ,\n       COUNT(*) AS sessions_started\nFROM (\n        SELECT session_id ,\n               MIN(event_time) AS first_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS f\nJOIN activity_log AS al\n  ON al.session_id = f.session_id\n AND al.event_time = f.first_time\nGROUP BY al.page_url\nORDER BY sessions_started DESC\nLIMIT 1;\n\n/* Answer the following: How many unique sessions ended on the page \u201c/checkout\u201d? */\nSELECT COUNT(*) AS checkout_exit_sessions\nFROM (\n        SELECT session_id ,\n               MAX(event_time) AS last_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS l\nJOIN activity_log AS al\n  ON al.session_id = l.session_id\n AND al.event_time = l.last_time\nWHERE al.page_url = '/checkout';\n\n/* Answer the following: For every page, count the number of sessions in which it was both the landing and the exit page. */\nSELECT landing.page_url ,\n       COUNT(*) AS sessions_landing_and_exit\nFROM (\n        SELECT session_id ,\n               MIN(event_time) AS first_time ,\n               MAX(event_time) AS last_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS ses\nJOIN activity_log AS landing\n  ON landing.session_id = ses.session_id\n AND landing.event_time = ses.first_time\nJOIN activity_log AS exitp\n  ON exitp.session_id = ses.session_id\n AND exitp.event_time = ses.last_time\nWHERE landing.page_url = exitp.page_url\nGROUP BY landing.page_url;\n\n/* Answer the following: For each user, how many of their sessions started on \u201c/home\u201d? */\nSELECT al.user_id ,\n       COUNT(*) AS sessions_from_home\nFROM (\n        SELECT session_id ,\n               user_id ,\n               MIN(event_time) AS first_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS f\nJOIN activity_log AS al\n  ON al.session_id = f.session_id\n AND al.event_time = f.first_time\nWHERE al.page_url = '/home'\nGROUP BY al.user_id;\n\n/* Answer the following: What percentage of all sessions exited on \u201c/pricing\u201d? */\nWITH exit_pages AS (\n        SELECT al.session_id ,\n               al.page_url\n        FROM (\n                SELECT session_id ,\n                       MAX(event_time) AS last_time\n                FROM activity_log\n                GROUP BY session_id\n             ) AS le\n        JOIN activity_log AS al\n          ON al.session_id = le.session_id\n         AND al.event_time = le.last_time\n     ),\n     total_sessions AS (\n        SELECT COUNT(DISTINCT session_id) AS total\n        FROM activity_log\n     ),\n     pricing_exit AS (\n        SELECT COUNT(*) AS pricing\n        FROM exit_pages\n        WHERE page_url = '/pricing'\n     )\nSELECT 100.0 * pricing_exit.pricing / total_sessions.total AS pct_exit_pricing\nFROM pricing_exit , total_sessions;\n\n/* Answer the following: List the pages that never appeared as a landing page in any session. */\nWITH landing_pages AS (\n        SELECT DISTINCT al.page_url\n        FROM (\n                SELECT session_id ,\n                       MIN(event_time) AS first_time\n                FROM activity_log\n                GROUP BY session_id\n             ) AS f\n        JOIN activity_log AS al\n          ON al.session_id = f.session_id\n         AND al.event_time = f.first_time\n     )\nSELECT DISTINCT page_url\nFROM activity_log\nWHERE page_url NOT IN (SELECT page_url FROM landing_pages);\n\n/* Answer the following: For each day, give the number of sessions and unique users whose landing page was \u201c/blog\u201d. */\nWITH firsts AS (\n        SELECT session_id ,\n               user_id ,\n               MIN(event_time) AS first_time\n        FROM activity_log\n        GROUP BY session_id\n     ),\n     blog_landings AS (\n        SELECT f.session_id ,\n               f.user_id ,\n               DATE(al.event_time) AS session_date\n        FROM firsts AS f\n        JOIN activity_log AS al\n          ON al.session_id = f.session_id\n         AND al.event_time = f.first_time\n        WHERE al.page_url = '/blog'\n     )\nSELECT session_date ,\n       COUNT(DISTINCT session_id)  AS sessions ,\n       COUNT(DISTINCT user_id)     AS users\nFROM blog_landings\nGROUP BY session_date\nORDER BY session_date;\n\n/* Answer the following: How many sessions began on \u201c/search\u201d and ended on \u201c/checkout\u201d? */\nWITH ses AS (\n        SELECT session_id ,\n               MIN(event_time) AS first_time ,\n               MAX(event_time) AS last_time\n        FROM activity_log\n        GROUP BY session_id\n     ),\n     joined AS (\n        SELECT ses.session_id\n        FROM ses\n        JOIN activity_log AS lpage\n          ON lpage.session_id = ses.session_id\n         AND lpage.event_time = ses.first_time\n        JOIN activity_log AS epage\n          ON epage.session_id = ses.session_id\n         AND epage.event_time = ses.last_time\n        WHERE lpage.page_url = '/search'\n          AND epage.page_url = '/checkout'\n     )\nSELECT COUNT(*) AS sessions_search_to_checkout\nFROM joined;\n\n/* Answer the following: How many sessions started and ended on the same domain (ignoring the path)? */\nWITH pages AS (\n        SELECT session_id ,\n               SUBSTRING_INDEX(page_url , '/' , 3) AS domain ,\n               event_time\n        FROM activity_log\n     ),\n     bounds AS (\n        SELECT session_id ,\n               MIN(event_time) AS first_time ,\n               MAX(event_time) AS last_time\n        FROM pages\n        GROUP BY session_id\n     ),\n     dom_compare AS (\n        SELECT p_start.domain AS start_domain ,\n               p_end.domain   AS end_domain\n        FROM bounds AS b\n        JOIN pages  AS p_start\n          ON p_start.session_id = b.session_id\n         AND p_start.event_time = b.first_time\n        JOIN pages  AS p_end\n          ON p_end.session_id = b.session_id\n         AND p_end.event_time = b.last_time\n     )\nSELECT COUNT(*) AS sessions_same_domain\nFROM dom_compare\nWHERE start_domain = end_domain;\n\n/* Answer the following: Using the activity log table, compute the total number of unique user sessions where each web page appears as either a landing page (the first page visited in a session based on timestamp) or an exit page (the last page visited in a session based on timestamp), or both. Count each session only once per page even if the page serves as both landing and exit for that session. ",
            "n_examples": 9,
            "db_id": "log"
        },
        {
            "question": "Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "evidence": "",
            "raw_question": "Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which page is most frequently the very first page visited in a session? */\nSELECT page_url, COUNT(*) AS freq_first\nFROM visits\nWHERE visit_order = 1\nGROUP BY page_url\nORDER BY freq_first DESC\nLIMIT 1;\n\n/* Answer the following: How many sessions include at least two consecutive visits to the '/detail' page? two consecutive means the second visit has visit_order exactly one greater than the first within the same session. */\nSELECT COUNT(DISTINCT first.session_id)\nFROM visits AS first\nJOIN visits AS second\n  ON first.session_id = second.session_id\n AND second.visit_order = first.visit_order + 1\nWHERE first.page_url = '/detail'\n  AND second.page_url = '/detail';\n\n/* Answer the following: List the five pages most commonly visited immediately after a visit to the '/cart' page and show how many times each occurs. \u201cImmediately after\u201d refers to the next visit in the same session (visit_order + 1). */\nSELECT next.page_url, COUNT(*) AS freq\nFROM visits AS cur\nJOIN visits AS next\n  ON cur.session_id = next.session_id\n AND next.visit_order = cur.visit_order + 1\nWHERE cur.page_url = '/cart'\nGROUP BY next.page_url\nORDER BY freq DESC\nLIMIT 5;\n\n/* Answer the following: What is the average number of pages viewed per session for sessions that eventually reached the '/checkout' page? */\nSELECT AVG(page_count)\nFROM (\n  SELECT session_id, COUNT(*) AS page_count\n  FROM visits\n  GROUP BY session_id\n  HAVING SUM(CASE WHEN page_url = '/checkout' THEN 1 ELSE 0 END) > 0\n) AS t;\n\n/* Answer the following: Which calendar day saw the highest number of distinct sessions that included at least one visit to the '/search' page? */\nSELECT DATE(visit_time) AS day,\n       COUNT(DISTINCT session_id) AS sessions_with_search\nFROM visits\nWHERE page_url = '/search'\nGROUP BY day\nORDER BY sessions_with_search DESC\nLIMIT 1;\n\n/* Answer the following: Which user had the single session with the greatest number of visits to the '/product' page, and how many such visits did that session contain? */\nSELECT s.user_id, pv.prod_visits\nFROM (\n  SELECT session_id, COUNT(*) AS prod_visits\n  FROM visits\n  WHERE page_url = '/product'\n  GROUP BY session_id\n  ORDER BY prod_visits DESC\n  LIMIT 1\n) AS pv\nJOIN sessions AS s ON pv.session_id = s.session_id;\n\n/* Answer the following: Give the three most frequent two-page sequences that start with '/home' and how often each sequence appears. */\nSELECT CONCAT(first.page_url, ' -> ', second.page_url) AS sequence,\n       COUNT(*) AS freq\nFROM visits AS first\nJOIN visits AS second\n  ON first.session_id = second.session_id\n AND second.visit_order = first.visit_order + 1\nWHERE first.page_url = '/home'\nGROUP BY sequence\nORDER BY freq DESC\nLIMIT 3;\n\n/* Answer the following: How many sessions lasted longer than 10 minutes? Session duration is calculated as MAX(visit_time) \u2212 MIN(visit_time) within a session. */\nSELECT COUNT(*)\nFROM (\n  SELECT session_id\n  FROM visits\n  GROUP BY session_id\n  HAVING (MAX(visit_time) - MIN(visit_time)) > INTERVAL '10 minutes'\n) AS long_sessions;\n\n/* Answer the following: For each traffic source, what percentage of its sessions reached the '/checkout' page? */\nSELECT src.source,\n       ROUND(100.0 * SUM(CASE WHEN c.session_id IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*), 2) AS pct_checkout\nFROM sessions AS src\nLEFT JOIN (\n  SELECT DISTINCT session_id\n  FROM visits\n  WHERE page_url = '/checkout'\n) AS c ON src.session_id = c.session_id\nGROUP BY src.source;\n\n/* Answer the following: Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "n_examples": 9,
            "db_id": "log"
        },
        {
            "question": "In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "evidence": "",
            "raw_question": "In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Since 2010, which driver has accumulated the highest total number of pole positions and how many did he secure?  (pole position means grid = 1 in the race results) */\nSELECT d.surname ,\n       COUNT(*) AS poles\nFROM results   AS r\nJOIN races     AS ra ON ra.raceId = r.raceId\nJOIN drivers   AS d  ON d.driverId = r.driverId\nWHERE ra.year >= 2010\n  AND r.grid  = 1\nGROUP BY d.driverId\nORDER BY poles DESC\nLIMIT 1;\n\n/* Answer the following: What was the average finishing position of Valtteri Bottas in races he finished (status = 'Finished') during the 2017 season? */\nSELECT AVG(r.positionOrder)\nFROM results  AS r\nJOIN races    AS ra ON ra.raceId  = r.raceId\nJOIN drivers  AS d  ON d.driverId = r.driverId\nJOIN status   AS s  ON s.statusId = r.statusId\nWHERE ra.year = 2017\n  AND d.surname = 'Bottas'\n  AND s.status  = 'Finished';\n\n/* Answer the following: List the three circuits where Lewis Hamilton has won the most races.  (a win means position = 1) */\nSELECT c.name\nFROM results  AS r\nJOIN races    AS ra ON ra.raceId   = r.raceId\nJOIN circuits AS c  ON c.circuitId = ra.circuitId\nJOIN drivers  AS d  ON d.driverId  = r.driverId\nWHERE d.surname = 'Hamilton'\n  AND r.position = 1\nGROUP BY c.circuitId\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: In the 2008 season, which constructor recorded the fewest total points across all races and how many points did they score? */\nSELECT co.name ,\n       SUM(cs.points) AS total_points\nFROM constructorStandings AS cs\nJOIN races             AS ra ON ra.raceId     = cs.raceId\nJOIN constructors      AS co ON co.constructorId = cs.constructorId\nWHERE ra.year = 2008\nGROUP BY co.constructorId\nORDER BY total_points ASC\nLIMIT 1;\n\n/* Answer the following: How many unique drivers set at least one fastest lap in the 2019 season?  (fastest lap is indicated by rank = 1 in the results table) */\nSELECT COUNT(DISTINCT d.driverId)\nFROM results AS r\nJOIN races   AS ra ON ra.raceId  = r.raceId\nJOIN drivers AS d  ON d.driverId = r.driverId\nWHERE ra.year = 2019\n  AND r.rank  = 1;\n\n/* Answer the following: Which Formula 1 season had the highest average number of retirements per race?  (a retirement is any result whose status contains the word 'Retired') */\nSELECT ra.year\nFROM races  AS ra\nJOIN results AS r  ON r.raceId  = ra.raceId\nJOIN status  AS s  ON s.statusId = r.statusId\nGROUP BY ra.year\nORDER BY AVG(CASE WHEN s.status LIKE '%Retired%' THEN 1 ELSE 0 END) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total number of World Drivers\u2019 Championship titles won by German drivers?  (world champion = driverStandings.position = 1 for a season-ending race) */\nSELECT COUNT(*) \nFROM (\n      SELECT DISTINCT ra.year\n      FROM driverStandings AS ds\n      JOIN races         AS ra ON ra.raceId  = ds.raceId\n      JOIN drivers       AS d  ON d.driverId = ds.driverId\n      WHERE ds.position = 1\n        AND d.nationality = 'German'\n     ) AS german_titles;\n\n/* Answer the following: In the 2016 season, which Grand Prix had the smallest time gap in milliseconds between the winner and the second-place finisher? */\nSELECT ra.name\nFROM results AS r1\nJOIN results AS r2 ON r2.raceId = r1.raceId\n                  AND r2.positionOrder = 2\nJOIN races   AS ra ON ra.raceId = r1.raceId\nWHERE ra.year = 2016\n  AND r1.positionOrder = 1\nORDER BY ABS(r1.milliseconds - r2.milliseconds) ASC\nLIMIT 1;\n\n/* Answer the following: Between 2005 and 2015, which driver had the highest podium percentage (finishes in positions 1\u20133) among drivers with at least 50 race starts, and what was that percentage? */\nSELECT d.surname ,\n       100.0 * SUM(CASE WHEN r.positionOrder <= 3 THEN 1 ELSE 0 END) / COUNT(*) AS podium_percentage\nFROM results AS r\nJOIN races   AS ra ON ra.raceId  = r.raceId\nJOIN drivers AS d  ON d.driverId = r.driverId\nWHERE ra.year BETWEEN 2005 AND 2015\nGROUP BY d.driverId\nHAVING COUNT(*) >= 50\nORDER BY podium_percentage DESC\nLIMIT 1;\n\n/* Answer the following: In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "evidence": "",
            "raw_question": "In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: In the first five laps of the 2022 Italian Grand Prix, how many overtakes occurred in each category? first five laps refers to lap_number BETWEEN 1 AND 5 */\nSELECT O.category , COUNT(*) AS num_overtakes\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Italian Grand Prix'\n  AND R.year = 2022\n  AND O.lap_number BETWEEN 1 AND 5\nGROUP BY O.category;\n\n/* Answer the following: Which driver performed the most overtakes in the 2021 season? most refers to MAX(COUNT(*)) */\nSELECT D.full_name\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id         = O.race_id\nJOIN drivers   AS D ON D.driver_id       = O.overtaker_driver_id\nWHERE R.year = 2021\nGROUP BY D.driver_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the races where pit-stop related overtakes outnumbered standard on-track passes. pit-stop refers to category = 'pit stop'; standard refers to category = 'standard' */\nSELECT R.name ,\n       R.year\nFROM races AS R\nJOIN overtakes AS O ON O.race_id = R.race_id\nGROUP BY R.race_id\nHAVING SUM(CASE WHEN O.category = 'pit stop' THEN 1 ELSE 0 END) >\n       SUM(CASE WHEN O.category = 'standard' THEN 1 ELSE 0 END);\n\n/* Answer the following: For the 2020 season, what is the average lap number at which each category of overtake occurred? */\nSELECT O.category ,\n       AVG(O.lap_number) AS avg_lap\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.year = 2020\nGROUP BY O.category;\n\n/* Answer the following: In the 2023 Bahrain Grand Prix, which three laps registered the highest number of start-related overtakes? start-related refers to category = 'start'; top 3 refers to LIMIT 3 */\nSELECT O.lap_number ,\n       COUNT(*) AS num_start_overtakes\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Bahrain Grand Prix'\n  AND R.year = 2023\n  AND O.category = 'start'\nGROUP BY O.lap_number\nORDER BY num_start_overtakes DESC\nLIMIT 3;\n\n/* Answer the following: How many different drivers made at least one retirement-related overtake in the 2019 Singapore Grand Prix? retirement-related refers to category = 'retirement' */\nSELECT COUNT(DISTINCT O.overtaker_driver_id)\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Singapore Grand Prix'\n  AND R.year = 2019\n  AND O.category = 'retirement';\n\n/* Answer the following: Give the total number of overtakes for each race that had 50 or more overtakes in total. 50 or more refers to HAVING COUNT(*) >= 50 */\nSELECT R.name ,\n       R.year ,\n       COUNT(*) AS total_overtakes\nFROM races AS R\nJOIN overtakes AS O ON O.race_id = R.race_id\nGROUP BY R.race_id\nHAVING COUNT(*) >= 50;\n\n/* Answer the following: Which driver was overtaken the most due to pit stops across the entire dataset? pit stops refers to category = 'pit stop' */\nSELECT D.full_name\nFROM overtakes AS O\nJOIN drivers   AS D ON D.driver_id = O.overtaken_driver_id\nWHERE O.category = 'pit stop'\nGROUP BY D.driver_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: During the 2019 British Grand Prix, how many overtakes did Lewis Hamilton complete? */\nSELECT COUNT(*)\nFROM overtakes AS O\nJOIN races   AS R ON R.race_id         = O.race_id\nJOIN drivers AS D ON D.driver_id       = O.overtaker_driver_id\nWHERE R.name      = 'British Grand Prix'\n  AND R.year      = 2019\n  AND D.full_name = 'Lewis Hamilton';\n\n/* Answer the following: In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "evidence": "",
            "raw_question": "For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: What was the Grand Prix that featured the highest total number of pit stops in a single race, and how many stops were made? */\nSELECT R.name,\n       R.year,\n       COUNT(*) AS total_pit_stops\nFROM races AS R\nJOIN pit_stops AS P ON P.raceId = R.raceId\nGROUP BY R.raceId\nORDER BY total_pit_stops DESC\nLIMIT 1;\n\n/* Answer the following: List the five drivers who have recorded the fastest single lap times in Formula 1 history, showing each driver\u2019s best lap time and the race in which it occurred. */\nSELECT D.forename || ' ' || D.surname  AS driver_name,\n       L.milliseconds                  AS fastest_lap_ms,\n       R.name                          AS race_name\nFROM lap_times  AS L\nJOIN (\n        SELECT driverId,\n               MIN(milliseconds) AS best_time\n        FROM lap_times\n        GROUP BY driverId\n     ) AS B ON B.driverId  = L.driverId\n            AND B.best_time = L.milliseconds\nJOIN drivers AS D ON D.driverId = L.driverId\nJOIN races   AS R ON R.raceId   = L.raceId\nORDER BY fastest_lap_ms ASC\nLIMIT 5;\n\n/* Answer the following: During the 2021 season, how many races did each constructor win? */\nSELECT C.name  AS constructor_name,\n       COUNT(*) AS wins_2021\nFROM results      AS Res\nJOIN constructors AS C ON C.constructorId = Res.constructorId\nJOIN races        AS R ON R.raceId        = Res.raceId\nWHERE R.year = 2021\n  AND Res.position = 1\nGROUP BY C.constructorId;\n\n/* Answer the following: In the 2019 British Grand Prix, which driver gained the most positions from the starting grid to the final classification, and by how many positions? */\nSELECT D.forename || ' ' || D.surname AS driver_name,\n       (Res.grid - Res.position)      AS positions_gained\nFROM races   AS R\nJOIN results AS Res ON Res.raceId = R.raceId\nJOIN drivers AS D   ON D.driverId = Res.driverId\nWHERE R.year = 2019\n  AND R.name = 'British Grand Prix'\nORDER BY positions_gained DESC\nLIMIT 1;\n\n/* Answer the following: What was the average number of pit stops per driver per race in the 2020 season? */\nSELECT AVG(stops_per_driver) AS avg_stops_per_driver_2020\nFROM (\n        SELECT P.raceId,\n               P.driverId,\n               COUNT(*) AS stops_per_driver\n        FROM pit_stops AS P\n        JOIN races     AS R ON R.raceId = P.raceId\n        WHERE R.year = 2020\n        GROUP BY P.raceId, P.driverId\n     ) AS T;\n\n/* Answer the following: Which driver has achieved the most pole positions in Formula 1, and how many poles do they have? */\nSELECT D.forename || ' ' || D.surname AS driver_name,\n       COUNT(*)                       AS total_poles\nFROM qualifying AS Q\nJOIN drivers    AS D ON D.driverId = Q.driverId\nWHERE Q.position = 1\nGROUP BY D.driverId\nORDER BY total_poles DESC\nLIMIT 1;\n\n/* Answer the following: Which circuit has produced the greatest total number of retirements across all Formula 1 races? */\nSELECT C.name  AS circuit_name,\n       COUNT(*) AS total_retirements\nFROM results  AS Res\nJOIN status   AS S ON S.statusId = Res.statusId\nJOIN races    AS R ON R.raceId   = Res.raceId\nJOIN circuits AS C ON C.circuitId = R.circuitId\nWHERE LOWER(S.status) LIKE '%retired%'\nGROUP BY C.circuitId\nORDER BY total_retirements DESC\nLIMIT 1;\n\n/* Answer the following: Which drivers scored points in every race they entered during the 2022 season? */\nSELECT D.forename || ' ' || D.surname AS driver_name\nFROM results AS Res\nJOIN drivers AS D ON D.driverId = Res.driverId\nJOIN races   AS R ON R.raceId   = Res.raceId\nWHERE R.year = 2022\nGROUP BY Res.driverId\nHAVING MIN(Res.points) > 0;\n\n/* Answer the following: In the 2018 season, which constructor accumulated the highest combined pit-stop duration, and what was that total duration? */\nSELECT C.name                 AS constructor_name,\n       SUM(P.duration)        AS total_duration_seconds\nFROM pit_stops    AS P\nJOIN races        AS R   ON R.raceId        = P.raceId\nJOIN results      AS Res ON Res.raceId      = P.raceId\n                        AND Res.driverId    = P.driverId\nJOIN constructors AS C   ON C.constructorId = Res.constructorId\nWHERE R.year = 2018\nGROUP BY C.constructorId\nORDER BY total_duration_seconds DESC\nLIMIT 1;\n\n/* Answer the following: Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "evidence": "",
            "raw_question": "Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: Which driver scored the highest total points in the 2005 season? */\nSELECT d.forename || ' ' || d.surname\nFROM drivers AS d\nJOIN results AS r          ON r.driverId = d.driverId\nJOIN races   AS ra         ON ra.raceId  = r.raceId\nWHERE ra.year = 2005\nGROUP BY d.driverId\nORDER BY SUM(r.points) DESC\nLIMIT 1;\n\n/* Answer the following: Give the constructors that won more than three races in the 1988 season. */\nSELECT c.name\nFROM constructors AS c\nJOIN results      AS r  ON r.constructorId = c.constructorId\nJOIN races        AS ra ON ra.raceId       = r.raceId\nWHERE ra.year = 1988 \n  AND r.positionOrder = 1               -- a win\nGROUP BY c.constructorId\nHAVING COUNT(*) > 3;\n\n/* Answer the following: Which drivers achieved pole position in the first Formula 1 race they ever started?  (Pole position = grid = 1.) */\nSELECT DISTINCT d.forename || ' ' || d.surname\nFROM drivers  AS d\nJOIN results  AS r  ON r.driverId = d.driverId\nJOIN races    AS ra ON ra.raceId  = r.raceId\nWHERE r.grid = 1\n  AND ra.date = (\n        SELECT MIN(ra2.date)\n        FROM results r2\n        JOIN races  ra2 ON ra2.raceId = r2.raceId\n        WHERE r2.driverId = d.driverId\n      );\n\n/* Answer the following: How many races saw both Ayrton Senna and Alain Prost finish on the podium?  (Podium = positionOrder \u2264 3.) */\nSELECT COUNT(*)\nFROM (\n    SELECT ra.raceId\n    FROM races   ra\n    JOIN results r1 ON r1.raceId = ra.raceId\n    JOIN drivers d1 ON d1.driverId = r1.driverId\n    JOIN results r2 ON r2.raceId = ra.raceId\n    JOIN drivers d2 ON d2.driverId = r2.driverId\n    WHERE d1.forename = 'Ayrton' AND d1.surname = 'Senna' AND r1.positionOrder <= 3\n      AND d2.forename = 'Alain'  AND d2.surname = 'Prost' AND r2.positionOrder <= 3\n) AS both_on_podium;\n\n/* Answer the following: List the circuits that hosted a Grand Prix every season from 2000 through 2010 inclusive. */\nSELECT ci.name\nFROM circuits AS ci\nJOIN races    AS ra ON ra.circuitId = ci.circuitId\nWHERE ra.year BETWEEN 2000 AND 2010\nGROUP BY ci.circuitId\nHAVING COUNT(DISTINCT ra.year) = 11;\n\n/* Answer the following: For each driver who won at least one race in 1999, provide their total number of wins that season. */\nSELECT d.forename || ' ' || d.surname AS driver,\n       COUNT(*)                       AS wins\nFROM drivers  AS d\nJOIN results  AS r  ON r.driverId = d.driverId\nJOIN races    AS ra ON ra.raceId  = r.raceId\nWHERE ra.year = 1999\n  AND r.positionOrder = 1\nGROUP BY d.driverId;\n\n/* Answer the following: During which season did Ferrari accumulate its highest total points? */\nSELECT ra.year\nFROM constructors AS c\nJOIN results      AS r  ON r.constructorId = c.constructorId\nJOIN races        AS ra ON ra.raceId       = r.raceId\nWHERE c.name = 'Ferrari'\nGROUP BY ra.year\nORDER BY SUM(r.points) DESC\nLIMIT 1;\n\n/* Answer the following: Which driver recorded the largest positive difference between grid position and finishing position in a single race?  (Difference = grid \u2212 positionOrder.) */\nSELECT d.forename || ' ' || d.surname\nFROM drivers AS d\nJOIN results AS r ON r.driverId = d.driverId\nWHERE (r.grid - r.positionOrder) = (\n      SELECT MAX(r2.grid - r2.positionOrder)\n      FROM results r2\n      WHERE r2.grid > 0 AND r2.positionOrder > 0\n);\n\n/* Answer the following: How many different constructors won the Constructors\u2019 Championship between 1958 and 1960 inclusive?  (Champion = position = 1 in constructorStandings.) */\nSELECT COUNT(DISTINCT cs.constructorId)\nFROM constructorStandings AS cs\nJOIN races              AS ra ON ra.raceId = cs.raceId\nWHERE cs.position = 1\n  AND ra.year BETWEEN 1958 AND 1960;\n\n/* Answer the following: Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "evidence": "",
            "raw_question": "Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of pit\u2013stops made by drivers who were classified as \u201cFinished\u201d at the end of a race? */\nSELECT AVG(P.stops)\nFROM (\n        SELECT raceId ,\n               driverId ,\n               MAX(stop) AS stops          -- number of stops a driver made in that race\n        FROM pitStops\n        GROUP BY raceId , driverId\n     ) AS P\nJOIN results   AS R ON R.raceId  = P.raceId  AND R.driverId = P.driverId\nJOIN status    AS S ON S.statusId = R.statusId\nWHERE S.status = 'Finished';\n\n\n/* Answer the following: Which drivers have raced for more than three different constructors during their Formula 1 career? */\nSELECT D.forename || ' ' || D.surname  AS driver_name\nFROM drivers  AS D\nJOIN results  AS R ON R.driverId = D.driverId\nGROUP BY D.driverId\nHAVING COUNT(DISTINCT R.constructorId) > 3;\n\n\n/* Answer the following: In which season did Lewis Hamilton record his highest average points per race, and what was that average? */\nSELECT Ra.year ,\n       AVG(R.points) AS avg_points\nFROM   drivers   AS D\nJOIN   results   AS R  ON R.driverId = D.driverId\nJOIN   races     AS Ra ON Ra.raceId  = R.raceId\nWHERE  D.forename = 'Lewis'\n  AND  D.surname  = 'Hamilton'\nGROUP  BY Ra.year\nORDER  BY avg_points DESC\nLIMIT  1;\n\n\n/* Answer the following: How many Grands Prix were won by a driver who started from pole-position?  (pole-position \u2192 grid = 1; winner \u2192 positionOrder = 1) */\nSELECT COUNT(*)\nFROM   results\nWHERE  grid = 1\n  AND  positionOrder = 1;\n\n\n/* Answer the following: Which constructor has the best (i.e., lowest) average finishing position in races from 2010 onward, considering only constructors with at least 50 classified finishes? */\nSELECT C.name\nFROM   constructors AS C\nJOIN   results      AS R  ON R.constructorId = C.constructorId\nJOIN   races        AS Ra ON Ra.raceId       = R.raceId\nWHERE  Ra.year >= 2010\n  AND  R.positionOrder IS NOT NULL\nGROUP  BY C.constructorId\nHAVING COUNT(*) >= 50\nORDER  BY AVG(R.positionOrder) ASC\nLIMIT  1;\n\n\n/* Answer the following: How many drivers scored points in their very first Formula 1 race? */\nSELECT COUNT(DISTINCT R.driverId)\nFROM   results AS R\nJOIN  (\n        SELECT driverId ,\n               MIN(raceId) AS debutRace\n        FROM   results\n        GROUP  BY driverId\n      ) AS Debut\n      ON Debut.driverId = R.driverId\n     AND Debut.debutRace = R.raceId\nWHERE  R.points > 0;\n\n\n/* Answer the following: Who recorded the fastest lap speed ever in Formula 1 and what was that speed? */\nSELECT D.forename || ' ' || D.surname  AS driver_name ,\n       R.fastestLapSpeed\nFROM   results AS R\nJOIN   drivers AS D ON D.driverId = R.driverId\nWHERE  R.fastestLapSpeed = (\n          SELECT MAX(CAST(fastestLapSpeed AS FLOAT))\n          FROM   results\n          WHERE  fastestLapSpeed IS NOT NULL\n      );\n\n\n/* Answer the following: Which race had the highest number of retirements classified as \u201cAccident\u201d, and how many such retirements occurred? */\nSELECT Ra.year ,\n       Ra.name ,\n       COUNT(*) AS accident_retirements\nFROM   results AS R\nJOIN   status  AS S  ON S.statusId = R.statusId\nJOIN   races   AS Ra ON Ra.raceId  = R.raceId\nWHERE  S.status LIKE '%Accident%'\nGROUP  BY Ra.raceId\nORDER  BY accident_retirements DESC\nLIMIT  1;\n\n\n/* Answer the following: Across all seasons, what is the average number of laps completed in a year by German drivers during seasons in which they scored more than 100 points? */\nSELECT AVG(yearly_avg_laps) \nFROM (\n        SELECT R.driverId ,\n               Ra.year ,\n               AVG(R.laps) AS yearly_avg_laps\n        FROM   results AS R\n        JOIN   races   AS Ra ON Ra.raceId  = R.raceId\n        JOIN   drivers AS D  ON D.driverId = R.driverId\n        WHERE  D.nationality = 'German'\n          AND  R.laps IS NOT NULL\n        GROUP  BY R.driverId , Ra.year\n        HAVING SUM(R.points) > 100\n     ) AS T;\n\n/* Answer the following: Calculate the overall average first round and average last round of races missed by Formula 1 drivers across all years. Include only drivers who missed fewer than three races in a given year and who switched teams between their appearances immediately before and after their hiatus (i.e., the constructor ID for the race right before their first missed race must be different from the constructor ID for the race right after their last missed race in that year). Do not group results by year; return just the overall averages across the entire dataset.",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "evidence": "",
            "raw_question": "Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many distinct drivers recorded at least one successful on-track overtake (excluding pit-lane moves, retirements and start-lap position changes) during the 2022 season? */\nSELECT COUNT(DISTINCT PC.driver_id)\nFROM position_changes AS PC\nJOIN races AS R \n  ON R.race_id = PC.race_id\nWHERE R.season = 2022\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1;\n\n/* Answer the following: List the Grand Prix names in 2021 where Max Verstappen lost a net total of two positions or more through on-track passes (ignoring pit sequences, retirements and the first lap). */\nSELECT DISTINCT R.grand_prix\nFROM races AS R\nJOIN drivers AS D       ON D.full_name = 'Max Verstappen'\nJOIN position_changes AS PC \n  ON PC.race_id  = R.race_id \n AND PC.driver_id = D.driver_id\nWHERE R.season = 2021\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY R.grand_prix\nHAVING SUM(\n           CASE \n             WHEN PC.new_position > PC.old_position THEN 1   -- he was overtaken\n             WHEN PC.new_position < PC.old_position THEN -1  -- he overtook someone\n             ELSE 0\n           END\n         ) >= 2;\n\n/* Answer the following: What is the total number of on-track passes (excluding pit-lane moves, retirements and start moves) that took place at the Italian GP since 2018? */\nSELECT COUNT(*) \nFROM position_changes AS PC\nJOIN races AS R \n  ON R.race_id = PC.race_id\nWHERE R.grand_prix = 'Italian Grand Prix'\n  AND R.season >= 2018\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1;\n\n/* Answer the following: Which driver made the most on-track overtakes during the 2020 season? */\nSELECT D.full_name\nFROM drivers AS D\nJOIN position_changes AS PC \n  ON PC.driver_id = D.driver_id\nJOIN races AS R            ON R.race_id = PC.race_id\nWHERE R.season = 2020\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY D.full_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Give the names of drivers who finished on the podium (final position \u2264 3) in a race where they were never overtaken on-track after the first lap. */\nSELECT DISTINCT D.full_name\nFROM results AS Res                 -- final classified results\nJOIN drivers AS D   ON D.driver_id = Res.driver_id\nWHERE Res.final_position <= 3\n  AND NOT EXISTS (\n        SELECT 1\n        FROM position_changes AS PC\n        WHERE PC.race_id   = Res.race_id\n          AND PC.driver_id = Res.driver_id\n          AND PC.change_type = 'on_track'\n          AND PC.lap_number > 1\n          AND PC.new_position > PC.old_position      -- was overtaken\n      );\n\n/* Answer the following: For each season since 2015, show the circuit that witnessed the highest number of on-track overtakes (excluding pit-lane, retirements, and first-lap moves). */\nSELECT R.season,\n       R.circuit,\n       COUNT(*) AS on_track_passes\nFROM position_changes AS PC\nJOIN races AS R ON R.race_id = PC.race_id\nWHERE R.season >= 2015\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY R.season, R.circuit\nHAVING COUNT(*) = (\n        SELECT MAX(pass_cnt)\n        FROM (\n              SELECT COUNT(*) AS pass_cnt\n              FROM position_changes AS PC2\n              JOIN races AS R2 ON R2.race_id = PC2.race_id\n              WHERE R2.season = R.season\n                AND PC2.change_type = 'on_track'\n                AND PC2.lap_number > 1\n              GROUP BY R2.circuit\n        ) AS sub\n      );\n\n/* Answer the following: Which team accumulated the greatest number of on-track overtakes made by both of its drivers combined in the 2019 season? */\nSELECT T.team_name\nFROM teams AS T\nJOIN drivers AS D        ON D.team_id = T.team_id\nJOIN position_changes AS PC \n  ON PC.driver_id = D.driver_id\nJOIN races AS R          ON R.race_id = PC.race_id\nWHERE R.season = 2019\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\n  AND PC.new_position < PC.old_position      -- driver gained position\nGROUP BY T.team_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many on-track passes occurred in wet-weather races (weather = 'Wet') between 2010 and 2020 inclusive? */\nSELECT COUNT(*)\nFROM position_changes AS PC\nJOIN races AS R ON R.race_id = PC.race_id\nWHERE R.season BETWEEN 2010 AND 2020\n  AND R.weather = 'Wet'\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1;\n\n/* Answer the following: Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding pit-lane position changes, retirements, and first-lap changes. */\nSELECT D.full_name\nFROM drivers AS D\nLEFT JOIN (\n        SELECT driver_id,\n               SUM(CASE WHEN new_position > old_position THEN 1 ELSE 0 END) AS times_overtaken,\n               SUM(CASE WHEN new_position < old_position THEN 1 ELSE 0 END) AS times_overtook\n        FROM position_changes\n        WHERE change_type = 'on_track'\n          AND lap_number > 1\n        GROUP BY driver_id\n) AS stats\nON stats.driver_id = D.driver_id\nWHERE COALESCE(stats.times_overtaken,0) > COALESCE(stats.times_overtook,0);\n\n/* Answer the following: Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops (both at pit entry and exit), retirements, or position changes that occurred during the first lap of a race (considered as start movements).",
            "n_examples": 9,
            "db_id": "f1"
        },
        {
            "question": "Calculate the average first and last rounds of races missed by drivers each year. Only include drivers who missed fewer than three races annually and who switched teams between the race immediately before their first missed race and the race immediately after their last missed race.",
            "evidence": "",
            "raw_question": "Calculate the average first and last rounds of races missed by drivers each year. Only include drivers who missed fewer than three races annually and who switched teams between the race immediately before their first missed race and the race immediately after their last missed race.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many active users signed up in each month of 2023? active refers to status = 'active'; signed up refers to signup_date */\nSELECT \n    EXTRACT(MONTH FROM signup_date) AS month, \n    COUNT(*) AS active_users\nFROM users\nWHERE signup_date >= '2023-01-01' \n  AND signup_date <  '2024-01-01'\n  AND status = 'active'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: What is the average number of orders per user in each age bucket (18-25, 26-35, 36-45, 46+)? */\nSELECT\n    CASE\n        WHEN u.age BETWEEN 18 AND 25 THEN '18-25'\n        WHEN u.age BETWEEN 26 AND 35 THEN '26-35'\n        WHEN u.age BETWEEN 36 AND 45 THEN '36-45'\n        ELSE '46+'\n    END AS age_bucket,\n    AVG(o.order_cnt) AS avg_orders\nFROM (\n        SELECT user_id, COUNT(*) AS order_cnt\n        FROM orders\n        GROUP BY user_id\n     ) AS o\nJOIN users u ON u.user_id = o.user_id\nGROUP BY age_bucket;\n\n/* Answer the following: For each country, how many users are older than 60? */\nSELECT \n    country, \n    COUNT(*) AS senior_users\nFROM users\nWHERE age > 60\nGROUP BY country;\n\n/* Answer the following: Which five cities have the highest number of users in their 30s? users in their 30s refers to age BETWEEN 30 AND 39 */\nSELECT \n    city, \n    COUNT(*) AS users_in_30s\nFROM users\nWHERE age BETWEEN 30 AND 39\nGROUP BY city\nORDER BY users_in_30s DESC\nLIMIT 5;\n\n/* Answer the following: How many premium users did we acquire each quarter in 2022? premium users refers to plan = 'premium' */\nSELECT \n    CONCAT('Q', EXTRACT(QUARTER FROM signup_date)) AS quarter,\n    COUNT(*) AS premium_signups\nFROM users\nWHERE signup_date >= '2022-01-01' \n  AND signup_date <  '2023-01-01'\n  AND plan = 'premium'\nGROUP BY quarter\nORDER BY quarter;\n\n/* Answer the following: What percentage of users are inactive for each device type? inactive refers to status = 'inactive' */\nSELECT \n    device_type,\n    100.0 * SUM(CASE WHEN status = 'inactive' THEN 1 ELSE 0 END) / COUNT(*) AS inactive_percentage\nFROM users\nGROUP BY device_type;\n\n/* Answer the following: List the age bucket and total revenue generated by users in that bucket in 2021. revenue refers to payments.amount; date refers to payments.date */\nSELECT\n    CASE\n        WHEN u.age < 20 THEN 'under20'\n        WHEN u.age BETWEEN 20 AND 29 THEN '20s'\n        WHEN u.age BETWEEN 30 AND 39 THEN '30s'\n        WHEN u.age BETWEEN 40 AND 49 THEN '40s'\n        ELSE '50plus'\n    END AS age_bucket,\n    SUM(p.amount) AS total_revenue\nFROM payments AS p\nJOIN users    AS u ON u.user_id = p.user_id\nWHERE p.date >= '2021-01-01' \n  AND p.date <  '2022-01-01'\nGROUP BY age_bucket;\n\n/* Answer the following: Give the gender and count of users who have never placed an order. */\nSELECT \n    u.gender, \n    COUNT(*) AS users_without_orders\nFROM users u\nLEFT JOIN orders o ON u.user_id = o.user_id\nWHERE o.user_id IS NULL\nGROUP BY u.gender;\n\n/* Answer the following: How many users joined during weekends? weekends refers to signup_date whose day-of-week is Saturday or Sunday */\nSELECT \n    COUNT(*) AS weekend_signups\nFROM users\nWHERE EXTRACT(DOW FROM signup_date) IN (0, 6);  -- 0 = Sunday, 6 = Saturday\n\n/* Answer the following: How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "n_examples": 9,
            "db_id": "log"
        },
        {
            "question": "Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops, retirements, or movements at the start of the race.",
            "evidence": "",
            "raw_question": "Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops, retirements, or movements at the start of the race.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n\n/* Answer the following: How many distinct sessions never reached either the '/detail' page or the '/complete' conversion? */\nSELECT COUNT(DISTINCT session_id)\nFROM activity_log\nWHERE session_id NOT IN (\n    SELECT DISTINCT session_id\n    FROM activity_log\n    WHERE path IN ('/detail', '/complete')\n);\n\n/* Answer the following: For each user session, what is the total time in seconds between the first and the last recorded event? */\nSELECT \n    session_id,\n    MAX(event_time) - MIN(event_time) AS session_duration_seconds\nFROM activity_log\nGROUP BY session_id;\n\n/* Answer the following: List the five most-frequently visited paths that immediately preceded a '/complete' conversion, ordered by their occurrence count. */\nWITH preceded AS (\n    SELECT\n        a.session_id,\n        a.path AS preceding_path\n    FROM activity_log AS a\n    JOIN activity_log AS b\n      ON a.session_id = b.session_id\n     AND a.event_time  = (\n            SELECT MAX(event_time)\n            FROM activity_log\n            WHERE session_id = b.session_id\n              AND event_time <  b.event_time\n        )\n    WHERE b.path = '/complete'\n)\nSELECT preceding_path, COUNT(*) AS cnt\nFROM preceded\nGROUP BY preceding_path\nORDER BY cnt DESC\nLIMIT 5;\n\n/* Answer the following: For each session, how many distinct non-empty search types were used? */\nSELECT\n    session_id,\n    COUNT(DISTINCT search_type) AS distinct_search_types\nFROM activity_log\nWHERE search_type <> ''\nGROUP BY session_id;\n\n/* Answer the following: What is the average number of '/detail' clicks per session? */\nWITH per_session AS (\n    SELECT session_id, COUNT(*) AS detail_clicks\n    FROM activity_log\n    WHERE path = '/detail'\n    GROUP BY session_id\n)\nSELECT AVG(detail_clicks) AS avg_detail_clicks\nFROM per_session;\n\n/* Answer the following: Which sessions achieved a '/complete' conversion without any prior '/detail' clicks? */\nWITH first_detail AS (\n    SELECT session_id, MIN(event_time) AS first_detail_time\n    FROM activity_log\n    WHERE path = '/detail'\n    GROUP BY session_id\n), first_complete AS (\n    SELECT session_id, MIN(event_time) AS first_complete_time\n    FROM activity_log\n    WHERE path = '/complete'\n    GROUP BY session_id\n)\nSELECT c.session_id\nFROM first_complete AS c\nLEFT JOIN first_detail  AS d\n  ON c.session_id = d.session_id\nWHERE d.first_detail_time IS NULL \n   OR c.first_complete_time < d.first_detail_time;\n\n/* Answer the following: What percentage of all events have an empty search type? */\nSELECT\n    ROUND(\n        100.0 * SUM(CASE WHEN search_type = '' THEN 1 ELSE 0 END) / COUNT(*),\n        2\n    ) AS pct_empty_search_type\nFROM activity_log;\n\n/* Answer the following: For each search type, how many unique sessions used it at least once? */\nSELECT\n    search_type,\n    COUNT(DISTINCT session_id) AS session_cnt\nFROM activity_log\nWHERE search_type <> ''\nGROUP BY search_type\nORDER BY session_cnt DESC;\n\n/* Answer the following: Identify all sessions whose very first recorded event was a '/complete' conversion. */\nWITH first_event AS (\n    SELECT\n        session_id,\n        MIN(event_time) AS first_time\n    FROM activity_log\n    GROUP BY session_id\n)\nSELECT a.session_id\nFROM first_event           AS f\nJOIN activity_log          AS a\n  ON a.session_id = f.session_id\n AND a.event_time = f.first_time\nWHERE a.path = '/complete';\n\n/* Answer the following: For each user session in the activity log table, identify the number of events that occurred before the first '/detail' click or '/complete' conversion, counting only events that have a non-empty search type. Find the sessions with the minimum count of such pre-click/pre-conversion events. If multiple sessions share this minimum count, include all of them in the results. Return each qualifying session along with the corresponding path and search type.",
            "n_examples": 9,
            "db_id": "log"
        }
    ],
    "extract": [
        {
            "question": "Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "evidence": "",
            "raw_question": "Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the total actual toy sales from January 1, 2017, to August 29, 2018? */\nSELECT SUM(actual_sales)\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2018-08-29';\n\n/* Answer the following: Which day in 2017 recorded the highest actual toy sales and what was the amount? */\nSELECT sale_date, actual_sales\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2017-12-31'\nORDER BY actual_sales DESC\nLIMIT 1;\n\n/* Answer the following: How many days between January 1, 2017, and August 29, 2018, had predicted sales exceeding actual sales by more than 10 units? */\nSELECT COUNT(*)\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2018-08-29'\n  AND predicted_sales - actual_sales > 10;\n\n/* Answer the following: What was the average daily actual toy sales for each month in 2017? */\nSELECT strftime('%Y-%m', sale_date) AS month,\n       AVG(actual_sales)             AS avg_daily_sales\nFROM daily_toy_sales\nWHERE sale_date BETWEEN '2017-01-01' AND '2017-12-31'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Using a simple linear regression on actual toy sales from January 1, 2017, to August 29, 2018, what is the predicted sales for September 1, 2018?  \n   (day_number = days since 2017-01-01; 608 is the day number for 2018-09-01) */\nSELECT REGR_INTERCEPT(actual_sales, day_number) +\n       REGR_SLOPE(actual_sales, day_number) * 608      AS predicted_sales_2018_09_01\nFROM (\n      SELECT actual_sales,\n             JULIANDAY(sale_date) - JULIANDAY('2017-01-01') AS day_number\n      FROM   daily_toy_sales\n      WHERE  sale_date BETWEEN '2017-01-01' AND '2018-08-29'\n) AS reg;\n\n/* Answer the following: What is the 5-day centered moving average of actual toy sales for July 15, 2018?  (Centered means two days before and two days after.) */\nSELECT AVG(actual_sales) AS centered_ma5\nFROM   daily_toy_sales\nWHERE  sale_date BETWEEN DATE('2018-07-15', '-2 day')\n                     AND DATE('2018-07-15', '+2 day');\n\n/* Answer the following: Can you calculate the 5-day symmetric moving average of predicted toy sales for December 5 to 8, 2018, using daily sales data from January 1, 2017, to August 29, 2018, with a simple linear regression model? Finally provide the sum of those four 5-day moving averages?",
            "n_examples": 6,
            "db_id": "E_commerce"
        },
        {
            "question": "According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "evidence": "",
            "raw_question": "According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many \u201cdelivered\u201d orders has every customer placed during the last 30 days? 30 days refers to order_ts >= DATE('now','-30 day'); delivered refers to status = 'delivered'. */\nSELECT \n    customer_id,\n    COUNT(*) AS delivered_orders_last_30_days\nFROM orders\nWHERE status = 'delivered' \n  AND order_ts >= DATE('now','-30 day')\nGROUP BY customer_id;\n\n/* Answer the following: What is the overall average order value considering only delivered orders? order value refers to total_amount; delivered refers to status = 'delivered'. */\nSELECT \n    AVG(total_amount) AS avg_order_value_delivered\nFROM orders\nWHERE status = 'delivered';\n\n/* Answer the following: List the top 5 customers who spent the most money on delivered orders in the previous calendar year. previous calendar year refers to strftime('%Y', order_ts) = strftime('%Y','now','-1 year'); delivered refers to status = 'delivered'. */\nSELECT \n    c.customer_id,\n    c.name,\n    SUM(o.total_amount) AS total_spend_last_year\nFROM customers AS c\nJOIN orders AS o \n  ON c.customer_id = o.customer_id\nWHERE o.status = 'delivered'\n  AND strftime('%Y', o.order_ts) = strftime('%Y','now','-1 year')\nGROUP BY c.customer_id, c.name\nORDER BY total_spend_last_year DESC\nLIMIT 5;\n\n/* Answer the following: For every customer, calculate Recency in days based on the most recent delivered order. Recency refers to JULIANDAY('now') - JULIANDAY(MAX(order_ts)). */\nSELECT\n    customer_id,\n    CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency_days\nFROM orders\nWHERE status = 'delivered'\nGROUP BY customer_id;\n\n/* Answer the following: Classify each customer into an RFM segment using the following cut\u2013offs: Recency \u2264 30 days = 'Champions'; 31\u201390 = 'Potential'; 91\u2013180 = 'Hibernating'; > 180 = 'Lost'. Frequency refers to number of delivered orders; Monetary refers to total delivered spend. Produce the segment per customer. */\nWITH rfm AS (\n    SELECT\n        customer_id,\n        CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency,\n        COUNT(*) AS frequency,\n        SUM(total_amount) AS monetary\n    FROM orders\n    WHERE status = 'delivered'\n    GROUP BY customer_id\n)\nSELECT\n    customer_id,\n    CASE\n        WHEN recency <= 30  THEN 'Champions'\n        WHEN recency <= 90  THEN 'Potential'\n        WHEN recency <= 180 THEN 'Hibernating'\n        ELSE 'Lost'\n    END AS rfm_segment\nFROM rfm;\n\n/* Answer the following: Compute the average sales per delivered order for each customer and return the results together with the RFM segment defined in the previous query. average sales per order refers to SUM(total_amount)/COUNT(*). */\nWITH cust_orders AS (\n    SELECT\n        customer_id,\n        COUNT(*)                           AS delivered_orders,\n        SUM(total_amount)                  AS total_spend\n    FROM orders\n    WHERE status = 'delivered'\n    GROUP BY customer_id\n),\ncust_rfm AS (\n    SELECT\n        customer_id,\n        CASE\n            WHEN recency <= 30  THEN 'Champions'\n            WHEN recency <= 90  THEN 'Potential'\n            WHEN recency <= 180 THEN 'Hibernating'\n            ELSE 'Lost'\n        END AS rfm_segment\n    FROM (\n        SELECT\n            customer_id,\n            CAST(JULIANDAY('now') - JULIANDAY(MAX(order_ts)) AS INTEGER) AS recency\n        FROM orders\n        WHERE status = 'delivered'\n        GROUP BY customer_id\n    )\n)\nSELECT\n    o.customer_id,\n    o.total_spend * 1.0 / o.delivered_orders AS avg_sales_per_order,\n    r.rfm_segment\nFROM cust_orders AS o\nJOIN cust_rfm  AS r ON o.customer_id = r.customer_id;\n\n/* Answer the following: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments",
            "n_examples": 6,
            "db_id": "E_commerce"
        },
        {
            "question": "Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "evidence": "",
            "raw_question": "Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which customer has paid the largest total amount overall, and what is that amount? */\nSELECT SUM(P.amount) AS total_paid\nFROM customers AS C\nJOIN orders   AS O ON O.customer_id = C.customer_id\nJOIN payments AS P ON P.order_id   = O.order_id\nGROUP BY C.customer_id\nORDER BY total_paid DESC\nLIMIT 1;\n\n/* Answer the following: List the five orders with the highest single\u2013order total value.  Return the order id, customer id, and order total. */\nSELECT order_id ,\n       customer_id ,\n       total_amount\nFROM orders\nORDER BY total_amount DESC\nLIMIT 5;\n\n/* Answer the following: How many customers have not placed any orders during the last 12 months? */\nSELECT COUNT(*)\nFROM (\n    SELECT C.customer_id\n    FROM customers AS C\n    LEFT JOIN orders AS O ON O.customer_id = C.customer_id\n    GROUP BY C.customer_id\n    HAVING MAX(O.order_date) IS NULL\n        OR MAX(O.order_date) < DATE('now','-12 months')\n) AS t;\n\n/* Answer the following: For each customer, what is the average number of days that elapse between two consecutive orders?  Show customer id and the average gap in days, ordered from smallest to largest gap. */\nSELECT customer_id,\n       AVG(days_gap) AS avg_days_between_orders\nFROM (\n    SELECT O.customer_id,\n           JULIANDAY(O.order_date)\n         - JULIANDAY(LAG(O.order_date)\n                     OVER (PARTITION BY O.customer_id\n                           ORDER BY O.order_date)) AS days_gap\n    FROM orders AS O\n) AS g\nWHERE days_gap IS NOT NULL\nGROUP BY customer_id\nORDER BY avg_days_between_orders;\n\n/* Answer the following: For every product category, give the number of distinct customers who have purchased at least one product from that category. */\nSELECT C.category_name,\n       COUNT(DISTINCT O.customer_id) AS customer_cnt\nFROM categories   AS C\nJOIN products     AS P  ON P.category_id  = C.category_id\nJOIN order_items  AS OI ON OI.product_id  = P.product_id\nJOIN orders       AS O  ON O.order_id     = OI.order_id\nGROUP BY C.category_id , C.category_name;\n\n/* Answer the following: What are the earliest and the latest order dates recorded in the system? */\nSELECT MIN(order_date) AS earliest_order_date ,\n       MAX(order_date) AS latest_order_date\nFROM orders;\n\n/* Answer the following: Could you tell me the number of orders, average payment per order and customer lifespan in weeks of the 3 custumers with the highest average payment per order, where the lifespan is calculated by subtracting the earliest purchase date from the latest purchase date in days, dividing by seven, and if the result is less than seven days, setting it to 1.0?",
            "n_examples": 6,
            "db_id": "E_commerce"
        },
        {
            "question": "Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "evidence": "",
            "raw_question": "Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Could you help me calculate the average single career span value in years for all baseball players? First, for every player compute the span as  \n      years  +  (months/12)  +  (days/365),  \n   where years, months and days come from age(finalGame , debut) and each fraction is rounded to two decimal places before summing.  Finally, average those spans and return the result as a float. */\nWITH spans AS (\n    SELECT\n        playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT ROUND(AVG(career_span), 2) AS avg_career_span\nFROM spans;\n\n/* Answer the following: Which player owns the longest single-career span and what is that span (in years)? */\nWITH spans AS (\n    SELECT\n        playerID,\n        CONCAT(nameFirst, ' ', nameLast) AS full_name,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT full_name, career_span\nFROM spans\nORDER BY career_span DESC\nLIMIT 1;\n\n/* Answer the following: How many players had a single-career span longer than 20 years? */\nWITH spans AS (\n    SELECT\n        playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT COUNT(*) AS players_over_twenty_years\nFROM spans\nWHERE career_span > 20;\n\n/* Answer the following: List the names and spans of the five players with the longest careers who debuted after 1-Jan-2000. */\nWITH spans AS (\n    SELECT\n        playerID,\n        CONCAT(nameFirst, ' ', nameLast) AS full_name,\n        debut,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut >= DATE '2000-01-01'\n      AND finalGame IS NOT NULL\n)\nSELECT full_name, career_span\nFROM spans\nORDER BY career_span DESC\nLIMIT 5;\n\n/* Answer the following: What is the average single-career span for players whose primary position is pitcher ('P')? */\nWITH spans AS (\n    SELECT\n        P.playerID,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(P.finalGame, P.debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(P.finalGame, P.debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(P.finalGame, P.debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People AS P\n    WHERE P.primaryPosition = 'P'\n      AND P.debut      IS NOT NULL\n      AND P.finalGame  IS NOT NULL\n)\nSELECT ROUND(AVG(career_span), 2) AS avg_pitcher_span\nFROM spans;\n\n/* Answer the following: For each debut decade (e.g., 1900s, 1910s), give the average single-career span of the players who debuted in that decade. */\nWITH spans AS (\n    SELECT\n        DATE_PART('year', debut) / 10 * 10 AS debut_decade,\n        (\n            ROUND(ABS(EXTRACT(year  FROM age(finalGame, debut))), 2) +\n            ROUND(ABS(EXTRACT(month FROM age(finalGame, debut))) / 12.0, 2) +\n            ROUND(ABS(EXTRACT(day   FROM age(finalGame, debut))) / 365.0, 2)\n        ) AS career_span\n    FROM People\n    WHERE debut IS NOT NULL\n      AND finalGame IS NOT NULL\n)\nSELECT debut_decade || 's' AS decade,\n       ROUND(AVG(career_span), 2) AS avg_span\nFROM spans\nGROUP BY debut_decade\nORDER BY debut_decade;\n\n/* Answer the following: Could you help me calculate the average single career span value in years for all baseball players? Please precise the result as a float number. First, calculate the difference in years, months, and days between the debut and final game dates. For each player, the career span is computed as the sum of the absolute number of years, plus the absolute number of months divided by 12, plus the absolute number of days divided by 365. Round each part to two decimal places before summing. Finally, average the career spans and round the result to a float number.",
            "n_examples": 6,
            "db_id": "Baseball"
        },
        {
            "question": "I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "evidence": "",
            "raw_question": "I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many players have hit at least 50 home runs in a single season? at least 50 home runs refers to HR >= 50 */\nSELECT COUNT(DISTINCT playerID)\nFROM Batting\nWHERE HR >= 50;\n\n/* Answer the following: What is the average height and weight of pitchers born in Texas? pitchers refers to those listed in Pitching; born in Texas refers to birthState = 'TX' */\nSELECT AVG(People.height)  AS avg_height,\n       AVG(People.weight)  AS avg_weight\nFROM People\nINNER JOIN Pitching ON People.playerID = Pitching.playerID\nWHERE People.birthState = 'TX';\n\n/* Answer the following: List the last names of players who have won the Most Valuable Player award more than once. Most Valuable Player award refers to awardID = 'MVP'; more than once refers to COUNT(*) > 1 */\nSELECT DISTINCT People.nameLast\nFROM People\nINNER JOIN AwardsPlayers ON People.playerID = AwardsPlayers.playerID\nWHERE AwardsPlayers.awardID = 'MVP'\nGROUP BY People.playerID\nHAVING COUNT(*) > 1;\n\n/* Answer the following: Which team had the highest average attendance in the 2019 season? highest average attendance refers to MAX(attendance); 2019 season refers to yearID = 2019 */\nSELECT teamID\nFROM Teams\nWHERE yearID = 2019\nORDER BY attendance DESC\nLIMIT 1;\n\n/* Answer the following: Find the player with the highest batting average (H divided by AB) in the 1980s, provided the player logged at least 2000 at-bats during that decade. 1980s refers to yearID BETWEEN 1980 AND 1989; at least 2000 at-bats refers to SUM(AB) >= 2000 */\nSELECT People.nameFirst,\n       People.nameLast\nFROM People\nINNER JOIN (\n        SELECT playerID,\n               SUM(H)   AS total_hits,\n               SUM(AB)  AS total_ab,\n               CAST(SUM(H) AS FLOAT) / SUM(AB) AS batting_avg\n        FROM Batting\n        WHERE yearID BETWEEN 1980 AND 1989\n        GROUP BY playerID\n        HAVING SUM(AB) >= 2000\n) AS Decade ON People.playerID = Decade.playerID\nORDER BY Decade.batting_avg DESC\nLIMIT 1;\n\n/* Answer the following: What was the total payroll of the New York Yankees in 2022? New York Yankees refers to teamID = 'NYY'; total payroll refers to SUM(salary) */\nSELECT SUM(salary) AS total_payroll\nFROM Salaries\nWHERE teamID = 'NYY'\n  AND yearID = 2022;\n\n/* Answer the following: I would like to know the given names of baseball players who have achieved the highest value of games played, runs, hits, and home runs, with their corresponding score values.",
            "n_examples": 6,
            "db_id": "Baseball"
        },
        {
            "question": "What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "evidence": "",
            "raw_question": "What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many routes depart from the city of Abakan? */\nSELECT COUNT(*) \nFROM route AS R\nJOIN city  AS C\n     ON R.dep_city_id = C.id\nWHERE C.name = 'Abakan';\n\n/* Answer the following: How many different destination cities can be reached directly from Abakan? */\nSELECT COUNT(DISTINCT C2.name)\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE C1.name = 'Abakan';\n\n/* Answer the following: What is the average distance of all routes that start in Abakan (in kilometers)? */\nSELECT AVG(R.distance)\nFROM route AS R\nJOIN city AS C ON R.dep_city_id = C.id\nWHERE C.name = 'Abakan';\n\n/* Answer the following: List the names and distances of the three longest routes whose point of departure is Abakan. */\nSELECT C2.name,\n       R.distance\nFROM route AS R\nJOIN city AS C1 ON R.dep_city_id = C1.id\nJOIN city AS C2 ON R.dest_city_id = C2.id\nWHERE C1.name = 'Abakan'\nORDER BY R.distance DESC\nLIMIT 3;\n\n/* Answer the following: What is the minimum distance of any route in the entire network? */\nSELECT MIN(distance)\nFROM route;\n\n/* Answer the following: Which pair of cities is connected by the longest single route, and what is its distance? */\nSELECT C1.name  AS departure_city,\n       C2.name  AS destination_city,\n       R.distance\nFROM route AS R\nJOIN city  AS C1 ON R.dep_city_id  = C1.id\nJOIN city  AS C2 ON R.dest_city_id = C2.id\nORDER BY R.distance DESC\nLIMIT 1;\n\n/* Answer the following: What is the distance of the longest route where Abakan is either the departure or destination city (in kilometers)?",
            "n_examples": 6,
            "db_id": "Airlines"
        },
        {
            "question": "Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "evidence": "",
            "raw_question": "Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the average distance (in kilometres) of every route that operates between the cities 'New York' and 'Los Angeles'?  Treat the two directions as the same city-pair. */\nSELECT AVG(distance_km)\nFROM routes\nWHERE (source_city = 'New York'  AND dest_city = 'Los Angeles')\n   OR (source_city = 'Los Angeles' AND dest_city = 'New York');\n\n/* Answer the following: List the five city-pairs that have the greatest average distance of all their routes.  Show the two city names and that average distance, ordering from the largest downward. */\nSELECT LEAST(source_city , dest_city)  AS city_a,\n       GREATEST(source_city , dest_city) AS city_b,\n       AVG(distance_km)                 AS avg_dist\nFROM routes\nGROUP BY city_a , city_b\nORDER BY avg_dist DESC\nLIMIT 5;\n\n/* Answer the following: How many unique city-pairs have an average distance that is strictly below 1 000 km? */\nSELECT COUNT(*)\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING AVG(distance_km) < 1000\n     ) AS short_pairs;\n\n/* Answer the following: Among the city-pairs whose average distance exceeds 4 000 km, which pair has the fewest distinct routes?  Return the two city names and that route count. */\nSELECT city_a, city_b, route_cnt\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b,\n               COUNT(*)                         AS route_cnt,\n               AVG(distance_km)                 AS avg_dist\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING avg_dist > 4000\n     ) AS long_pairs\nORDER BY route_cnt ASC\nLIMIT 1;\n\n/* Answer the following: What is the maximum value of the average distance among city-pairs that have at least ten different routes?  (At least ten routes refers to COUNT(*) >= 10.) */\nSELECT MAX(avg_dist)\nFROM (\n        SELECT LEAST(source_city , dest_city)  AS city_a,\n               GREATEST(source_city , dest_city) AS city_b,\n               AVG(distance_km)                 AS avg_dist\n        FROM routes\n        GROUP BY city_a , city_b\n        HAVING COUNT(*) >= 10\n     ) AS rich_pairs;\n\n/* Answer the following: For every 1 000-kilometre bucket (0-999, 1 000-1 999, \u2026, 6 000 km and above), count how many unique city-pairs fall into that bucket when binned by their average distance, and return the bucket that contains the largest number of pairs. */\nWITH pair_avg AS (\n     SELECT LEAST(source_city , dest_city)  AS city_a,\n            GREATEST(source_city , dest_city) AS city_b,\n            AVG(distance_km)                 AS avg_dist\n     FROM routes\n     GROUP BY city_a , city_b\n),\nbinned AS (\n     SELECT CASE\n              WHEN avg_dist < 1000 THEN 0\n              WHEN avg_dist < 2000 THEN 1000\n              WHEN avg_dist < 3000 THEN 2000\n              WHEN avg_dist < 4000 THEN 3000\n              WHEN avg_dist < 5000 THEN 4000\n              WHEN avg_dist < 6000 THEN 5000\n              ELSE 6000\n            END AS distance_bucket\n     FROM pair_avg\n)\nSELECT distance_bucket , COUNT(*) AS pair_count\nFROM binned\nGROUP BY distance_bucket\nORDER BY pair_count DESC\nLIMIT 1;\n\n/* Answer the following: Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?",
            "n_examples": 6,
            "db_id": "Airlines"
        },
        {
            "question": "Please calculate, separately for motorcycle collisions involving riders who were wearing helmets and those who were not wearing helmets, the percentage of motorcyclist fatalities per collision. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group.",
            "evidence": "",
            "raw_question": "Please calculate, separately for motorcycle collisions involving riders who were wearing helmets and those who were not wearing helmets, the percentage of motorcyclist fatalities per collision. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many fatal collisions occurred under rainy weather conditions? Rainy weather refers to weather_1 = 'Rain'; fatal collisions refers to collision_severity = 'Fatal'. */\nSELECT COUNT(*) \nFROM collisions \nWHERE weather_1 = 'Rain' \n  AND collision_severity = 'Fatal';\n\n/* Answer the following: List the 3 cities with the highest number of motorcycle-involved collisions. Motorcycle-involved refers to party_type = 'Motorcycle'. */\nSELECT C.city, COUNT(*) AS num_collisions\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE P.party_type = 'Motorcycle'\nGROUP BY C.city\nORDER BY num_collisions DESC\nLIMIT 3;\n\n/* Answer the following: What percentage of all collisions occurred at an intersection? Intersection collisions are those with intersection = 'Y'. */\nSELECT 100.0 * SUM(CASE WHEN intersection = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS pct_at_intersection\nFROM collisions;\n\n/* Answer the following: What is the average age of drivers involved in fatal collisions? Drivers are rows with party_role = 'Driver'; fatal collisions have collision_severity = 'Fatal'. */\nSELECT AVG(P.age) AS avg_driver_age\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE C.collision_severity = 'Fatal'\n  AND P.party_role = 'Driver';\n\n/* Answer the following: For each year, give the number of collisions that involved at least one heavy truck. Heavy truck refers to party_type = 'Truck'. */\nSELECT C.year, COUNT(DISTINCT C.collision_id) AS truck_collisions\nFROM collisions AS C\nJOIN parties     AS P ON C.collision_id = P.collision_id\nWHERE P.party_type = 'Truck'\nGROUP BY C.year\nORDER BY C.year;\n\n/* Answer the following: What is the highest number of victims injured in any single collision that took place on a state highway? A state highway collision is one with state_highway_route IS NOT NULL. */\nSELECT MAX(victims_injured) AS max_injured_on_state_hwy\nFROM collisions\nWHERE state_highway_route IS NOT NULL;\n\n/* Answer the following: Please calculate the fatality rate for motorcycle collisions, separated by helmet usage. Specifically, calculate two percentages: 1) the percentage of motorcyclist fatalities in collisions where parties (drivers or passengers) were wearing helmets, and 2) the percentage of motorcyclist fatalities in collisions where parties were not wearing helmets. For each group, compute this by dividing the total number of motorcyclist fatalities by the total number of collisions involving that group. Use the parties table to determine helmet usage (from party_safety_equipment fields).",
            "n_examples": 6,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "In which year were the two most common causes of traffic accidents different from those in other years?",
            "evidence": "",
            "raw_question": "In which year were the two most common causes of traffic accidents different from those in other years?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What were the three most frequent causes of traffic accidents in 2015? three most frequent refers to ORDER BY accident_count DESC LIMIT 3; */\nSELECT C.cause\nFROM accidents AS A\nJOIN causes AS C ON A.cause_id = C.id\nWHERE A.year = 2015\nGROUP BY C.cause\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: How many accidents were attributed to speeding in the state of Texas during the year 2017? speeding refers to C.cause = 'Speeding'; */\nSELECT COUNT(*)\nFROM accidents AS A\nJOIN causes  AS C ON A.cause_id = C.id\nJOIN cities  AS CI ON A.city_id  = CI.id\nJOIN states  AS S  ON CI.state_id = S.id\nWHERE A.year = 2017\n  AND C.cause = 'Speeding'\n  AND S.name = 'Texas';\n\n/* Answer the following: Which state recorded the highest number of drunk-driving accidents in 2019? drunk-driving refers to C.cause = 'Drunk Driving'; highest number refers to MAX(COUNT(*)); */\nSELECT S.name\nFROM accidents AS A\nJOIN causes  AS C ON A.cause_id = C.id\nJOIN cities  AS CI ON A.city_id  = CI.id\nJOIN states  AS S  ON CI.state_id = S.id\nWHERE A.year = 2019\n  AND C.cause = 'Drunk Driving'\nGROUP BY S.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average number of vehicles involved in accidents that happened during rainy weather? rainy weather refers to weather_condition = 'Rain'; */\nSELECT AVG(A.vehicles_involved)\nFROM accidents AS A\nWHERE A.weather_condition = 'Rain';\n\n/* Answer the following: List all years after 2010 in which the total number of accidents exceeded 5,000. total number of accidents refers to COUNT(*); exceeded 5,000 refers to > 5000; */\nSELECT A.year\nFROM accidents AS A\nWHERE A.year > 2010\nGROUP BY A.year\nHAVING COUNT(*) > 5000\nORDER BY A.year;\n\n/* Answer the following: What is the total number of fatalities caused by distracted driving between 2010 and 2020 inclusive? distracted driving refers to C.cause = 'Distracted Driving'; fatalities refers to SUM(A.deaths); */\nSELECT SUM(A.deaths)\nFROM accidents AS A\nJOIN causes AS C ON A.cause_id = C.id\nWHERE C.cause = 'Distracted Driving'\n  AND A.year BETWEEN 2010 AND 2020;\n\n/* Answer the following: In which year were the two most common causes of traffic accidents different from those in other years?",
            "n_examples": 6,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "evidence": "",
            "raw_question": "For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the total number of traffic accidents recorded in 2021? */\nSELECT total_incidents\nFROM yearly_accident_totals\nWHERE year = 2021;\n\n/* Answer the following: Which primary collision factor accounted for the greatest share of accidents in 2019? greatest share refers to MAX(share_percent) */\nSELECT factor\nFROM annual_factor_share\nWHERE year = 2019\nORDER BY share_percent DESC\nLIMIT 1;\n\n/* Answer the following: What percent of all 2020 accidents were attributed to the speeding violation category? */\nSELECT share_percent\nFROM annual_factor_share\nWHERE year = 2020\n  AND factor = 'Speeding';\n\n/* Answer the following: List the three violation categories that showed the largest increase in share between 2011 and 2021.  largest increase refers to (share_2021 \u2013 share_2011) ordered DESC */\nSELECT a.factor\nFROM annual_factor_share AS a\nJOIN annual_factor_share AS b\n     ON a.factor = b.factor\nWHERE a.year = 2021\n  AND b.year = 2011\nORDER BY (a.share_percent - b.share_percent) DESC\nLIMIT 3;\n\n/* Answer the following: What was the average annual share (in percent) of the DUI category from 2010 through 2021 inclusive? */\nSELECT AVG(share_percent)\nFROM annual_factor_share\nWHERE factor = 'DUI'\n  AND year BETWEEN 2010 AND 2021;\n\n/* Answer the following: During which year did the Right-of-way Violation category record its lowest share of annual accidents? lowest share refers to MIN(share_percent) */\nSELECT year\nFROM annual_factor_share\nWHERE factor = 'Right-of-way Violation'\nORDER BY share_percent ASC\nLIMIT 1;\n\n/* Answer the following: For the primary collision factor violation category that was the most common cause of traffic accidents in 2021, how many percentage points did its share of annual road incidents in 2021 decrease compared to its share in 2011?",
            "n_examples": 6,
            "db_id": "California_Traffic_Collision"
        },
        {
            "question": "For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "evidence": "",
            "raw_question": "For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the average length (in minutes) of NXT title matches in which the title actually changed hands? */\nSELECT AVG(M.match_length) \nFROM matches AS M\nWHERE M.is_title_change = 'Yes';\n\n/* Answer the following: Which wrestler has appeared in the greatest number of NXT title matches?  */\nSELECT W.name\nFROM wrestlers AS W\nJOIN match_wrestlers AS MW ON W.wrestler_id = MW.wrestler_id\nJOIN matches AS M ON M.match_id = MW.match_id\nGROUP BY W.wrestler_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List every NXT title that has never changed hands. */\nSELECT T.name\nFROM titles AS T\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM matches AS M\n    WHERE M.title_id = T.title_id \n      AND M.is_title_change = 'Yes'\n);\n\n/* Answer the following: How many NXT title matches lasted longer than 25 minutes? 25 minutes refers to match_length > 25. */\nSELECT COUNT(*) \nFROM matches \nWHERE match_length > 25;\n\n/* Answer the following: On what earliest date was the \u201cNXT Women\u2019s Championship\u201d defended? */\nSELECT MIN(M.date) \nFROM matches AS M\nJOIN titles  AS T ON T.title_id = M.title_id\nWHERE T.name = 'NXT Women''s Championship';\n\n/* Answer the following: Which pair of wrestlers have faced each other the most times in NXT title matches? (return the two names together once) */\nSELECT CONCAT(W1.name,' vs ',W2.name) AS rivalry\nFROM match_wrestlers AS A\nJOIN match_wrestlers AS B   ON A.match_id = B.match_id AND A.wrestler_id < B.wrestler_id\nJOIN wrestlers       AS W1  ON W1.wrestler_id = A.wrestler_id\nJOIN wrestlers       AS W2  ON W2.wrestler_id = B.wrestler_id\nGROUP BY A.wrestler_id, B.wrestler_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For the NXT title that had the shortest match (excluding titles with \"title change\"), what were the names of the two wrestlers involved?",
            "n_examples": 6,
            "db_id": "WWE"
        },
        {
            "question": "Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "evidence": "",
            "raw_question": "Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which three bowlers have delivered the most maiden overs across all matches? */\nSELECT P.player_name\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nGROUP BY B.player_id\nORDER BY SUM(B.maidens) DESC\nLIMIT 3;\n\n/* Answer the following: What is the greatest number of wickets taken by a single bowler in any one match? */\nSELECT MAX(wickets_taken)\nFROM bowler;\n\n/* Answer the following: List the name of every bowler who has never conceded a no-ball.  */\nSELECT DISTINCT P.player_name\nFROM bowler AS B\nJOIN player  AS P ON P.player_id = B.player_id\nGROUP BY B.player_id\nHAVING SUM(B.no_balls) = 0;\n\n/* Answer the following: How many runs has James Anderson conceded in total? */\nSELECT SUM(B.runs_conceded)\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nWHERE P.player_name = 'James Anderson';\n\n/* Answer the following: Which bowler has the best (lowest) economy rate in the tournament \u201cWorld Cup 2011\u201d?  \n   Economy rate is defined as total runs conceded divided by total overs bowled.                */\nSELECT P.player_name\nFROM bowler      AS B\nJOIN player      AS P ON P.player_id = B.player_id\nJOIN match       AS M ON M.match_id   = B.match_id\nJOIN tournament  AS T ON T.tournament_id = M.tournament_id\nWHERE T.tournament_name = 'World Cup 2011'\nGROUP BY B.player_id\nORDER BY SUM(B.runs_conceded) * 1.0 / SUM(B.overs_bowled) ASC\nLIMIT 1;\n\n/* Answer the following: Give the average number of wides bowled per innings by bowlers from Australia. */\nSELECT AVG(B.wides)\nFROM bowler AS B\nJOIN player AS P ON P.player_id = B.player_id\nJOIN country AS C ON C.country_id = P.country_id\nWHERE C.country_name = 'Australia';\n\n/* Answer the following: Which bowler has the lowest bowling average per wicket taken?",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Which bowler has the lowest bowling average per wicket taken?",
            "evidence": "",
            "raw_question": "Which bowler has the lowest bowling average per wicket taken?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the maximum number of runs scored by any striker in a single match? runs scored refers to SUM(Batsman_Scored) over all balls faced by the striker in that match */\nSELECT MAX(runs_scored) \nFROM (\n    SELECT Striker, Match_id, SUM(Batsman_Scored) AS runs_scored\n    FROM ball_by_ball\n    GROUP BY Striker, Match_id\n) AS T\n\n/* Answer the following: List the top 5 strikers who have the highest aggregate runs across all seasons. aggregate runs refers to SUM(Batsman_Scored) grouped by Striker */\nSELECT Striker \nFROM ball_by_ball\nGROUP BY Striker\nORDER BY SUM(Batsman_Scored) DESC\nLIMIT 5\n\n/* Answer the following: How many matches were won by the team that also won the toss? toss winner equals match winner refers to Toss_winner = Match_winner */\nSELECT COUNT(*) \nFROM match\nWHERE Toss_winner = Match_winner\n\n/* Answer the following: Which stadium has hosted the greatest number of matches? greatest number refers to MAX(COUNT(*)) over Stadium_name */\nSELECT Stadium_name \nFROM match\nGROUP BY Stadium_name\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: How many centuries were scored in the 2015 season? century refers to SUM(Batsman_Scored) >= 100 for a striker within a match; season refers to Season_year = 2015 */\nSELECT COUNT(*) \nFROM (\n    SELECT Match_id, Striker, SUM(Batsman_Scored) AS runs_scored\n    FROM ball_by_ball\n    WHERE Match_id IN (SELECT Match_id FROM match WHERE Season_year = 2015)\n    GROUP BY Match_id, Striker\n    HAVING SUM(Batsman_Scored) >= 100\n) AS Century_Innings\n\n/* Answer the following: What is the average number of boundaries hit per match across all seasons? boundaries refers to Batsman_Scored IN (4, 6) */\nSELECT AVG(boundary_count) \nFROM (\n    SELECT Match_id, COUNT(*) AS boundary_count\n    FROM ball_by_ball\n    WHERE Batsman_Scored IN (4, 6)\n    GROUP BY Match_id\n) AS Boundaries_Per_Match\n\n/* Answer the following: Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "evidence": "",
            "raw_question": "Could you calculate the average of the total runs scored by all strikers who have scored more than 50 runs in any single match?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match. no less than 100 runs refers to runs_scored >= 100; team lost refers to s.team_id <> m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.runs_scored >= 100\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: Which players scored at least 150 runs in a match that their team went on to win? at least 150 runs refers to runs_scored >= 150; team won refers to s.team_id = m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.runs_scored >= 150\n  AND s.team_id = m.winner_team_id;\n\n/* Answer the following: Retrieve the date and venue of every game where some player scored a century but the match ended in a tie. a century refers to runs_scored >= 100; a tie refers to winner_team_id IS NULL */\nSELECT DISTINCT m.date,\n       m.venue\nFROM Match AS m\nJOIN Player_Match_Stats AS s ON m.match_id = s.match_id\nWHERE s.runs_scored >= 100\n  AND m.winner_team_id IS NULL;\n\n/* Answer the following: List the names of players who hit at least 10 sixes in a single match while their side still lost that match. at least 10 sixes refers to sixes >= 10; lost refers to s.team_id <> m.winner_team_id */\nSELECT DISTINCT p.name\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE s.sixes >= 10\n  AND m.winner_team_id IS NOT NULL\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: How many matches did 'Virat Kohli' score more than 75 runs and yet his team did not win? more than 75 runs refers to runs_scored > 75; team did not win refers to s.team_id <> m.winner_team_id */\nSELECT COUNT(DISTINCT s.match_id)\nFROM Player AS p\nJOIN Player_Match_Stats AS s ON p.player_id = s.player_id\nJOIN Match AS m ON m.match_id = s.match_id\nWHERE p.name = 'Virat Kohli'\n  AND s.runs_scored > 75\n  AND s.team_id <> m.winner_team_id;\n\n/* Answer the following: Provide the list of teams that lost a match despite one of their players scoring 120 or more runs. lost refers to t.team_id <> m.winner_team_id; 120 or more runs refers to runs_scored >= 120 */\nSELECT DISTINCT t.name\nFROM Team  AS t\nJOIN Match AS m ON t.team_id IN (m.team1_id, m.team2_id)\nJOIN Player_Match_Stats AS s ON s.match_id = m.match_id\nWHERE s.team_id = t.team_id\n  AND s.runs_scored >= 120\n  AND t.team_id <> m.winner_team_id;\n\n/* Answer the following: Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "evidence": "",
            "raw_question": "Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which bowler has taken the highest number of wickets in season 3? highest number of wickets refers to MAX(SUM(wickets_taken)) */\nSELECT P.player_name\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 3\nGROUP BY P.player_id , P.player_name\nORDER BY SUM(S.wickets_taken) DESC\nLIMIT 1\n\n/* Answer the following: List the top 10 teams that have scored the greatest total runs across all seasons. greatest total runs refers to MAX(SUM(runs_scored)) */\nSELECT T.team_name\nFROM Teams AS T\nINNER JOIN Team_Match_Stats AS S ON T.team_id = S.team_id\nGROUP BY T.team_id , T.team_name\nORDER BY SUM(S.runs_scored) DESC\nLIMIT 10\n\n/* Answer the following: How many matches were played in season 6? */\nSELECT COUNT(*) \nFROM Matches \nWHERE season = 6\n\n/* Answer the following: Which player has the highest strike-rate in games played at the venue \u2018Mumbai\u2019? strike-rate refers to SUM(runs_scored)*100 / SUM(balls_faced) */\nSELECT P.player_name\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.venue = 'Mumbai'\nGROUP BY P.player_id , P.player_name\nHAVING SUM(S.balls_faced) > 0\nORDER BY (SUM(S.runs_scored) * 100.0 / SUM(S.balls_faced)) DESC\nLIMIT 1\n\n/* Answer the following: Show each bowler\u2019s average runs conceded per over in season 2. average runs conceded per over refers to SUM(runs_conceded) / SUM(overs_bowled) */\nSELECT P.player_name ,\n       SUM(S.runs_conceded) * 1.0 / SUM(S.overs_bowled) AS avg_runs_per_over\nFROM Players AS P\nINNER JOIN Player_Match_Stats AS S ON P.player_id = S.player_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 2\nGROUP BY P.player_id , P.player_name\n\n/* Answer the following: Which team won the most matches in season 4? most matches refers to MAX(COUNT(*)) where result = 'Win' */\nSELECT T.team_name\nFROM Teams AS T\nINNER JOIN Team_Match_Stats AS S ON T.team_id = S.team_id\nINNER JOIN Matches AS M ON S.match_id = M.match_id\nWHERE M.season = 4\n  AND S.result = 'Win'\nGROUP BY T.team_id , T.team_name\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "evidence": "",
            "raw_question": "Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For each country, how many distinct players have appeared in at least one match? appeared in at least one match refers to COUNT(DISTINCT player_id) over Player_Match  */\nSELECT C.name,\n       COUNT(DISTINCT P.id) AS player_count\nFROM Countries AS C\nJOIN Players AS P ON P.country_id = C.id\nJOIN Player_Match AS PM ON PM.player_id = P.id\nGROUP BY C.name;\n\n/* Answer the following: Which player has the highest average runs per match in the 2019 season, considering only players who played 5 or more matches? highest average refers to MAX(AVG(runs)); 2019 season refers to Seasons.year = 2019; played 5 or more matches refers to COUNT(match_id) >= 5 */\nSELECT P.name\nFROM Players AS P\nJOIN Player_Match AS PM ON PM.player_id = P.id\nJOIN Matches AS M ON M.id = PM.match_id\nJOIN Seasons AS S ON S.id = M.season_id\nWHERE S.year = 2019\nGROUP BY P.id, P.name\nHAVING COUNT(PM.match_id) >= 5\nORDER BY AVG(PM.runs) DESC\nLIMIT 1;\n\n/* Answer the following: List the 10 matches that produced the highest total runs by all players combined. highest total runs refers to SUM(runs) ORDER BY DESC LIMIT 10 */\nSELECT M.id,\n       SUM(PM.runs) AS total_runs\nFROM Matches AS M\nJOIN Player_Match AS PM ON PM.match_id = M.id\nGROUP BY M.id\nORDER BY total_runs DESC\nLIMIT 10;\n\n/* Answer the following: What is the average number of wickets per match taken by players from Australia across all seasons? wickets per match per player refers to AVG(PM.wickets) grouped by player first, then averaged; Australia refers to Countries.name = 'Australia' */\nSELECT AVG(player_wkts_per_match)\nFROM (\n    SELECT P.id,\n           AVG(PM.wickets) AS player_wkts_per_match\n    FROM Players AS P\n    JOIN Countries AS C ON C.id = P.country_id\n    JOIN Player_Match AS PM ON PM.player_id = P.id\n    WHERE C.name = 'Australia'\n    GROUP BY P.id\n) AS sub;\n\n/* Answer the following: Give every season and the number of matches played in that season, ordered by the season that had the most matches. */\nSELECT S.year,\n       COUNT(M.id) AS matches_played\nFROM Seasons AS S\nJOIN Matches AS M ON M.season_id = S.id\nGROUP BY S.year\nORDER BY matches_played DESC;\n\n/* Answer the following: Which country does the player belong to who bowled the most balls in a single match, and how many balls did he bowl? most balls in a single match refers to MAX(PM.balls) */\nSELECT C.name,\n       PM.balls AS max_balls_in_match\nFROM Players AS P\nJOIN Countries AS C ON C.id = P.country_id\nJOIN Player_Match AS PM ON PM.player_id = P.id\nORDER BY PM.balls DESC\nLIMIT 1;\n\n/* Answer the following: Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "evidence": "",
            "raw_question": "Can you help me find the top 5 countries whose players have the highest average of their individual average runs per match across all seasons? Specifically, for each player, calculate their average runs per match over all matches they played, then compute the average of these player averages for each country, and include these country batting averages in the result.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For every match, who was the bowler that took the most wickets, and on what date was the match played? */\nSELECT M.match_id ,\n       M.match_date ,\n       P.player_name\nFROM matches AS M\nJOIN (\n     /* count wickets for every bowler in every match */\n     SELECT match_id ,\n            bowler_id ,\n            COUNT(*) AS wkts\n     FROM ball_by_ball\n     WHERE wicket_type IS NOT NULL\n     GROUP BY match_id , bowler_id\n) AS W ON W.match_id = M.match_id\nJOIN players AS P ON P.player_id = W.bowler_id\n/* keep only the max-wicket bowler inside each match */\nWHERE (W.match_id , W.wkts) IN (\n     SELECT match_id ,\n            MAX(wkts)\n     FROM (\n          SELECT match_id ,\n                 bowler_id ,\n                 COUNT(*) AS wkts\n          FROM ball_by_ball\n          WHERE wicket_type IS NOT NULL\n          GROUP BY match_id , bowler_id\n     ) AS X\n     GROUP BY match_id\n);\n\n/* Answer the following: What is the average number of runs scored in power-play overs (overs 1-6) per innings across all matches? */\nSELECT AVG(pp_runs) \nFROM (\n     SELECT match_id ,\n            inning_no ,\n            SUM(runs_off_bat + extras) AS pp_runs\n     FROM ball_by_ball\n     WHERE over_id BETWEEN 1 AND 6\n     GROUP BY match_id , inning_no\n) AS P;\n\n/* Answer the following: Which team recorded the highest average runs per innings in the 2015 season? */\nSELECT T.team_name\nFROM teams   AS T\nJOIN (\n     /* average innings total for every batting team in 2015 */\n     SELECT batting_team_id ,\n            AVG(total_runs) AS avg_runs\n     FROM (\n          SELECT B.match_id ,\n                 B.inning_no ,\n                 B.batting_team_id ,\n                 SUM(B.runs_off_bat + B.extras) AS total_runs\n          FROM ball_by_ball AS B\n          JOIN matches AS M ON M.match_id = B.match_id\n          WHERE M.season_year = 2015\n          GROUP BY B.match_id , B.inning_no , B.batting_team_id\n     ) AS Inn\n     GROUP BY batting_team_id\n) AS A ON A.batting_team_id = T.team_id\nORDER BY A.avg_runs DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 batsmen who hit the most sixes during power-play overs. */\nSELECT P.player_name ,\n       COUNT(*) AS sixes\nFROM ball_by_ball AS B\nJOIN players     AS P ON P.player_id = B.batsman_id\nWHERE B.runs_off_bat = 6\n  AND B.over_id BETWEEN 1 AND 6\nGROUP BY P.player_name\nORDER BY sixes DESC\nLIMIT 5;\n\n/* Answer the following: For every season, which bowler had the best (minimum) economy rate, considering only bowlers who bowled at least 20 overs? */\nSELECT S.season_year ,\n       P.player_name\nFROM (\n     /* economy for eligible bowlers */\n     SELECT M.season_year ,\n            B.bowler_id ,\n            SUM(B.runs_off_bat + B.extras) /\n            (COUNT(*) / 6.0)                          AS econ\n     FROM ball_by_ball AS B\n     JOIN matches     AS M ON M.match_id = B.match_id\n     GROUP BY M.season_year , B.bowler_id\n     HAVING COUNT(*) >= 120            /* 120 balls = 20 overs */\n) AS S\nJOIN (\n     /* pick the minimum economy per season */\n     SELECT season_year ,\n            MIN(econ) AS best_econ\n     FROM (\n          SELECT M.season_year ,\n                 B.bowler_id ,\n                 SUM(B.runs_off_bat + B.extras) /\n                 (COUNT(*) / 6.0) AS econ\n          FROM ball_by_ball AS B\n          JOIN matches     AS M ON M.match_id = B.match_id\n          GROUP BY M.season_year , B.bowler_id\n          HAVING COUNT(*) >= 120\n     ) AS E\n     GROUP BY season_year\n) AS B ON B.season_year = S.season_year\n       AND B.best_econ  = S.econ\nJOIN players AS P ON P.player_id = S.bowler_id\nORDER BY S.season_year;\n\n/* Answer the following: Which match had the highest total number of extra runs (both innings combined) and how many extras were there? */\nSELECT M.match_id ,\n       E.total_extras\nFROM (\n     SELECT match_id ,\n            SUM(extras) AS total_extras\n     FROM ball_by_ball\n     GROUP BY match_id\n) AS E\nJOIN matches AS M ON M.match_id = E.match_id\nORDER BY E.total_extras DESC\nLIMIT 1;\n\n/* Answer the following: For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "evidence": "",
            "raw_question": "For each match, considering every innings, please combine runs from both batsman scored and extra runs for each over, then identify the single over with the highest total runs, retrieve the bowler for that over from the ball by ball table, and calculate the average of these highest over totals across all matches, ensuring that all runs and bowler details are accurately reflected.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which bowler conceded the highest number of runs in one single over in any match, and in which match did that over occur? */\nSELECT p.player_name ,\n       x.match_id ,\n       x.runs_in_over\nFROM   (\n          SELECT   d.match_id ,\n                   d.over_no ,\n                   d.bowler_id ,\n                   SUM(d.total_runs) AS runs_in_over\n          FROM     deliveries AS d\n          GROUP BY d.match_id ,\n                   d.over_no ,\n                   d.bowler_id\n          ORDER BY runs_in_over DESC\n          LIMIT    1\n       ) AS x\nJOIN   players AS p ON p.player_id = x.bowler_id;\n\n/* Answer the following: For each season, which batsman hit the most fours?  (a four is recorded when boundary_type = '4') */\nSELECT   m.season ,\n         p.player_name ,\n         MAX(four_cnt) AS total_fours\nFROM     (\n            SELECT   d.batsman_id ,\n                     m.season ,\n                     COUNT(*) AS four_cnt\n            FROM     deliveries AS d\n            JOIN     matches    AS m ON m.match_id = d.match_id\n            WHERE    d.boundary_type = '4'\n            GROUP BY d.batsman_id ,\n                     m.season\n         ) AS t\nJOIN     players AS p ON p.player_id = t.batsman_id\nGROUP BY m.season\nORDER BY m.season;\n\n/* Answer the following: List the five overs that produced the most total runs across all matches.  Show match id, innings, over number and total runs in that over. */\nSELECT d.match_id ,\n       d.innings_no ,\n       d.over_no ,\n       SUM(d.total_runs) AS runs_in_over\nFROM   deliveries AS d\nGROUP BY d.match_id ,\n         d.innings_no ,\n         d.over_no\nORDER BY runs_in_over DESC\nLIMIT 5;\n\n/* Answer the following: For every match, how many maiden overs (overs that gave away 0 runs) were bowled? */\nSELECT  d.match_id ,\n        COUNT(*) AS maiden_overs\nFROM    (\n          SELECT   match_id ,\n                   innings_no ,\n                   over_no ,\n                   SUM(total_runs) AS runs_in_over\n          FROM     deliveries\n          GROUP BY match_id ,\n                   innings_no ,\n                   over_no\n        ) AS d\nWHERE   d.runs_in_over = 0\nGROUP BY d.match_id\nORDER BY d.match_id;\n\n/* Answer the following: Which team has the highest average runs scored per over across all matches it has played? */\nSELECT   t.team_name ,\n         AVG(over_runs) AS avg_runs_per_over\nFROM     (\n            SELECT   m.team1_id  AS batting_team ,\n                     d.match_id ,\n                     d.innings_no ,\n                     d.over_no ,\n                     SUM(d.total_runs) AS over_runs\n            FROM     deliveries AS d\n            JOIN     matches    AS m ON m.match_id = d.match_id\n            GROUP BY d.match_id ,\n                     d.innings_no ,\n                     d.over_no\n         ) AS o\nJOIN     teams AS t ON t.team_id = o.batting_team\nGROUP BY t.team_id\nORDER BY avg_runs_per_over DESC\nLIMIT 1;\n\n/* Answer the following: Name the top three bowlers with the best economy rate (fewest runs conceded per over) among those who have bowled at least 20 overs. */\nWITH bowler_stats AS (\n     SELECT   bowler_id ,\n              COUNT(DISTINCT CONCAT(match_id,'-',innings_no,'-',over_no))          AS overs_bowled ,\n              SUM(total_runs)                                                     AS runs_conceded ,\n              SUM(total_runs)*1.0 / COUNT(DISTINCT CONCAT(match_id,'-',innings_no,'-',over_no)) AS econ\n     FROM     deliveries\n     GROUP BY bowler_id\n     HAVING   overs_bowled >= 20\n)\nSELECT  p.player_name ,\n        b.econ\nFROM    bowler_stats AS b\nJOIN    players       AS p ON p.player_id = b.bowler_id\nORDER BY b.econ\nLIMIT 3;\n\n/* Answer the following: Please help me identify the top 3 bowlers who, in the overs where the maximum runs were conceded in each match, gave up the highest number of runs in a single over across all matches. For each of these bowlers, provide the match in which they conceded these maximum runs. Only consider overs that had the most runs conceded within their respective matches, and among these, determine which bowlers conceded the most runs in a single over overall.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "evidence": "",
            "raw_question": "Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many orders were placed in 2018? */\nSELECT COUNT(*) \nFROM orders\nWHERE strftime('%Y', order_date) = '2018';\n\n/* Answer the following: What is the total sales amount for each product category in 2017? */\nSELECT c.name AS category,\n       SUM(oi.quantity * oi.unit_price) AS total_sales\nFROM orders AS o\nJOIN order_items AS oi ON o.id = oi.order_id\nJOIN products AS p      ON p.id = oi.product_id\nJOIN categories AS c    ON c.id = p.category\nWHERE strftime('%Y', o.order_date) = '2017'\nGROUP BY c.name\nORDER BY total_sales DESC;\n\n/* Answer the following: List the five customers who spent the most in 2016. */\nSELECT c.first_name || ' ' || c.last_name AS customer,\n       SUM(o.total_amount) AS total_spent\nFROM customers AS c\nJOIN orders    AS o ON o.customer_id = c.id\nWHERE strftime('%Y', o.order_date) = '2016'\nGROUP BY c.id\nORDER BY total_spent DESC\nLIMIT 5;\n\n/* Answer the following: What was the average delivery time (in days) for each month of 2018? */\nSELECT strftime('%m', o.order_date) AS month,\n       AVG(julianday(o.delivered_date) - julianday(o.order_date)) AS avg_delivery_days\nFROM orders AS o\nWHERE strftime('%Y', o.order_date) = '2018'\n  AND o.delivered_date IS NOT NULL\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Which product has the highest number of returned orders? */\nSELECT p.name\nFROM products AS p\nJOIN order_items AS oi ON oi.product_id = p.id\nJOIN orders      AS o  ON o.id = oi.order_id\nWHERE o.status = 'returned'\nGROUP BY p.id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which supplier shipped the largest number of products in 2017? */\nSELECT s.name,\n       SUM(oi.quantity) AS total_units_shipped\nFROM suppliers  AS s\nJOIN products   AS p  ON p.supplier_id = s.id\nJOIN order_items AS oi ON oi.product_id = p.id\nJOIN orders      AS o  ON o.id = oi.order_id\nWHERE strftime('%Y', o.order_date) = '2017'\nGROUP BY s.id\nORDER BY total_units_shipped DESC\nLIMIT 1;\n\n/* Answer the following: Could you generate a report that shows the number of delivered orders for each month in the years 2016, 2017, and 2018? Each column represents a year, and each row represents a month",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "evidence": "",
            "raw_question": "What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many customers have placed more than 5 orders overall? */\nSELECT COUNT(*) \nFROM (\n    SELECT C.customer_unique_id\n    FROM customers AS C\n    JOIN orders AS O ON O.customer_id = C.customer_id\n    GROUP BY C.customer_unique_id\n    HAVING COUNT(O.order_id) > 5\n);\n\n/* Answer the following: Which product category has the highest average item price among products weighing less than 1000 grams? */\nSELECT P.product_category_name\nFROM products AS P\nJOIN order_items AS OI ON OI.product_id = P.product_id\nWHERE P.product_weight_g < 1000\nGROUP BY P.product_category_name\nORDER BY AVG(OI.price) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average review score for orders that were purchased in 2017? */\nSELECT AVG(R.review_score)\nFROM orders AS O\nJOIN order_reviews AS R ON R.order_id = O.order_id\nWHERE strftime('%Y', O.order_purchase_timestamp) = '2017';\n\n/* Answer the following: List the top 10 sellers who have collected the highest total freight value. */\nSELECT S.seller_id\nFROM sellers AS S\nJOIN order_items AS OI ON OI.seller_id = S.seller_id\nGROUP BY S.seller_id\nORDER BY SUM(OI.freight_value) DESC\nLIMIT 10;\n\n/* Answer the following: How many orders were delivered after their estimated delivery date? */\nSELECT COUNT(*)\nFROM orders\nWHERE order_delivered_customer_date IS NOT NULL\n  AND order_estimated_delivery_date IS NOT NULL\n  AND order_delivered_customer_date > order_estimated_delivery_date;\n\n/* Answer the following: What is the most frequently used payment type by customers from the state 'SP'? */\nSELECT OP.payment_type\nFROM customers AS C\nJOIN orders AS O  ON O.customer_id = C.customer_id\nJOIN order_payments AS OP ON OP.order_id = O.order_id\nWHERE C.customer_state = 'SP'\nGROUP BY OP.payment_type\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "evidence": "",
            "raw_question": "Please identify the top three customers, based on their customer_unique_id, who have the highest number of delivered orders, and provide the average payment value, city, and state for each of these customers.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which five customers have spent the least in total on delivered orders, and what is the average of those five customers\u2019 total payments together with the average number of their delivered orders? */\nSELECT\n        AVG(total_spent)  AS avg_of_least_spent,\n        AVG(order_cnt)    AS avg_of_order_cnt\nFROM   (\n        SELECT  customer_id,\n                SUM(payment_amount) AS total_spent,\n                COUNT(*)            AS order_cnt\n        FROM    orders\n        WHERE   status = 'Delivered'\n        GROUP BY customer_id\n        ORDER BY total_spent ASC\n        LIMIT   5\n) least_five;\n\n\n/* Answer the following: What is the total payment amount made with a credit card for delivered orders in the year 2023? 2023 refers to order_date between '2023-01-01' and '2023-12-31'. */\nSELECT SUM(payment_amount)\nFROM   orders\nWHERE  status = 'Delivered'\n  AND  payment_method = 'Credit Card'\n  AND  order_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n\n/* Answer the following: List the three cities that received the highest number of orders (of any status). Show only the city names. */\nSELECT c.city_name\nFROM   cities AS c\nJOIN   orders AS o ON o.city_id = c.city_id\nGROUP  BY c.city_id\nORDER  BY COUNT(*) DESC\nLIMIT  3;\n\n\n/* Answer the following: How many customers have placed at least ten delivered orders in total? at least ten refers to HAVING COUNT(*) >= 10. */\nSELECT COUNT(*)\nFROM  (\n       SELECT customer_id\n       FROM   orders\n       WHERE  status = 'Delivered'\n       GROUP  BY customer_id\n       HAVING COUNT(*) >= 10\n) AS freq_customers;\n\n\n/* Answer the following: Which month in 2022 had the smallest total payment amount for delivered orders? Return the month number. */\nSELECT strftime('%m', order_date) AS month\nFROM   orders\nWHERE  status = 'Delivered'\n  AND  order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP  BY month\nORDER  BY SUM(payment_amount) ASC\nLIMIT  1;\n\n\n/* Answer the following: What percentage of all orders were returned? Returned refers to status = 'Returned'. */\nSELECT \n       100.0 * SUM(CASE WHEN status = 'Returned' THEN 1 ELSE 0 END) / COUNT(*) \n       AS return_percentage\nFROM   orders;\n\n\n/* Answer the following: Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "evidence": "",
            "raw_question": "Among all cities with delivered orders, find the five cities whose summed payments are the lowest, then calculate the average of their total payments and the average of their total delivered order counts.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which month recorded the highest delivered-orders volume in the year that had the highest annual delivered-orders volume among 2015, 2016 and 2017? the year that had the highest annual delivered-orders volume refers to MAX(volume) in annual_delivered_orders */\nSELECT MAX(volume)\nFROM monthly_delivered_orders\nWHERE year = (\n    SELECT year\n    FROM annual_delivered_orders\n    WHERE year IN (2015, 2016, 2017)\n    ORDER BY volume DESC\n    LIMIT 1\n);\n\n/* Answer the following: What is the lowest monthly delivered-orders volume in 2018? lowest monthly refers to MIN(volume) */\nSELECT MIN(volume)\nFROM monthly_delivered_orders\nWHERE year = 2018;\n\n/* Answer the following: Find the average monthly delivered-orders volume for 2017. average monthly refers to AVG(volume) */\nSELECT AVG(volume)\nFROM monthly_delivered_orders\nWHERE year = 2017;\n\n/* Answer the following: How many months in 2016 saw delivered-orders volume greater than 40,000? */\nSELECT COUNT(*)\nFROM monthly_delivered_orders\nWHERE year = 2016\n  AND volume > 40000;\n\n/* Answer the following: In 2018, which month had the second-highest delivered-orders volume? second-highest refers to the value after ordering by volume DESC and skipping the first row */\nSELECT month\nFROM monthly_delivered_orders\nWHERE year = 2018\nORDER BY volume DESC\nLIMIT 1 OFFSET 1;\n\n/* Answer the following: Between 2016 and 2018, which year experienced the highest average monthly delivered-orders volume? highest average monthly refers to MAX(AVG(volume)) across years */\nSELECT year\nFROM monthly_delivered_orders\nWHERE year IN (2016, 2017, 2018)\nGROUP BY year\nORDER BY AVG(volume) DESC\nLIMIT 1;\n\n/* Answer the following: What is the highest monthly delivered orders volume in the year with the lowest annual delivered orders volume among 2016, 2017, and 2018?",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me find the sellers respectively with the highest number of distinct customers, highest profit, highest number of distinct orders, and most 5-star ratings, in delivered orders, along with their corresponding values? ",
            "evidence": "",
            "raw_question": "Could you help me find the sellers respectively with the highest number of distinct customers, highest profit, highest number of distinct orders, and most 5-star ratings, in delivered orders, along with their corresponding values? ",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which product category has the highest average item price among orders that were delivered? delivered refers to order_status = 'delivered'. */\nSELECT P.product_category_name\nFROM products AS P\nJOIN order_items AS OI ON P.product_id = OI.product_id\nJOIN orders AS O ON O.order_id = OI.order_id\nWHERE O.order_status = 'delivered'\nGROUP BY P.product_category_name\nORDER BY AVG(OI.price) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers have placed more than 3 orders? more than 3 orders refers to COUNT(order_id) > 3. */\nSELECT COUNT(DISTINCT customer_id)\nFROM (\n    SELECT customer_id\n    FROM orders\n    GROUP BY customer_id\n    HAVING COUNT(order_id) > 3\n) AS frequent_buyers;\n\n/* Answer the following: Which seller has received the highest total freight value from delivered orders? delivered refers to order_status = 'delivered'. */\nSELECT OI.seller_id\nFROM order_items AS OI\nJOIN orders AS O ON O.order_id = OI.order_id\nWHERE O.order_status = 'delivered'\nGROUP BY OI.seller_id\nORDER BY SUM(OI.freight_value) DESC\nLIMIT 1;\n\n/* Answer the following: During which month (format YYYY-MM) were the most orders canceled? canceled refers to order_status = 'canceled'. */\nSELECT strftime('%Y-%m', order_purchase_timestamp) AS month,\n       COUNT(*) AS canceled_orders\nFROM orders\nWHERE order_status = 'canceled'\nGROUP BY month\nORDER BY canceled_orders DESC\nLIMIT 1;\n\n/* Answer the following: What is the average review score of orders paid with a credit card? credit card refers to payment_type = 'credit_card'. */\nSELECT AVG(R.review_score)\nFROM order_reviews AS R\nJOIN orders AS O ON O.order_id = R.order_id\nJOIN order_payments AS P ON P.order_id = O.order_id\nWHERE P.payment_type = 'credit_card';\n\n/* Answer the following: Which Brazilian state has the largest number of sellers? */\nSELECT seller_state\nFROM sellers\nGROUP BY seller_state\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Could you help me find the sellers who excel in the following categories, considering only delivered orders: the seller with the highest number of distinct customer unique IDs, the seller with the highest profit (calculated as price minus freight value), the seller with the highest number of distinct orders, and the seller with the most 5-star ratings? For each category, please provide the seller ID and the corresponding value, labeling each row with a description of the achievement.",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "evidence": "",
            "raw_question": "Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the average price of the most expensive product in each product category? most expensive product refers to MAX(price) in every category */\nSELECT AVG(MaxPrice) \nFROM (\n    SELECT MAX(price) AS MaxPrice\n    FROM products\n    GROUP BY category_id\n) AS sub;\n\n/* Answer the following: For every year, how many payments were processed by the payment method that handled the greatest number of payments in that same year? greatest number of payments refers to MAX(cnt) per year */\nSELECT order_year , SUM(top_cnt) AS total_payments\nFROM (\n    SELECT order_year ,\n           MAX(cnt) AS top_cnt\n    FROM (\n        SELECT strftime('%Y', payment_date) AS order_year ,\n               payment_method ,\n               COUNT(*) AS cnt\n        FROM payments\n        GROUP BY order_year , payment_method\n    ) AS yearly\n    GROUP BY order_year\n) AS top_per_year\nGROUP BY order_year;\n\n/* Answer the following: Give the supplier id that provides the largest number of products in each product category. largest number of products refers to MAX(product_cnt) in every category */\nSELECT category_id , supplier_id\nFROM (\n    SELECT category_id ,\n           supplier_id ,\n           COUNT(*) AS product_cnt ,\n           RANK() OVER (PARTITION BY category_id ORDER BY COUNT(*) DESC) AS rk\n    FROM products\n    JOIN product_suppliers USING (product_id)\n    GROUP BY category_id , supplier_id\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: What is the average quantity sold of the best-selling product (highest total quantity) in each product category? highest total quantity refers to MAX(total_qty) in a category */\nSELECT AVG(best_qty)\nFROM (\n    SELECT MAX(total_qty) AS best_qty\n    FROM (\n        SELECT category_id ,\n               product_id ,\n               SUM(quantity) AS total_qty\n        FROM orders\n        JOIN products USING (product_id)\n        GROUP BY category_id , product_id\n    ) AS cat_prod\n    GROUP BY category_id\n) AS best_per_cat;\n\n/* Answer the following: Which employee has the longest tenure in every department? longest tenure refers to earliest hire_date */\nSELECT department_id , employee_name\nFROM (\n    SELECT department_id ,\n           employee_name ,\n           hire_date ,\n           RANK() OVER (PARTITION BY department_id ORDER BY hire_date) AS rk\n    FROM employees\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: For each customer, how much did they spend in their favourite category, where favourite category is the one on which the customer spent the most money?  */\nSELECT customer_id ,\n       category_spend AS favourite_category_spend\nFROM (\n    SELECT customer_id ,\n           category_id ,\n           SUM(amount) AS category_spend ,\n           RANK() OVER (PARTITION BY customer_id ORDER BY SUM(amount) DESC) AS rk\n    FROM orders\n    JOIN payments  USING (order_id)\n    JOIN products  USING (product_id)\n    GROUP BY customer_id , category_id\n) AS ranked\nWHERE rk = 1;\n\n/* Answer the following: Could you help me calculate the average of the total number of payments made using the most preferred payment method for each product category, where the most preferred payment method in a category is the one with the highest number of payments?",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "evidence": "",
            "raw_question": "Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many different cities are present in the olist_geolocation table? different cities refers to COUNT(DISTINCT geolocation_city) */\nSELECT COUNT(DISTINCT geolocation_city) AS num_cities\nFROM olist_geolocation;\n\n/* Answer the following: Which state has the highest number of geolocation rows in the dataset? highest number refers to MAX(record_count) */\nSELECT geolocation_state\nFROM olist_geolocation\nGROUP BY geolocation_state\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: In the state 'SP', which city is located furthest north? furthest north refers to MAX(geolocation_lat); 'SP' refers to geolocation_state = 'SP' */\nSELECT geolocation_city\nFROM olist_geolocation\nWHERE geolocation_state = 'SP'\nORDER BY geolocation_lat DESC\nLIMIT 1;\n\n/* Answer the following: What is the average longitude of all geolocations whose zip code prefix is between 1000 and 1999? between 1000 and 1999 refers to geolocation_zip_code_prefix BETWEEN 1000 AND 1999 */\nSELECT AVG(geolocation_lng) AS avg_longitude\nFROM olist_geolocation\nWHERE geolocation_zip_code_prefix BETWEEN 1000 AND 1999;\n\n/* Answer the following: List the first 10 distinct zip code prefixes that occur in state 'MG' in ascending order. state 'MG' refers to geolocation_state = 'MG' */\nSELECT DISTINCT geolocation_zip_code_prefix\nFROM olist_geolocation\nWHERE geolocation_state = 'MG'\nORDER BY geolocation_zip_code_prefix\nLIMIT 10;\n\n/* Answer the following: What is the difference between the maximum and minimum latitude recorded in the table? difference refers to MAX(geolocation_lat) - MIN(geolocation_lat) */\nSELECT MAX(geolocation_lat) - MIN(geolocation_lat) AS latitude_range\nFROM olist_geolocation;\n\n/* Answer the following: In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "evidence": "",
            "raw_question": "In the \u201colist_geolocation\u201d table, please identify which two consecutive cities, when sorted by geolocation_state, geolocation_city, geolocation_zip_code_prefix, geolocation_lat, and geolocation_lng, have the greatest distance between them based on the difference in distance computed between each city and its immediate predecessor in that ordering.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which customer has placed the highest number of orders that were paid using the 'Credit Card' payment type? */\nSELECT o.customer_id\nFROM orders AS o\nJOIN payments AS p ON p.order_id = o.order_id\nWHERE p.payment_type = 'Credit Card'\nGROUP BY o.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1\n\n/* Answer the following: What is the total revenue generated from products in the 'Home Appliances' category during the first quarter of 2023? */\nSELECT SUM(oi.quantity * oi.unit_price) AS total_revenue\nFROM order_items AS oi\nJOIN products      AS pr ON pr.product_id   = oi.product_id\nJOIN categories    AS c  ON c.category_id   = pr.category_id\nJOIN orders        AS o  ON o.order_id      = oi.order_id\nWHERE c.category_name = 'Home Appliances'\n  AND o.order_date BETWEEN '2023-01-01' AND '2023-03-31'\n\n/* Answer the following: List the top three payment types ranked by number of transactions. */\nSELECT p.payment_type , COUNT(*) AS num_payments\nFROM payments AS p\nGROUP BY p.payment_type\nORDER BY num_payments DESC\nLIMIT 3\n\n/* Answer the following: Give the names of three products that have never appeared in any order. */\nSELECT pr.name\nFROM products AS pr\nLEFT JOIN order_items AS oi ON oi.product_id = pr.product_id\nWHERE oi.product_id IS NULL\nLIMIT 3\n\n/* Answer the following: For every product category, what is the average list price of the products that belong to it? */\nSELECT c.category_name , AVG(pr.price) AS avg_product_price\nFROM categories AS c\nJOIN products  AS pr ON pr.category_id = c.category_id\nGROUP BY c.category_name\n\n/* Answer the following: Which month of the year 2022 recorded the highest total number of payments, and how many payments were made then? */\nSELECT strftime('%Y-%m', p.payment_date) AS month , COUNT(*) AS payment_count\nFROM payments AS p\nWHERE p.payment_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY month\nORDER BY payment_count DESC\nLIMIT 1\n\n/* Answer the following: Identify the top three product categories whose most commonly used payment type has the highest number of payments across all categories, and specify the number of payments made in each category using that payment type.",
            "n_examples": 6,
            "db_id": "Brazilian_E_Commerce"
        },
        {
            "question": "Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "evidence": "",
            "raw_question": "Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the title of the longest French-language film that belongs to the \u201cDocumentary\u201d category? */\nSELECT f.title\nFROM film AS f\nJOIN film_category AS fc ON f.film_id = fc.film_id\nJOIN category AS c ON c.category_id = fc.category_id\nJOIN language AS l ON l.language_id = f.language_id\nWHERE c.name = 'Documentary' AND l.name = 'French'\nORDER BY f.length DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct actors have appeared in films rated \u201cR\u201d that were released before 2005? */\nSELECT COUNT(DISTINCT fa.actor_id)\nFROM film_actor AS fa\nJOIN film AS f ON f.film_id = fa.film_id\nWHERE f.rating = 'R' AND f.release_year < 2005;\n\n/* Answer the following: What is the average running time of all \u201cAnimation\u201d films released in 2006? */\nSELECT AVG(f.length)\nFROM film AS f\nJOIN film_category AS fc ON f.film_id = fc.film_id\nJOIN category AS c ON c.category_id = fc.category_id\nWHERE c.name = 'Animation' AND f.release_year = 2006;\n\n/* Answer the following: List the three categories that contain the largest number of films (show category names only). */\nSELECT c.name\nFROM category AS c\nJOIN film_category AS fc ON c.category_id = fc.category_id\nGROUP BY c.category_id, c.name\nORDER BY COUNT(fc.film_id) DESC\nLIMIT 3;\n\n/* Answer the following: Which language has the smallest number of films that are rated \u201cPG-13\u201d? */\nSELECT l.name\nFROM language AS l\nJOIN film AS f ON l.language_id = f.language_id\nWHERE f.rating = 'PG-13'\nGROUP BY l.language_id, l.name\nORDER BY COUNT(f.film_id) ASC\nLIMIT 1;\n\n/* Answer the following: Give the full name of the actor who appeared in the greatest number of films released in 2006. */\nSELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name\nFROM actor AS a\nJOIN film_actor AS fa ON a.actor_id = fa.actor_id\nJOIN film AS f ON f.film_id = fa.film_id\nWHERE f.release_year = 2006\nGROUP BY a.actor_id\nORDER BY COUNT(fa.film_id) DESC\nLIMIT 1;\n\n/* Answer the following: Could you help me determine which actor starred most frequently in English-language children's category films that were rated either G or PG, had a running time of 120 minutes or less, and were released between 2000 and 2010? Please provide the actor's full name.",
            "n_examples": 6,
            "db_id": "Pagila"
        },
        {
            "question": "Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "evidence": "",
            "raw_question": "Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which film category has the highest number of rentals made by customers that live in cities whose name starts with 'B'?  starts with 'B' refers to ci.city LIKE 'B%' */\nSELECT c.name\nFROM category         AS c\nJOIN film_category    AS fc ON fc.category_id = c.category_id\nJOIN inventory        AS i  ON i.film_id      = fc.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE 'B%'\nGROUP BY c.category_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total rental-hours for the category \u201cDrama\u201d in all cities whose name contains a hyphen?  contains a hyphen refers to ci.city LIKE '%-%' ; rental-hours refers to SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) */\nSELECT SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) AS total_hours\nFROM category         AS c\nJOIN film_category    AS fc ON fc.category_id = c.category_id\nJOIN inventory        AS i  ON i.film_id      = fc.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE c.name = 'Drama'\n  AND ci.city LIKE '%-%';\n\n/* Answer the following: Give the average film length (in minutes) of movies rented by customers living in cities that start with 'A'.  starts with 'A' refers to ci.city LIKE 'A%' */\nSELECT AVG(f.length)\nFROM film             AS f\nJOIN inventory        AS i  ON i.film_id      = f.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE 'A%';\n\n/* Answer the following: Which city that contains a hyphen has the highest total rental-hours?  contains a hyphen refers to ci.city LIKE '%-%' ; highest total rental-hours refers to MAX(SUM hours) */\nSELECT ci.city\nFROM rental           AS r\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE '%-%'\nGROUP BY ci.city_id\nORDER BY SUM(TIMESTAMPDIFF(HOUR , r.rental_date , r.return_date)) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct film categories have at least 100 rentals in cities whose name starts with 'A' or contains a hyphen?  starts with 'A' refers to ci.city LIKE 'A%' ; contains a hyphen refers to ci.city LIKE '%-%' ; at least 100 rentals refers to HAVING COUNT(*) >= 100 */\nSELECT COUNT(*)\nFROM (\n      SELECT c.category_id\n      FROM category         AS c\n      JOIN film_category    AS fc ON fc.category_id = c.category_id\n      JOIN inventory        AS i  ON i.film_id      = fc.film_id\n      JOIN rental           AS r  ON r.inventory_id = i.inventory_id\n      JOIN customer         AS cu ON cu.customer_id = r.customer_id\n      JOIN address          AS ad ON ad.address_id  = cu.address_id\n      JOIN city             AS ci ON ci.city_id     = ad.city_id\n      WHERE ci.city LIKE 'A%' OR ci.city LIKE '%-%'\n      GROUP BY c.category_id\n      HAVING COUNT(*) >= 100\n) AS sub;\n\n/* Answer the following: List the five most rented films (titles) in cities whose name contains a hyphen.  contains a hyphen refers to ci.city LIKE '%-%' */\nSELECT f.title\nFROM film             AS f\nJOIN inventory        AS i  ON i.film_id      = f.film_id\nJOIN rental           AS r  ON r.inventory_id = i.inventory_id\nJOIN customer         AS cu ON cu.customer_id = r.customer_id\nJOIN address          AS ad ON ad.address_id  = cu.address_id\nJOIN city             AS ci ON ci.city_id     = ad.city_id\nWHERE ci.city LIKE '%-%'\nGROUP BY f.film_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: Please help me find the film category with the highest total rental hours in cities where the city's name either starts with \"A\" or contains a hyphen. ",
            "n_examples": 6,
            "db_id": "Pagila"
        },
        {
            "question": "In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "evidence": "",
            "raw_question": "In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many trees are recorded in ZIP codes whose mean income is at least 80,000 dollars? */\nSELECT COUNT(*) \nFROM tree_income\nWHERE mean_income >= 80000;\n\n/* Answer the following: Among the five most common tree species in Manhattan, what is the average median income attached to each species? */\nSELECT species_name, AVG(median_income) AS avg_median_income\nFROM tree_income\nWHERE borough = 'Manhattan'\nGROUP BY species_name\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: Which ZIP code in Brooklyn that contains more than 500 recorded trees has the lowest average mean income, and what is that income? */\nSELECT zip_code, AVG(mean_income) AS avg_mean_income\nFROM tree_income\nWHERE borough = 'Brooklyn'\nGROUP BY zip_code\nHAVING COUNT(*) > 500\nORDER BY avg_mean_income ASC\nLIMIT 1;\n\n/* Answer the following: Give the number of distinct ZIP codes in each borough where the median income is above 100,000 dollars. */\nSELECT borough, COUNT(DISTINCT zip_code) AS zip_count\nFROM tree_income\nWHERE median_income > 100000\nGROUP BY borough;\n\n/* Answer the following: What fraction of trees in Queens whose mean income exceeds the median income are rated in \u201cPoor\u201d health? */\nSELECT \n    1.0 * SUM(CASE WHEN health = 'Poor' THEN 1 ELSE 0 END) / COUNT(*) AS poor_health_ratio\nFROM tree_income\nWHERE borough = 'Queens' \n  AND mean_income > median_income;\n\n/* Answer the following: For every borough, identify the most common tree species among records whose median income is between 60,000 and 80,000 dollars and show its count. */\nWITH filtered AS (\n    SELECT borough, species_name, COUNT(*) AS cnt\n    FROM tree_income\n    WHERE median_income BETWEEN 60000 AND 80000\n    GROUP BY borough, species_name\n), ranked AS (\n    SELECT borough, species_name, cnt,\n           ROW_NUMBER() OVER (PARTITION BY borough ORDER BY cnt DESC) AS rn\n    FROM filtered\n)\nSELECT borough, species_name, cnt\nFROM ranked\nWHERE rn = 1;\n\n/* Answer the following: In the combined dataset that unifies the trees data with the income data by ZIP code, filling missing ZIP values where necessary, which three boroughs, restricted to records with median and mean income both greater than zero and a valid borough name, contain the highest number of trees, and what is the average mean income for each of these three boroughs?",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "What percentage of trees in the Bronx have a health status of Good?",
            "evidence": "",
            "raw_question": "What percentage of trees in the Bronx have a health status of Good?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many trees in Staten Island have a status of 'Dead'? */\nSELECT COUNT(*) \nFROM trees \nWHERE boroname = 'Staten Island' \n  AND status = 'Dead';\n\n/* Answer the following: List the three species that have the greatest number of trees city-wide. */\nSELECT spc_common \nFROM trees \nGROUP BY spc_common \nORDER BY COUNT(*) DESC \nLIMIT 3;\n\n/* Answer the following: What is the average diameter (dbh) of Ginkgo trees in Queens? */\nSELECT AVG(dbh) \nFROM trees \nWHERE spc_common = 'Ginkgo' \n  AND boroname = 'Queens';\n\n/* Answer the following: Which borough has the smallest percentage of trees whose health is 'Poor'? */\nSELECT boroname\nFROM trees\nGROUP BY boroname\nORDER BY SUM(CASE WHEN health = 'Poor' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) ASC\nLIMIT 1;\n\n/* Answer the following: What is the total number of distinct tree species recorded in the Bronx? */\nSELECT COUNT(DISTINCT spc_common) \nFROM trees \nWHERE boroname = 'Bronx';\n\n/* Answer the following: Among trees whose diameter is greater than 20 inches, what is the most frequent health status? */\nSELECT health\nFROM trees\nWHERE dbh > 20\nGROUP BY health\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What percentage of trees in the Bronx have a health status of Good?",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "evidence": "",
            "raw_question": "Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many unicorn companies are located in the United States? */\nSELECT COUNT(*) \nFROM unicorn_companies \nWHERE country = 'United States';\n\n/* Answer the following: List the name and valuation of the five highest-valued unicorns in the FinTech industry. highest-valued refers to biggest valuation_usd_billion */\nSELECT name, valuation_usd_billion \nFROM unicorn_companies \nWHERE industry = 'FinTech' \nORDER BY valuation_usd_billion DESC \nLIMIT 5;\n\n/* Answer the following: What is the average valuation (in billion USD) of unicorns that gained unicorn status in 2020? gained unicorn status refers to YEAR(date_joined) = 2020 */\nSELECT AVG(valuation_usd_billion) \nFROM unicorn_companies \nWHERE YEAR(date_joined) = 2020;\n\n/* Answer the following: Which country has produced the largest number of unicorns in the Artificial Intelligence industry? largest number refers to MAX(COUNT(*)) */\nSELECT country \nFROM unicorn_companies \nWHERE industry = 'Artificial Intelligence' \nGROUP BY country \nORDER BY COUNT(*) DESC \nLIMIT 1;\n\n/* Answer the following: How many new unicorn companies emerged each year between 2018 and 2022? emerged refers to YEAR(date_joined) */\nSELECT YEAR(date_joined) AS year, COUNT(*) AS new_unicorns \nFROM unicorn_companies \nWHERE YEAR(date_joined) BETWEEN 2018 AND 2022 \nGROUP BY YEAR(date_joined) \nORDER BY year;\n\n/* Answer the following: What is the minimum valuation of unicorn companies that became unicorns before 2010? became unicorns before 2010 refers to date_joined < '2010-01-01' */\nSELECT MIN(valuation_usd_billion) \nFROM unicorn_companies \nWHERE date_joined < '2010-01-01';\n\n/* Answer the following: Can you help me calculate the average number of new unicorn companies per year in the top industry from 2019 to 2021?",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "evidence": "",
            "raw_question": "Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the percentage growth in total sales (in USD) for Germany from 2019 to 2020 when promo_total_id = 1 and channel_total_id = 1? */\nSELECT \n    ( SUM(CASE WHEN s.year = 2020 THEN s.sales_value / cr.usd_rate END) -\n      SUM(CASE WHEN s.year = 2019 THEN s.sales_value / cr.usd_rate END) ) * 100.0 /\n      SUM(CASE WHEN s.year = 2019 THEN s.sales_value / cr.usd_rate END)  AS pct_growth_19_20\nFROM sales            AS s\nJOIN currency_rate    AS cr\n  ON cr.currency_code = s.currency_code \n AND cr.year          = s.year\nWHERE s.country         = 'Germany'\n  AND s.year IN (2019, 2020)\n  AND s.promo_total_id  = 1\n  AND s.channel_total_id= 1;\n\n\n/* Answer the following: Which months in 2020 did France record higher sales (in USD) than the same months in 2019 under promo_total_id = 1 and channel_total_id = 1? */\nSELECT s20.month\nFROM   sales AS s19\nJOIN   sales AS s20\n       ON s20.country = s19.country\n      AND s20.month   = s19.month\n      AND s19.year    = 2019\n      AND s20.year    = 2020\n      AND s19.promo_total_id = 1 AND s19.channel_total_id = 1\n      AND s20.promo_total_id = 1 AND s20.channel_total_id = 1\nJOIN currency_rate AS c19 ON c19.currency_code = s19.currency_code AND c19.year = 2019\nJOIN currency_rate AS c20 ON c20.currency_code = s20.currency_code AND c20.year = 2020\nWHERE  s20.country = 'France'\n  AND (s20.sales_value / c20.usd_rate) > (s19.sales_value / c19.usd_rate);\n\n\n/* Answer the following: What was the average monthly sales in USD for Spain in 2020 when promo_total_id = 1 and channel_total_id = 1? */\nSELECT \n    AVG(s.sales_value / cr.usd_rate) AS avg_monthly_sales_usd_2020\nFROM sales         AS s\nJOIN currency_rate AS cr\n  ON cr.currency_code = s.currency_code\n AND cr.year          = s.year\nWHERE s.country         = 'Spain'\n  AND s.year            = 2020\n  AND s.promo_total_id  = 1\n  AND s.channel_total_id= 1;\n\n\n/* Answer the following: Which European country had the highest average monthly sales in USD in 2020 for promo_total_id = 1 and channel_total_id = 1? */\nSELECT s.country\nFROM   sales AS s\nJOIN   currency_rate AS cr\n       ON cr.currency_code = s.currency_code AND cr.year = s.year\nWHERE  s.year            = 2020\n  AND  s.promo_total_id  = 1\n  AND  s.channel_total_id= 1\nGROUP BY s.country\nORDER BY AVG(s.sales_value / cr.usd_rate) DESC\nLIMIT 1;\n\n\n/* Answer the following: For Italy, what is the projected total sales in USD for 2021 after applying each month\u2019s 2019\u21922020 growth rate (promo_total_id = 1, channel_total_id = 1)? */\nWITH month_growth AS (\n    SELECT m19.month,\n           (m20.sales_value / c20.usd_rate) / (m19.sales_value / c19.usd_rate) AS growth_rate\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'Italy'\n), projected_2021 AS (\n    SELECT s20.month,\n           (s20.sales_value / c20.usd_rate) * g.growth_rate AS projected_sales_usd\n    FROM   sales AS s20\n    JOIN   currency_rate AS c20\n           ON c20.currency_code = s20.currency_code AND c20.year = 2020\n    JOIN   month_growth  AS g ON g.month = s20.month\n    WHERE  s20.country         = 'Italy'\n      AND  s20.year            = 2020\n      AND  s20.promo_total_id  = 1\n      AND  s20.channel_total_id= 1\n)\nSELECT SUM(projected_sales_usd) AS projected_total_usd_2021\nFROM   projected_2021;\n\n\n/* Answer the following: What is the median of the month-over-month percentage growth rates in USD sales for France from 2019 to 2020 (promo_total_id = 1, channel_total_id = 1)? */\nWITH growth AS (\n    SELECT m19.month,\n           ((m20.sales_value / c20.usd_rate) - (m19.sales_value / c19.usd_rate))\n           / (m19.sales_value / c19.usd_rate) AS pct_growth\n    FROM   sales AS m19\n    JOIN   sales AS m20\n           ON m20.country = m19.country\n          AND m20.month   = m19.month\n          AND m19.year    = 2019\n          AND m20.year    = 2020\n          AND m19.promo_total_id = 1 AND m19.channel_total_id = 1\n          AND m20.promo_total_id = 1 AND m20.channel_total_id = 1\n    JOIN currency_rate AS c19 ON c19.currency_code = m19.currency_code AND c19.year = 2019\n    JOIN currency_rate AS c20 ON c20.currency_code = m20.currency_code AND c20.year = 2020\n    WHERE  m19.country = 'France'\n)\nSELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY pct_growth) AS median_pct_growth\nFROM   growth;\n\n\n/* Answer the following: What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "evidence": "",
            "raw_question": "Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which artist has sold the greatest number of tracks? greatest number of tracks refers to MAX(SUM(InvoiceLine.Quantity)) */\nSELECT ar.Name\nFROM artists AS ar\nJOIN albums AS al ON al.ArtistId = ar.ArtistId\nJOIN tracks AS t ON t.AlbumId = al.AlbumId\nJOIN invoicelines AS il ON il.TrackId = t.TrackId\nGROUP BY ar.ArtistId\nORDER BY SUM(il.Quantity) DESC\nLIMIT 1;\n\n/* Answer the following: List the first and last names of the five customers who have spent the most money, together with the total amount each spent. */\nSELECT c.FirstName,\n       c.LastName,\n       SUM(i.Total) AS TotalSpent\nFROM customers AS c\nJOIN invoices  AS i ON i.CustomerId = c.CustomerId\nGROUP BY c.CustomerId\nORDER BY TotalSpent DESC\nLIMIT 5;\n\n/* Answer the following: How many tracks does each genre contain?  Return the genre name and track count, ordered from most to fewest tracks. */\nSELECT g.Name,\n       COUNT(t.TrackId) AS TrackCount\nFROM genres AS g\nLEFT JOIN tracks AS t ON t.GenreId = g.GenreId\nGROUP BY g.GenreId\nORDER BY TrackCount DESC;\n\n/* Answer the following: Which country accounts for the highest total invoice revenue, and what is that total? */\nSELECT i.BillingCountry,\n       SUM(i.Total) AS CountryRevenue\nFROM invoices AS i\nGROUP BY i.BillingCountry\nORDER BY CountryRevenue DESC\nLIMIT 1;\n\n/* Answer the following: Who is the support representative that handles the largest number of customers?  Return the employee\u2019s first and last names together with the number of customers. */\nSELECT e.FirstName,\n       e.LastName,\n       COUNT(c.CustomerId) AS CustomerCount\nFROM employees AS e\nJOIN customers AS c ON c.SupportRepId = e.EmployeeId\nGROUP BY e.EmployeeId\nORDER BY CustomerCount DESC\nLIMIT 1;\n\n/* Answer the following: What is the average unit price of tracks for each media type? Return media-type name and average price. */\nSELECT mt.Name,\n       ROUND(AVG(t.UnitPrice), 2) AS AvgUnitPrice\nFROM mediatypes AS mt\nJOIN tracks     AS t  ON t.MediaTypeId = mt.MediaTypeId\nGROUP BY mt.MediaTypeId;\n\n/* Answer the following: Could you tell me the first names of customers who spent less than $1 on albums by the best-selling artist, along with the amounts they spent?",
            "n_examples": 6,
            "db_id": "chinook"
        },
        {
            "question": "Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "evidence": "",
            "raw_question": "Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the total revenue generated from tracks in the 'Rock' genre?  \n   Total revenue refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT SUM(IL.UnitPrice * IL.Quantity) AS RockRevenue\nFROM InvoiceLine AS IL\nJOIN Track      AS T  ON IL.TrackId  = T.TrackId\nJOIN Genre      AS G  ON T.GenreId   = G.GenreId\nWHERE G.Name = 'Rock';\n\n/* Answer the following: List the top 5 tracks by total sales amount, showing each track's name and its total sales, ordered from highest to lowest.  \n   Total sales refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT T.Name,\n       SUM(IL.UnitPrice * IL.Quantity) AS TotalSales\nFROM Track       AS T\nJOIN InvoiceLine AS IL ON T.TrackId = IL.TrackId\nGROUP BY T.TrackId, T.Name\nORDER BY TotalSales DESC\nLIMIT 5;\n\n/* Answer the following: Which customer has purchased the highest number of distinct albums?  \n   Return the customer's full name and the number of distinct albums purchased. */\nSELECT C.FirstName || ' ' || C.LastName AS CustomerName,\n       COUNT(DISTINCT A.AlbumId)        AS AlbumsBought\nFROM Customer    AS C\nJOIN Invoice     AS I  ON C.CustomerId  = I.CustomerId\nJOIN InvoiceLine AS IL ON I.InvoiceId   = IL.InvoiceId\nJOIN Track       AS T  ON IL.TrackId    = T.TrackId\nJOIN Album       AS A  ON T.AlbumId     = A.AlbumId\nGROUP BY C.CustomerId\nORDER BY AlbumsBought DESC, CustomerName\nLIMIT 1;\n\n/* Answer the following: For each artist, compute the total revenue generated by all of their albums and list the top 3 artists with the highest revenue.  \n   Total revenue refers to SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity). */\nSELECT AR.Name AS Artist,\n       SUM(IL.UnitPrice * IL.Quantity) AS Revenue\nFROM Artist      AS AR\nJOIN Album       AS AL ON AR.ArtistId = AL.ArtistId\nJOIN Track       AS T  ON AL.AlbumId  = T.AlbumId\nJOIN InvoiceLine AS IL ON T.TrackId   = IL.TrackId\nGROUP BY AR.ArtistId\nORDER BY Revenue DESC, Artist\nLIMIT 3;\n\n/* Answer the following: Compute the average invoice total for each billing country and list the countries whose average invoice total is higher than the overall average invoice total of all countries. */\nWITH country_avg AS (\n    SELECT BillingCountry AS Country,\n           AVG(Total)      AS AvgTotal\n    FROM Invoice\n    GROUP BY BillingCountry\n),\noverall_avg AS (\n    SELECT AVG(Total) AS AvgTotalAll\n    FROM Invoice\n)\nSELECT CA.Country,\n       CA.AvgTotal\nFROM country_avg AS CA, overall_avg AS OA\nWHERE CA.AvgTotal > OA.AvgTotalAll\nORDER BY CA.AvgTotal DESC, CA.Country;\n\n/* Answer the following: Which invoice contains the fewest tracks but still has a total amount greater than 5 USD?  \n   Return the InvoiceId and the number of tracks. In case of a tie, return the earliest invoice by InvoiceDate. */\nSELECT I.InvoiceId,\n       COUNT(IL.InvoiceLineId) AS TrackCount\nFROM Invoice     AS I\nJOIN InvoiceLine AS IL ON I.InvoiceId = IL.InvoiceId\nWHERE I.Total > 5\nGROUP BY I.InvoiceId, I.InvoiceDate\nORDER BY TrackCount ASC, I.InvoiceDate ASC\nLIMIT 1;\n\n/* Answer the following: Identify the artist with the highest overall sales of albums (tie broken by alphabetical order) and the artist with the lowest overall sales of albums (tie broken by alphabetical order), then calculate the amount each customer spent specifically on those two artists\u2019 albums. Next, compute the average spending for the customers who purchased from the top-selling artist and the average spending for the customers who purchased from the lowest-selling artist, and finally return the absolute difference between these two averages.",
            "n_examples": 6,
            "db_id": "chinook"
        },
        {
            "question": "Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "evidence": "",
            "raw_question": "Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which customer made the single largest payment? */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nORDER BY p.amount DESC\nLIMIT 1;\n\n/* Answer the following: What is the total amount that customer \u201cJohn Doe\u201d paid during the year 2023? */\nSELECT SUM(p.amount) AS total_paid_2023\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nWHERE c.first_name = 'John'\n  AND c.last_name  = 'Doe'\n  AND YEAR(p.payment_date) = 2023;\n\n/* Answer the following: List the three customers with the highest average payment amount. */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY AVG(p.amount) DESC\nLIMIT 3;\n\n/* Answer the following: For each month of 2022, what was the average payment amount? */\nSELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month,\n       AVG(p.amount)                        AS avg_amount\nFROM payments AS p\nWHERE YEAR(p.payment_date) = 2022\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Which customer has made payments in the greatest number of distinct months? */\nSELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name\nFROM customers AS c\nJOIN payments  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(DISTINCT DATE_FORMAT(p.payment_date, '%Y-%m')) DESC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers made at least one payment in each quarter of 2022? */\nSELECT COUNT(*) AS customers_all_quarters_2022\nFROM (\n    SELECT customer_id\n    FROM payments\n    WHERE YEAR(payment_date) = 2022\n    GROUP BY customer_id\n    HAVING COUNT(DISTINCT QUARTER(payment_date)) = 4\n) AS t;\n\n/* Answer the following: Which customer has the highest average monthly change in payment amounts? Provide the customer's full name.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "evidence": "",
            "raw_question": "Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which hardware product segments had at least a 20 % increase in the number of unique products sold from 2020 to 2021, and how many unique products did they sell in 2021? 20 % increase refers to percentage growth \u2265 20. */\nSELECT hp.segment,\n       COUNT(DISTINCT CASE WHEN fs.year = 2021 THEN fs.product_id END) AS unique_products_2021\nFROM hardware_products AS hp\nJOIN fact_sales         AS fs ON fs.product_id = hp.product_id\nGROUP BY hp.segment\nHAVING COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END) > 0\n   AND (COUNT(DISTINCT CASE WHEN fs.year = 2021 THEN fs.product_id END)\n        - COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END)) * 100.0\n        / COUNT(DISTINCT CASE WHEN fs.year = 2020 THEN fs.product_id END) >= 20;\n\n/* Answer the following: Which hardware product segment showed the largest growth in total revenue from 2020 to 2021? */\nSELECT hp.segment\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nORDER  BY SUM(CASE WHEN fs.year = 2021 THEN fs.revenue END)\n        -  SUM(CASE WHEN fs.year = 2020 THEN fs.revenue END) DESC\nLIMIT  1;\n\n/* Answer the following: Give the percentage change in average selling price for every segment between 2020 and 2021. Average selling price refers to revenue / units_sold. */\nSELECT hp.segment,\n       (AVG(CASE WHEN fs.year = 2021 THEN fs.revenue * 1.0 / fs.units_sold END)\n      -  AVG(CASE WHEN fs.year = 2020 THEN fs.revenue * 1.0 / fs.units_sold END)) * 100.0\n      /  AVG(CASE WHEN fs.year = 2020 THEN fs.revenue * 1.0 / fs.units_sold END)   AS pct_change_avg_price\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nGROUP  BY hp.segment\nORDER  BY pct_change_avg_price DESC;\n\n/* Answer the following: List the segments that had no sales in 2019 but recorded sales in 2020. */\nSELECT DISTINCT hp.segment\nFROM   hardware_products AS hp\nJOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\nWHERE  fs.year = 2020\n  AND  hp.segment NOT IN (\n        SELECT DISTINCT hp2.segment\n        FROM   hardware_products AS hp2\n        JOIN   fact_sales        AS fs2 ON fs2.product_id = hp2.product_id\n        WHERE  fs2.year = 2019);\n\n/* Answer the following: For every month in 2021, how many unique hardware products were sold? */\nSELECT fs.month,\n       COUNT(DISTINCT fs.product_id) AS unique_products_2021\nFROM   fact_sales AS fs\nWHERE  fs.year = 2021\nGROUP  BY fs.month\nORDER  BY fs.month;\n\n/* Answer the following: What percentage of total 2021 revenue was earned by the top-3 revenue-generating segments in 2021? */\nWITH seg_rev AS (\n     SELECT hp.segment, SUM(fs.revenue) AS rev_2021\n     FROM   hardware_products AS hp\n     JOIN   fact_sales        AS fs ON fs.product_id = hp.product_id\n     WHERE  fs.year = 2021\n     GROUP  BY hp.segment\n), top3 AS (\n     SELECT SUM(rev_2021) AS top3_rev\n     FROM   (SELECT rev_2021\n             FROM   seg_rev\n             ORDER  BY rev_2021 DESC\n             LIMIT  3)\n), total AS (\n     SELECT SUM(rev_2021) AS total_rev FROM seg_rev\n)\nSELECT top3_rev * 100.0 / total_rev AS pct_top3_of_2021_revenue\nFROM   top3, total;\n\n/* Answer the following: Can you provide a list of hardware product segments along with their unique product counts for 2020 in the output, ordered by the highest percentage increase in unique fact sales products from 2020 to 2021?",
            "n_examples": 6,
            "db_id": "education_business"
        },
        {
            "question": "For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "evidence": "",
            "raw_question": "For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which hardware product had the highest total quantity sold in 2020? */\nSELECT P.product_name\nFROM Sales AS S\nJOIN Products AS P ON S.product_id = P.product_id\nWHERE strftime('%Y', S.sale_date) = '2020'\nGROUP BY S.product_id\nORDER BY SUM(S.quantity) DESC\nLIMIT 1;\n\n/* Answer the following: For every division, what was the total revenue generated in calendar year 2022? */\nSELECT D.division_name,\n       SUM(S.revenue) AS total_revenue_2022\nFROM Sales   AS S\nJOIN Divisions AS D ON S.division_id = D.division_id\nWHERE strftime('%Y', S.sale_date) = '2022'\nGROUP BY D.division_id;\n\n/* Answer the following: List the five suppliers that provide the largest number of distinct products. */\nSELECT Sup.supplier_name\nFROM Products AS P\nJOIN Suppliers AS Sup ON P.supplier_id = Sup.supplier_id\nGROUP BY Sup.supplier_id\nORDER BY COUNT(DISTINCT P.product_id) DESC\nLIMIT 5;\n\n/* Answer the following: How many distinct customers placed more than five orders during 2021? */\nSELECT COUNT(*)\nFROM (\n    SELECT O.customer_id\n    FROM Orders AS O\n    WHERE strftime('%Y', O.order_date) = '2021'\n    GROUP BY O.customer_id\n    HAVING COUNT(DISTINCT O.order_id) > 5\n) AS ActiveCustomers;\n\n/* Answer the following: What is the average unit price of all software products introduced after 1-Jan-2019? */\nSELECT AVG(P.unit_price)\nFROM Products AS P\nWHERE P.category = 'Software'\n  AND P.introduction_date > '2019-01-01';\n\n/* Answer the following: Which calendar month of 2022 recorded the highest total sales quantity across all products? */\nSELECT strftime('%m', S.sale_date) AS month,\n       SUM(S.quantity)             AS total_qty\nFROM Sales AS S\nWHERE strftime('%Y', S.sale_date) = '2022'\nGROUP BY month\nORDER BY total_qty DESC\nLIMIT 1;\n\n/* Answer the following: For the calendar year 2021, what is the overall average quantity sold of the top three best-selling hardware products (by total quantity sold) in each division?",
            "n_examples": 6,
            "db_id": "education_business"
        },
        {
            "question": "In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "evidence": "",
            "raw_question": "In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which product experienced the greatest absolute increase in sales (excluding promotions) from Q3 2019 to Q3 2020? */\nSELECT product_id\nFROM (\n    SELECT product_id,\n           SUM(CASE WHEN year = 2020 AND quarter = 'Q3' AND promotion_flag = 0 THEN sales_amount END) -\n           SUM(CASE WHEN year = 2019 AND quarter = 'Q3' AND promotion_flag = 0 THEN sales_amount END) AS diff\n    FROM sales\n    GROUP BY product_id\n) AS t\nORDER BY diff DESC\nLIMIT 1;\n\n/* Answer the following: List the cities where total sales with no promotions grew at least 25 % from Q2 2019 to Q2 2020. */\nSELECT city\nFROM (\n    SELECT city,\n           SUM(CASE WHEN year = 2020 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s20,\n           SUM(CASE WHEN year = 2019 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s19\n    FROM sales\n    GROUP BY city\n) AS c\nWHERE s19 > 0\n  AND (s20 - s19) * 100.0 / s19 >= 25;\n\n/* Answer the following: Among the cities that cleared the 25 % growth hurdle above, what are the five products with the highest combined non-promotional sales in those two quarters? */\nSELECT product_id\nFROM sales\nWHERE promotion_flag = 0\n  AND ((year = 2019 AND quarter = 'Q2') OR (year = 2020 AND quarter = 'Q2'))\n  AND city IN (\n        SELECT city\n        FROM (\n            SELECT city,\n                   SUM(CASE WHEN year = 2020 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s20,\n                   SUM(CASE WHEN year = 2019 AND quarter = 'Q2' AND promotion_flag = 0 THEN sales_amount END) AS s19\n            FROM sales\n            GROUP BY city\n        ) AS g\n        WHERE s19 > 0\n          AND (s20 - s19) * 100.0 / s19 >= 25\n  )\nGROUP BY product_id\nORDER BY SUM(sales_amount) DESC\nLIMIT 5;\n\n/* Answer the following: For each product category, show 2020 totals of promotional sales versus non-promotional sales. */\nSELECT p.category,\n       SUM(CASE WHEN s.promotion_flag = 1 THEN s.sales_amount END)  AS promo_sales_2020,\n       SUM(CASE WHEN s.promotion_flag = 0 THEN s.sales_amount END)  AS nopromo_sales_2020\nFROM sales AS s\nJOIN products AS p ON p.product_id = s.product_id\nWHERE s.year = 2020\nGROUP BY p.category;\n\n/* Answer the following: Which city had the highest percentage of promotional sales out of its total sales in Q4 2020? */\nSELECT city\nFROM (\n    SELECT city,\n           SUM(CASE WHEN promotion_flag = 1 THEN sales_amount END) * 100.0 /\n           SUM(sales_amount) AS promo_share\n    FROM sales\n    WHERE year = 2020\n      AND quarter = 'Q4'\n    GROUP BY city\n) AS x\nORDER BY promo_share DESC\nLIMIT 1;\n\n/* Answer the following: How many products recorded zero non-promotional sales but at least one promotional sale during 2020? */\nSELECT COUNT(DISTINCT product_id)\nFROM sales\nWHERE year = 2020\n  AND promotion_flag = 1\n  AND product_id NOT IN (\n        SELECT DISTINCT product_id\n        FROM sales\n        WHERE year = 2020 AND promotion_flag = 0\n);\n\n/* Answer the following: In the United States, for Q4 2019 and Q4 2020, first select only those cities where total sales (with no promotions) rose by at least 20% from Q4 2019 to Q4 2020. Among these cities, rank products by their overall sales (still excluding promotions) in those quarters and take the top 20%. Then compute each top product\u2019s share of total sales in Q4 2019 and Q4 2020 and calculate the difference in share from Q4 2019 to Q4 2020, returning the results in descending order of that share change.",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "evidence": "",
            "raw_question": "Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What were the total sales in USD for Germany during 2020 on channel 2? */\nSELECT SUM(S.sales_amount * E.usd_rate) AS total_sales_usd\nFROM sales AS S\nJOIN exchange_rates AS E\n  ON S.currency_code = E.currency_code\n AND S.year = E.year\n AND S.month = E.month\nWHERE S.country = 'Germany'\n  AND S.year = 2020\n  AND S.channel_total_id = 2;\n\n/* Answer the following: Which 5 products had the highest average monthly promotion sales in France in 2019 for promotion 1? */\nSELECT P.product_name,\n       AVG(S.sales_amount) AS avg_monthly_sales\nFROM sales AS S\nJOIN products AS P ON S.product_id = P.product_id\nWHERE S.country = 'France'\n  AND S.year = 2019\n  AND S.promo_total_id = 1\nGROUP BY P.product_name\nORDER BY avg_monthly_sales DESC\nLIMIT 5;\n\n/* Answer the following: For each month, what was the average growth rate of sales in the United Kingdom from 2019 to 2020 for products promoted with promo 3? */\nSELECT T2019.month,\n       AVG( (T2020.total_sales - T2019.total_sales) / NULLIF(T2019.total_sales,0) ) AS avg_growth_rate\nFROM (\n      SELECT product_id, month, SUM(sales_amount) AS total_sales\n      FROM sales\n      WHERE country = 'United Kingdom'\n        AND year = 2019\n        AND promo_total_id = 3\n      GROUP BY product_id, month\n) AS T2019\nJOIN (\n      SELECT product_id, month, SUM(sales_amount) AS total_sales\n      FROM sales\n      WHERE country = 'United Kingdom'\n        AND year = 2020\n        AND promo_total_id = 3\n      GROUP BY product_id, month\n) AS T2020\n  ON T2019.product_id = T2020.product_id\n AND T2019.month = T2020.month\nGROUP BY T2019.month;\n\n/* Answer the following: List month and product where projected 2021 sales (using 2019\u21922020 growth) exceed 100000 USD for Spain on channel 1 and promotion 2. */\nSELECT proj.month,\n       P.product_name,\n       SUM(proj.projected_sales_local * E.usd_rate) AS projected_sales_usd\nFROM (\n     SELECT T2019.product_id,\n            T2019.month,\n            (T2019.total_sales * CASE \n                    WHEN T2019.total_sales = 0 THEN 0\n                    ELSE (T2020.total_sales / T2019.total_sales) \n             END) AS projected_sales_local,\n            T2019.currency_code\n     FROM (\n          SELECT product_id, month, currency_code, SUM(sales_amount) AS total_sales\n          FROM sales\n          WHERE country = 'Spain'\n            AND year = 2019\n            AND channel_total_id = 1\n            AND promo_total_id = 2\n          GROUP BY product_id, month, currency_code\n     ) AS T2019\n     JOIN (\n          SELECT product_id, month, SUM(sales_amount) AS total_sales\n          FROM sales\n          WHERE country = 'Spain'\n            AND year = 2020\n            AND channel_total_id = 1\n            AND promo_total_id = 2\n          GROUP BY product_id, month\n     ) AS T2020\n       ON T2019.product_id = T2020.product_id\n      AND T2019.month     = T2020.month\n) AS proj\nJOIN exchange_rates AS E\n  ON proj.currency_code = E.currency_code\n AND E.year = 2021\n AND E.month = proj.month\nJOIN products AS P ON P.product_id = proj.product_id\nGROUP BY proj.month, P.product_name\nHAVING projected_sales_usd > 100000;\n\n/* Answer the following: How many distinct products were sold in the United States across all channels in 2020? */\nSELECT COUNT(DISTINCT product_id)\nFROM sales\nWHERE country = 'United States'\n  AND year = 2020;\n\n/* Answer the following: Which channel had the highest total promotion sales in Europe (France, Germany, Italy, Spain, United Kingdom) during Black Friday (promo 4) in November 2020? */\nSELECT C.channel_name\nFROM sales AS S\nJOIN channels AS C ON S.channel_total_id = C.channel_total_id\nWHERE S.country IN ('France','Germany','Italy','Spain','United Kingdom')\n  AND S.year = 2020\n  AND S.month = 11\n  AND S.promo_total_id = 4\nGROUP BY C.channel_name\nORDER BY SUM(S.sales_amount) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "evidence": "",
            "raw_question": "What is the average projected monthly sales in USD for France in 2021, considering only product sales with promotions where promo_total_id = 1 and channels where channel_total_id = 1, by taking each product\u2019s monthly sales from 2019 and 2020, calculating the growth rate from 2019 to 2020 for that same product and month, applying this growth rate to project 2021 monthly sales, converting all projected 2021 amounts to USD with the 2021 exchange rates, and finally averaging and listing them by month?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which three products brought the highest total profit from Italian customers in the whole year 2021? profit is (quantity * (unit_price - unit_cost)) */\nSELECT p.product_name\nFROM products AS p\nJOIN order_items AS oi ON oi.product_id = p.product_id\nJOIN orders AS o ON o.order_id = oi.order_id\nJOIN customers AS c ON c.customer_id = o.customer_id\nWHERE c.country = 'Italy'\n  AND o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY p.product_name\nORDER BY SUM(oi.quantity * (oi.unit_price - oi.unit_cost)) DESC\nLIMIT 3;\n\n/* Answer the following: What is the total quantity of items that were sold to French customers during the first quarter (January\u2013March) of 2020? */\nSELECT SUM(oi.quantity)\nFROM customers AS c\nJOIN orders AS o     ON o.customer_id = c.customer_id\nJOIN order_items AS oi ON oi.order_id   = o.order_id\nWHERE c.country = 'France'\n  AND o.order_date >= '2020-01-01'\n  AND o.order_date <  '2020-04-01';\n\n/* Answer the following: In 2021, which month had the lowest average order-level profit? (order-level profit is summed over its items, average calculated across all orders of the month) */\nSELECT strftime('%Y-%m', o.order_date) AS month,\n       AVG(order_profit)                AS avg_month_profit\nFROM (\n    SELECT o.order_id,\n           o.order_date,\n           SUM(oi.quantity * (oi.unit_price - oi.unit_cost)) AS order_profit\n    FROM orders AS o\n    JOIN order_items AS oi ON oi.order_id = o.order_id\n    WHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY o.order_id\n) AS sub\nGROUP BY month\nORDER BY avg_month_profit ASC\nLIMIT 1;\n\n/* Answer the following: How many distinct customers placed more than 5 orders during the calendar year 2020? */\nSELECT COUNT(*)\nFROM (\n    SELECT c.customer_id\n    FROM customers AS c\n    JOIN orders AS o ON o.customer_id = c.customer_id\n    WHERE o.order_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY c.customer_id\n    HAVING COUNT(o.order_id) > 5\n) AS heavy_buyers;\n\n/* Answer the following: What was the average profit per order item for products in the 'Electronics' category during 2019? profit per item is quantity * (unit_price - unit_cost) */\nSELECT AVG(oi.quantity * (oi.unit_price - oi.unit_cost)) AS avg_item_profit\nFROM order_items AS oi\nJOIN orders  AS o ON o.order_id  = oi.order_id\nJOIN products AS p ON p.product_id = oi.product_id\nWHERE p.product_category = 'Electronics'\n  AND o.order_date BETWEEN '2019-01-01' AND '2019-12-31';\n\n/* Answer the following: Which supplier incurred the highest total cost (quantity * unit_cost) across all items sold in 2021? */\nSELECT s.supplier_name\nFROM suppliers AS s\nJOIN products     AS p  ON p.supplier_id = s.supplier_id\nJOIN order_items  AS oi ON oi.product_id = p.product_id\nJOIN orders       AS o  ON o.order_id    = oi.order_id\nWHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY s.supplier_id, s.supplier_name\nORDER BY SUM(oi.quantity * oi.unit_cost) DESC\nLIMIT 1;\n\n/* Answer the following: Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "evidence": "",
            "raw_question": "What is the median of the average monthly projected sales in USD for France in 2021, calculated by using the monthly sales data from 2019 and 2020 (filtered by promo_total_id=1 and channel_total_id=1), applying the growth rate from 2019 to 2020 to project 2021, converting to USD based on the currency table, and then determining the monthly averages before finding their median?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which U.S. city recorded the greatest percentage growth in total sales of promo_id = 999 products from Q4 2019 (calendar_quarter_id = 1772) to Q4 2020 (calendar_quarter_id = 1776)? */\nWITH q19 AS (\n    SELECT city_id ,\n           SUM(sales_amount) AS s19\n    FROM sales  AS S\n    JOIN city   AS C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY city_id\n),\nq20 AS (\n    SELECT city_id ,\n           SUM(sales_amount) AS s20\n    FROM sales  AS S\n    JOIN city   AS C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY city_id\n),\npct AS (\n    SELECT q20.city_id ,\n           (q20.s20 - q19.s19) * 100.0 / NULLIF(q19.s19,0) AS pct_growth\n    FROM q20\n    JOIN q19 USING (city_id)\n)\nSELECT C.city_name\nFROM pct\nJOIN city C USING (city_id)\nORDER BY pct_growth DESC\nLIMIT 1;\n\n/* Answer the following: What was the overall percentage change in total U.S. sales of promo_id = 999 products from Q4 2019 to Q4 2020? */\nWITH totals AS (\n    SELECT calendar_quarter_id,\n           SUM(sales_amount) AS amt\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id IN (1772,1776)\n      AND C.country = 'United States'\n    GROUP BY calendar_quarter_id\n)\nSELECT (MAX(CASE WHEN calendar_quarter_id = 1776 THEN amt END) -\n        MAX(CASE WHEN calendar_quarter_id = 1772 THEN amt END)) * 100.0\n        / MAX(CASE WHEN calendar_quarter_id = 1772 THEN amt END)  AS pct_change\nFROM totals;\n\n/* Answer the following: What is the average Q4 2020 sales amount for products whose U.S. sales grew by at least 50 % between the two quarters under promo_id = 999? */\nWITH q19 AS (\n    SELECT product_id ,\n           SUM(sales_amount) AS s19\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\nq20 AS (\n    SELECT product_id ,\n           SUM(sales_amount) AS s20\n    FROM sales S\n    JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n)\nSELECT AVG(q20.s20) AS avg_sales_2020\nFROM q20\nJOIN q19 USING (product_id)\nWHERE (q20.s20 - q19.s19) * 100.0 / NULLIF(q19.s19,0) >= 50;\n\n/* Answer the following: List the five products that gained the most absolute sales dollars in the United States between Q4 2019 and Q4 2020 for promo_id = 999. */\nWITH q19 AS (\n    SELECT product_id , SUM(sales_amount) AS s19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\nq20 AS (\n    SELECT product_id , SUM(sales_amount) AS s20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n)\nSELECT P.product_name ,\n       (q20.s20 - COALESCE(q19.s19,0)) AS growth_amount\nFROM q20\nLEFT JOIN q19 USING (product_id)\nJOIN product P USING (product_id)\nORDER BY growth_amount DESC\nLIMIT 5;\n\n/* Answer the following: How many products had zero U.S. sales in Q4 2019 but registered some sales in Q4 2020 under promo_id = 999? */\nWITH q19 AS (\n    SELECT DISTINCT product_id\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n),\nq20 AS (\n    SELECT DISTINCT product_id\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999\n      AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n)\nSELECT COUNT(*)\nFROM q20\nWHERE product_id NOT IN (SELECT product_id FROM q19);\n\n/* Answer the following: Among U.S. products whose share of promo 999 sales decreased between the two quarters, which product had the smallest decline (i.e., least negative change in share)? */\nWITH tot19 AS (\n    SELECT SUM(sales_amount) AS ttl19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n),\ntot20 AS (\n    SELECT SUM(sales_amount) AS ttl20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n),\np19 AS (\n    SELECT product_id,\n           SUM(sales_amount) * 100.0 / (SELECT ttl19 FROM tot19) AS share19\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1772\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\np20 AS (\n    SELECT product_id,\n           SUM(sales_amount) * 100.0 / (SELECT ttl20 FROM tot20) AS share20\n    FROM sales S JOIN city C USING (city_id)\n    WHERE S.promo_id = 999 AND S.calendar_quarter_id = 1776\n      AND C.country = 'United States'\n    GROUP BY product_id\n),\ndiff AS (\n    SELECT p20.product_id ,\n           p20.share20 - p19.share19 AS delta\n    FROM p20\n    JOIN p19 USING (product_id)\n    WHERE p20.share20 < p19.share19\n)\nSELECT P.product_name\nFROM diff\nJOIN product P USING (product_id)\nORDER BY delta DESC          /* closest to zero (smallest decline) */\nLIMIT 1;\n\n/* Answer the following: Among all products sold in the United States with promo_id=999, considering only those cities whose sales increased by at least 20% from Q4 2019 (calendar_quarter_id=1772) to Q4 2020 (calendar_quarter_id=1776), which product that ranks in the top 20% of total sales has the smallest percentage-point change in its share of total sales between these two quarters?",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "evidence": "",
            "raw_question": "Please group all Italian customers into ten buckets for December 2021 by summing their profits from all products purchased (where profit is calculated as quantity_sold multiplied by the difference between unit_price and unit_cost), then divide the overall range of total monthly profits into ten equal intervals. For each bucket, provide the number of customers, and identify the minimum and maximum total profits within that bucket.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For every customer, what was the net transaction amount (deposits \u00adminus withdrawals) in March 2020? */\nSELECT\n    customer_id,\n    SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n             WHEN transaction_type = 'withdrawal' THEN -amount\n        END) AS net_amount_march_2020\nFROM Transactions\nWHERE transaction_date >= '2020-03-01'\n  AND transaction_date <  '2020-04-01'\nGROUP BY customer_id;\n\n/* Answer the following: Which customer recorded the single highest month-end balance in any month of 2020, and in which month did it occur? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n)\nSELECT customer_id, month\nFROM month_balances\nORDER BY month_end_balance DESC\nLIMIT 1;\n\n/* Answer the following: For each month of 2020, how many customers had a negative month-end balance, and which month had the largest such count? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), negative_counts AS (\n    SELECT month, COUNT(*) AS negative_customer_cnt\n    FROM month_balances\n    WHERE month_end_balance < 0\n    GROUP BY month\n)\nSELECT month\nFROM negative_counts\nORDER BY negative_customer_cnt DESC\nLIMIT 1;\n\n/* Answer the following: What was the average month-end balance across all customers for December 2020? */\nWITH dec_balances AS (\n    SELECT\n        customer_id,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date >= '2020-12-01'\n      AND transaction_date <  '2021-01-01'\n    GROUP BY customer_id\n)\nSELECT AVG(month_end_balance) AS avg_dec_balance\nFROM dec_balances;\n\n/* Answer the following: Among customers who posted a positive balance in every month of 2020, which customer ended the year with the lowest cumulative 2020 balance (sum of all 12 month-end balances)? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), always_positive AS (\n    SELECT customer_id\n    FROM month_balances\n    GROUP BY customer_id\n    HAVING MIN(month_end_balance) > 0\n), year_totals AS (\n    SELECT customer_id, SUM(month_end_balance) AS total_2020_balance\n    FROM month_balances\n    WHERE customer_id IN (SELECT customer_id FROM always_positive)\n    GROUP BY customer_id\n)\nSELECT customer_id\nFROM year_totals\nORDER BY total_2020_balance ASC\nLIMIT 1;\n\n/* Answer the following: Which month of 2020 showed the largest increase in average customer balance compared with the previous month? */\nWITH month_balances AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', transaction_date) AS month,\n        SUM(CASE WHEN transaction_type = 'deposit'  THEN amount\n                 WHEN transaction_type = 'withdrawal' THEN -amount\n            END) AS month_end_balance\n    FROM Transactions\n    WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY customer_id, DATE_TRUNC('month', transaction_date)\n), month_avgs AS (\n    SELECT month, AVG(month_end_balance) AS avg_bal\n    FROM month_balances\n    GROUP BY month\n), diffs AS (\n    SELECT\n        m2.month,\n        m2.avg_bal - COALESCE(m1.avg_bal, 0) AS increase_from_prev\n    FROM month_avgs AS m2\n    LEFT JOIN month_avgs AS m1\n           ON m1.month = m2.month - INTERVAL '1 month'\n)\nSELECT month\nFROM diffs\nORDER BY increase_from_prev DESC\nLIMIT 1;\n\n/* Answer the following: For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "evidence": "",
            "raw_question": "Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many unique customers have successfully received at least one pizza (i.e. their orders were not cancelled)? */\nSELECT COUNT(DISTINCT CO.customer_id)\nFROM customer_orders  AS CO\nJOIN runner_orders    AS RO ON CO.order_id = RO.order_id\nWHERE RO.cancellation IS NULL;\n\n/* Answer the following: What is the average delivery duration in minutes for Meat Lovers pizzas that were delivered? */\nSELECT AVG(\n           CAST(\n               TRIM(' minutes' FROM RO.duration) AS INTEGER\n           )\n       ) AS avg_minutes\nFROM customer_orders AS CO\nJOIN runner_orders   AS RO ON CO.order_id = RO.order_id\nJOIN pizza_names     AS PN ON CO.pizza_id   = PN.pizza_id\nWHERE PN.pizza_name = 'Meat Lovers'\n  AND RO.cancellation IS NULL;\n\n/* Answer the following: For each runner, how many total kilometres did they travel on successful deliveries? */\nSELECT RO.runner_id,\n       SUM(\n           CAST(TRIM(' km' FROM RO.distance) AS DECIMAL)\n       ) AS total_km\nFROM runner_orders AS RO\nWHERE RO.cancellation IS NULL\nGROUP BY RO.runner_id;\n\n/* Answer the following: List the three most popular toppings (including extras) across all delivered pizzas. */\nWITH delivered AS (\n    SELECT CO.order_id,\n           CO.pizza_id,\n           CO.extras\n    FROM customer_orders AS CO\n    JOIN runner_orders  AS RO ON CO.order_id = RO.order_id\n    WHERE RO.cancellation IS NULL\n), pizza_base AS (\n    SELECT d.order_id,\n           TRIM(value)::INTEGER AS topping_id\n    FROM delivered d,\n         LATERAL UNNEST(STRING_TO_ARRAY(\n             (SELECT pr.toppings\n              FROM pizza_recipes pr\n              WHERE pr.pizza_id = d.pizza_id), ',')) AS value\n), pizza_extras AS (\n    SELECT d.order_id,\n           TRIM(value)::INTEGER AS topping_id\n    FROM delivered d,\n         LATERAL UNNEST(STRING_TO_ARRAY(d.extras, ',')) AS value\n    WHERE d.extras <> ''\n)\nSELECT pt.topping_name,\n       COUNT(*) AS times_used\nFROM (\n    SELECT * FROM pizza_base\n    UNION ALL\n    SELECT * FROM pizza_extras\n) t\nJOIN pizza_toppings pt ON t.topping_id = pt.topping_id\nGROUP BY pt.topping_name\nORDER BY times_used DESC\nLIMIT 3;\n\n/* Answer the following: How many delivered orders contained at least one extra topping but no exclusions? */\nSELECT COUNT(*)\nFROM customer_orders AS CO\nJOIN runner_orders   AS RO ON CO.order_id = RO.order_id\nWHERE RO.cancellation IS NULL\n  AND CO.extras <> ''\n  AND CO.exclusions = '';\n\n*/* Answer the following: What was each runner\u2019s average delivery speed (in km/h) for their successful runs? */\nSELECT RO.runner_id,\n       ROUND(\n           SUM(CAST(TRIM(' km'      FROM RO.distance) AS DECIMAL)) /\n           SUM(CAST(TRIM(' minutes' FROM RO.duration) AS DECIMAL)) * 60\n       ,2) AS avg_km_per_hour\nFROM runner_orders AS RO\nWHERE RO.cancellation IS NULL\nGROUP BY RO.runner_id;\n\n/* Answer the following: Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Please examine our records for Chinese cities in July 2021 and identify both the shortest and longest streaks of consecutive date entries. List the dates along with their corresponding city names, capitalizing the first letter of each city name, for these streaks.",
            "evidence": "",
            "raw_question": "Please examine our records for Chinese cities in July 2021 and identify both the shortest and longest streaks of consecutive date entries. List the dates along with their corresponding city names, capitalizing the first letter of each city name, for these streaks.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which three ingredients were used the most across all delivered pizzas? */\nSELECT i.name ,\n       SUM(op.quantity) AS total_used\nFROM   orders            AS o\nJOIN   order_pizzas      AS op ON o.id = op.order_id\nJOIN   pizza_ingredients AS pi ON op.pizza_id = pi.pizza_id\nJOIN   ingredients       AS i  ON pi.ingredient_id = i.id\nWHERE  o.status = 'Delivered'\nGROUP  BY i.id , i.name\nORDER  BY total_used DESC\nLIMIT  3;\n\n/* Answer the following: How many vegetarian pizzas (i.e., pizzas that do not contain any meat ingredients) were ordered last month? vegetarian refers to pizzas whose ingredients are all in category 'Vegetable' or 'Cheese'; last month refers to strftime('%Y-%m', 'now', '-1 month') compared to order_date */\nSELECT SUM(op.quantity)\nFROM   orders       AS o\nJOIN   order_pizzas AS op ON o.id = op.order_id\nWHERE  strftime('%Y-%m', o.order_date) = strftime('%Y-%m', 'now', '-1 month')\nAND    NOT EXISTS (\n        SELECT 1\n        FROM   pizza_ingredients pi\n        JOIN   ingredients i ON i.id = pi.ingredient_id\n        WHERE  pi.pizza_id = op.pizza_id\n        AND    i.category = 'Meat'\n);\n\n/* Answer the following: What is the average spending per order for customers who have placed at least 5 orders? at least 5 orders refers to COUNT(*) >= 5; average spending per order refers to AVG(total_amount) */\nSELECT AVG(o.total_amount)\nFROM   orders o\nWHERE  o.customer_id IN (\n       SELECT customer_id\n       FROM   orders\n       GROUP  BY customer_id\n       HAVING COUNT(*) >= 5\n);\n\n/* Answer the following: Find the total revenue generated from 'Pepperoni' pizzas in the first quarter of 2022. first quarter refers to order_date between '2022-01-01' and '2022-03-31' */\nSELECT SUM(op.quantity * p.base_price)\nFROM   order_pizzas AS op\nJOIN   pizzas       AS p ON op.pizza_id = p.id\nJOIN   orders       AS o ON o.id = op.order_id\nWHERE  p.name = 'Pepperoni'\nAND    o.order_date BETWEEN '2022-01-01' AND '2022-03-31';\n\n/* Answer the following: List the names of customers who ordered the 'Hawaiian' pizza more than twice. */\nSELECT c.name\nFROM   customers c\nWHERE  c.id IN (\n       SELECT o.customer_id\n       FROM   orders o\n       JOIN   order_pizzas op ON o.id = op.order_id\n       JOIN   pizzas p        ON p.id = op.pizza_id\n       WHERE  p.name = 'Hawaiian'\n       GROUP  BY o.customer_id\n       HAVING SUM(op.quantity) > 2\n);\n\n/* Answer the following: Which day of the week has the highest average number of pizzas per order? */\nSELECT day_name\nFROM (\n     SELECT strftime('%w', o.order_date) AS day_num,\n            CASE strftime('%w', o.order_date)\n                 WHEN '0' THEN 'Sunday'\n                 WHEN '1' THEN 'Monday'\n                 WHEN '2' THEN 'Tuesday'\n                 WHEN '3' THEN 'Wednesday'\n                 WHEN '4' THEN 'Thursday'\n                 WHEN '5' THEN 'Friday'\n                 WHEN '6' THEN 'Saturday'\n            END AS day_name,\n            AVG(op.quantity) AS avg_pizzas\n     FROM   orders o\n     JOIN   order_pizzas op ON o.id = op.order_id\n     GROUP  BY day_num\n) \nORDER BY avg_pizzas DESC\nLIMIT 1;\n\n/* Answer the following: Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "evidence": "",
            "raw_question": "Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For customers from France, what is the average total profit in each of the ten equally-sized tiers based on their overall 2020 profits? */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           SUM(s.profit) AS total_profit\n    FROM customers AS c\n    JOIN sales      AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'France'\n      AND s.order_date BETWEEN '2020-01-01' AND '2020-12-31'\n    GROUP BY c.customer_id\n), tiered AS (\n    SELECT customer_id,\n           total_profit,\n           NTILE(10) OVER (ORDER BY total_profit) AS tier\n    FROM customer_profit\n)\nSELECT tier,\n       AVG(total_profit) AS avg_profit\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: What are the highest and lowest order profits inside each of the ten evenly-divided tiers for U.S. orders placed during March 2021? */\nWITH order_profit AS (\n    SELECT o.order_id,\n           SUM(oi.quantity * (oi.unit_price - oi.cost)) AS profit\n    FROM orders        AS o\n    JOIN order_items   AS oi ON oi.order_id = o.order_id\n    WHERE o.order_date BETWEEN '2021-03-01' AND '2021-03-31'\n    GROUP BY o.order_id\n), tiered AS (\n    SELECT order_id,\n           profit,\n           NTILE(10) OVER (ORDER BY profit) AS tier\n    FROM order_profit\n)\nSELECT tier,\n       MAX(profit) AS highest_profit,\n       MIN(profit) AS lowest_profit\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Obtain the number of products and their combined list price for each decile when all products are split into ten price tiers. */\nWITH tiered AS (\n    SELECT p.product_id,\n           p.list_price,\n           NTILE(10) OVER (ORDER BY p.list_price) AS tier\n    FROM products AS p\n)\nSELECT tier,\n       COUNT(product_id) AS product_count,\n       SUM(list_price)   AS total_price\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: Within the top decile of 2021 profits for Italian customers, which product category generated the greatest total profit? */\nWITH customer_profit AS (\n    SELECT c.customer_id,\n           SUM(s.profit) AS total_profit\n    FROM customers AS c\n    JOIN sales     AS s ON s.customer_id = c.customer_id\n    WHERE c.country = 'Italy'\n      AND s.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY c.customer_id\n), top_customers AS (\n    SELECT customer_id\n    FROM (\n        SELECT customer_id,\n               total_profit,\n               NTILE(10) OVER (ORDER BY total_profit) AS tier\n        FROM customer_profit\n    ) WHERE tier = 10\n), category_profit AS (\n    SELECT pr.category_id,\n           SUM(oi.quantity * (oi.unit_price - oi.cost)) AS profit\n    FROM orders       AS o\n    JOIN order_items  AS oi ON oi.order_id  = o.order_id\n    JOIN products     AS pr ON pr.product_id = oi.product_id\n    WHERE o.customer_id IN (SELECT customer_id FROM top_customers)\n      AND o.order_date BETWEEN '2021-01-01' AND '2021-12-31'\n    GROUP BY pr.category_id\n)\nSELECT c.category_name\nFROM categories AS c\nJOIN category_profit AS cp ON cp.category_id = c.category_id\nORDER BY cp.profit DESC\nLIMIT 1;\n\n/* Answer the following: Show the average shipping time (in days) for each of ten shipping-speed tiers for orders sent out during 2020. */\nWITH shipping AS (\n    SELECT s.order_id,\n           JULIANDAY(s.delivered_date) - JULIANDAY(s.shipped_date) AS shipping_days\n    FROM shipments AS s\n    WHERE s.shipped_date BETWEEN '2020-01-01' AND '2020-12-31'\n), tiered AS (\n    SELECT order_id,\n           shipping_days,\n           NTILE(10) OVER (ORDER BY shipping_days) AS tier\n    FROM shipping\n)\nSELECT tier,\n       AVG(shipping_days) AS avg_shipping_days\nFROM tiered\nGROUP BY tier\nORDER BY tier;\n\n/* Answer the following: List the three salespersons with the lowest total profit in the bottom profit decile for Q2 2021. */\nWITH salesperson_profit AS (\n    SELECT sp.salesperson_id,\n           SUM(s.profit) AS total_profit\n    FROM salespersons AS sp\n    JOIN sales        AS s ON s.salesperson_id = sp.salesperson_id\n    WHERE s.order_date BETWEEN '2021-04-01' AND '2021-06-30'\n    GROUP BY sp.salesperson_id\n), tiered AS (\n    SELECT salesperson_id,\n           total_profit,\n           NTILE(10) OVER (ORDER BY total_profit) AS tier\n    FROM salesperson_profit\n)\nSELECT sp.name,\n       t.total_profit\nFROM tiered AS t\nJOIN salespersons AS sp ON sp.salesperson_id = t.salesperson_id\nWHERE t.tier = 1\nORDER BY t.total_profit ASC\nLIMIT 3;\n\n/* Answer the following: Can you provide the highest and lowest profits for Italian customers segmented into ten evenly divided tiers based on their December 2021 sales profits?",
            "n_examples": 6,
            "db_id": "complex_oracle"
        },
        {
            "question": "Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "evidence": "",
            "raw_question": "Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: For each year from 2019 to 2021, how many cities were added in January, and what is the cumulative running total of January additions up to that year? January refers to EXTRACT(MONTH FROM created_at) = 1 */\nSELECT\n  year,\n  jan_new_cities,\n  SUM(jan_new_cities) OVER (ORDER BY year) AS running_total_jan\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS jan_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 1\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2019 AND 2021\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nORDER BY year;\n\n/* Answer the following: Show the year-over-year growth percentage of new cities created in February for the years 2020 and 2021, using 2019 as the comparison baseline. February refers to month = 2 */\nSELECT\n  year,\n  feb_new_cities,\n  ROUND(\n    (feb_new_cities - LAG(feb_new_cities) OVER (ORDER BY year)) * 100.0\n    / LAG(feb_new_cities) OVER (ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS feb_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 2\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2019 AND 2021\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nWHERE year IN (2020, 2021)\nORDER BY year;\n\n/* Answer the following: For each year from 2021 to 2023, what is the total number of cities added during April, May and June combined, and what is the year-over-year growth percentage relative to the previous year? April, May and June refer to months 4-6 */\nSELECT\n  year,\n  q2_new_cities,\n  ROUND(\n    (q2_new_cities - LAG(q2_new_cities) OVER (ORDER BY year)) * 100.0\n    / LAG(q2_new_cities) OVER (ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS q2_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) BETWEEN 4 AND 6\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2020 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nWHERE year BETWEEN 2021 AND 2023\nORDER BY year;\n\n/* Answer the following: What is the cumulative running total of cities added during the second quarter (April-June) up to and including each year from 2021 to 2023? second quarter refers to months 4-6 */\nSELECT\n  year,\n  q2_new_cities,\n  SUM(q2_new_cities) OVER (ORDER BY year) AS running_total_q2\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at) AS year,\n    COUNT(*) AS q2_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) BETWEEN 4 AND 6\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at)\n) AS sub\nORDER BY year;\n\n/* Answer the following: Compare the number of cities inserted in April 2023 with April 2022 and show the percentage growth. April refers to month = 4 */\nSELECT\n  curr.year AS year_2023,\n  curr.apr_new_cities  AS april_2023_cities,\n  prev.apr_new_cities  AS april_2022_cities,\n  ROUND(\n    (curr.apr_new_cities - prev.apr_new_cities) * 100.0 / prev.apr_new_cities,\n    2\n  ) AS growth_percent\nFROM (\n  SELECT COUNT(*) AS apr_new_cities , 2023 AS year\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 4\n    AND EXTRACT(YEAR FROM created_at) = 2023\n) AS curr\nCROSS JOIN (\n  SELECT COUNT(*) AS apr_new_cities , 2022 AS year\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) = 4\n    AND EXTRACT(YEAR FROM created_at) = 2022\n) AS prev;\n\n/* Answer the following: For the months April, May and June, list 2022 and 2023 showing the total cities added in each month, the cumulative running total for that month across the years, and the year-over-year growth percentage. */\nSELECT\n  year,\n  month,\n  month_new_cities,\n  SUM(month_new_cities) OVER (PARTITION BY month ORDER BY year)      AS running_total_month,\n  ROUND(\n    (month_new_cities - LAG(month_new_cities) OVER (PARTITION BY month ORDER BY year)) * 100.0\n    / LAG(month_new_cities) OVER (PARTITION BY month ORDER BY year),\n    2\n  ) AS yoy_growth_percent\nFROM (\n  SELECT\n    EXTRACT(YEAR FROM created_at)   AS year,\n    EXTRACT(MONTH FROM created_at)  AS month,\n    COUNT(*)                        AS month_new_cities\n  FROM city\n  WHERE EXTRACT(MONTH FROM created_at) IN (4,5,6)\n    AND EXTRACT(YEAR FROM created_at) BETWEEN 2021 AND 2023\n  GROUP BY EXTRACT(YEAR FROM created_at), EXTRACT(MONTH FROM created_at)\n) AS sub\nWHERE year IN (2022, 2023)\nORDER BY month, year;\n\n/* Answer the following: Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "evidence": "",
            "raw_question": "Calculate the number of new cities inserted in April, May, and June for each year from 2021 to 2023. For each month, compute the cumulative running total of cities added for that specific month across the years up to and including the given year (i.e., sum the counts of that month over the years). Additionally, calculate the year-over-year growth percentages for both the monthly total and the running total for each month, comparing each year to the previous year. Present the results only for 2022 and 2023, listing the year, the month, the total number of cities added in that month, the cumulative running total for that month, and the year-over-year growth percentages for both the monthly total and the running total. Use the data from 2021 solely as a baseline for calculating growth rates, and exclude it from the final output.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which Chinese city had the highest average temperature during July 2021?  July 2021 refers to dates between '2021-07-01' and '2021-07-31'. */\nSELECT C.name\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.country_code_2 = 'cn'\n  AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\nGROUP BY C.name\nORDER BY AVG(S.temperature) DESC\nLIMIT 1;\n\n/* Answer the following: Show the three Chinese cities that recorded data on the largest number of days in July 2021 (most active cities). */\nSELECT C.name,\n       COUNT(*) AS record_days\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.country_code_2 = 'cn'\n  AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\nGROUP BY C.name\nORDER BY record_days DESC\nLIMIT 3;\n\n/* Answer the following: For Beijing, list the first day and the last day on which any record exists in 2021. */\nSELECT MIN(S.date) AS first_record,\n       MAX(S.date) AS last_record\nFROM cities            AS C\nJOIN city_daily_stats  AS S ON C.id = S.city_id\nWHERE C.name = 'Beijing'\n  AND S.date BETWEEN '2021-01-01' AND '2021-12-31';\n\n/* Answer the following: Which Chinese city achieved the longest streak of consecutive record dates in the year 2021, and how many days long was that streak?  Consecutive dates are detected with DATE(S.date)-ROW_NUMBER() window trick. */\nWITH cn AS (\n    SELECT C.id,\n           C.name,\n           S.date,\n           DATE(S.date) - INTERVAL ROW_NUMBER() OVER (PARTITION BY C.id ORDER BY S.date) DAY AS grp_key\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.country_code_2 = 'cn'\n      AND S.date BETWEEN '2021-01-01' AND '2021-12-31'\n)\nSELECT name,\n       COUNT(*) AS streak_len\nFROM cn\nGROUP BY id, name, grp_key\nORDER BY streak_len DESC\nLIMIT 1;\n\n/* Answer the following: Which Chinese city had the shortest streak (minimum length > 0) of consecutive daily records in July 2021, and how many days long was it? */\nWITH july AS (\n    SELECT C.id,\n           C.name,\n           S.date,\n           DATE(S.date) - INTERVAL ROW_NUMBER() OVER (PARTITION BY C.id ORDER BY S.date) DAY AS grp_key\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.country_code_2 = 'cn'\n      AND S.date BETWEEN '2021-07-01' AND '2021-07-31'\n)\nSELECT name,\n       COUNT(*) AS streak_len\nFROM july\nGROUP BY id, name, grp_key\nHAVING streak_len > 0\nORDER BY streak_len ASC\nLIMIT 1;\n\n/* Answer the following: For Shanghai, what is the longest gap in days between two successive records in 2021? */\nWITH sh AS (\n    SELECT S.date,\n           LAG(S.date) OVER (ORDER BY S.date) AS prev_date\n    FROM cities           AS C\n    JOIN city_daily_stats AS S ON S.city_id = C.id\n    WHERE C.name = 'Shanghai'\n      AND S.date BETWEEN '2021-01-01' AND '2021-12-31'\n)\nSELECT MAX(DATEDIFF(date, prev_date)) AS max_gap_days\nFROM sh\nWHERE prev_date IS NOT NULL;\n\n/* Answer the following: Please examine our database records for Chinese cities (country_code_2 = 'cn') during July 2021 and identify both the shortest and longest streaks of consecutive date entries. For each date in these streaks, return exactly one record per date along with the corresponding city name. In your output, please ensure the first letter of each city name is capitalized and the rest are lowercase. Display the dates and city names for both the shortest and longest consecutive date streaks, ordered by date.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "evidence": "",
            "raw_question": "For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many cities were inserted in total during June 2022?  June 2022 refers to inserted_date BETWEEN '2022-06-01' AND '2022-06-30'. */\nSELECT COUNT(*) \nFROM cities \nWHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30';\n\n/* Answer the following: Which country had the highest number of city insertions in June 2022?  Return its 2-letter country code. */\nSELECT country_code\nFROM cities\nWHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\nGROUP BY country_code\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the five countries that recorded at least 10 city insertions on any single day during June 2022.  Return distinct country codes only. */\nSELECT DISTINCT country_code\nFROM (\n    SELECT country_code,\n           inserted_date,\n           COUNT(*) AS daily_cnt\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n    GROUP BY country_code, inserted_date\n    HAVING COUNT(*) >= 10\n) AS t\nLIMIT 5;\n\n/* Answer the following: Which country had the longest streak of consecutive days with at least one city insertion during the whole of 2022?  Give the 2-letter country code. */\nWITH d AS (                                   -- one row per country-day that had at least one insertion\n    SELECT DISTINCT country_code, inserted_date\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-01-01' AND '2022-12-31'\n), rn AS (                                    -- assign a running number per country ordered by day\n    SELECT country_code,\n           inserted_date,\n           ROW_NUMBER() OVER (PARTITION BY country_code ORDER BY inserted_date) AS r\n    FROM d\n), grp AS (                                   -- equal (date \u2013 row_number) \u21d2 part of same consecutive run\n    SELECT country_code,\n           DATE_SUB(inserted_date, INTERVAL r DAY) AS grp_key\n    FROM rn\n), streaks AS (\n    SELECT country_code,\n           grp_key,\n           COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY country_code, grp_key\n)\nSELECT country_code\nFROM streaks\nORDER BY streak_len DESC\nLIMIT 1;\n\n/* Answer the following: During June 2022, what was the length of the longest consecutive-day insertion streak for each country?  Return country_code and streak_len. */\nWITH d AS (\n    SELECT DISTINCT country_code, inserted_date\n    FROM cities\n    WHERE inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n), rn AS (\n    SELECT country_code,\n           inserted_date,\n           ROW_NUMBER() OVER (PARTITION BY country_code ORDER BY inserted_date) AS r\n    FROM d\n), grp AS (\n    SELECT country_code,\n           DATE_SUB(inserted_date, INTERVAL r DAY) AS grp_key\n    FROM rn\n), streaks AS (\n    SELECT country_code, grp_key, COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY country_code, grp_key\n)\nSELECT country_code, MAX(streak_len) AS streak_len\nFROM streaks\nGROUP BY country_code;\n\n/* Answer the following: For Germany (country_code = 'DE'), what was the average number of cities inserted per day during June 2022? */\nSELECT AVG(daily_cnt)\nFROM (\n    SELECT inserted_date, COUNT(*) AS daily_cnt\n    FROM cities\n    WHERE country_code = 'DE'\n      AND inserted_date BETWEEN '2022-06-01' AND '2022-06-30'\n    GROUP BY inserted_date\n) AS x;\n\n/* Answer the following: Could you review our records in June 2022 and identify which countries have the longest streak of consecutive inserted city dates? Please list the 2-letter length country codes of these countries.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "evidence": "",
            "raw_question": "Based on our customer pizza order information, summarize the total quantity of each ingredient used in the pizzas we delivered. Output the name and quantity for each ingredient.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which country recorded data insertions on every single day of February 2022? */\nSELECT c.country_name\nFROM countries AS c\nJOIN insertions AS i\n  ON i.country_id = c.id\nWHERE i.inserted_at BETWEEN DATE '2022-02-01' AND DATE '2022-02-28'\nGROUP BY c.id, c.country_name\nHAVING COUNT(DISTINCT i.inserted_at) = 28;\n\n/* Answer the following: What is the total number of insertions that happened on weekends (Saturday or Sunday) during March 2021? */\nSELECT COUNT(*) \nFROM insertions\nWHERE inserted_at BETWEEN DATE '2021-03-01' AND DATE '2021-03-31'\n  AND EXTRACT(ISODOW FROM inserted_at) IN (6,7);\n\n/* Answer the following: List the three cities with the highest number of insertions made exactly at midnight (00:00:00) throughout 2021. */\nSELECT ci.city_name\nFROM insertions AS i\nJOIN cities AS ci\n  ON i.city_id = ci.id\nWHERE i.inserted_at BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n  AND CAST(i.inserted_at AS TIME) = TIME '00:00:00'\nGROUP BY ci.id, ci.city_name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For each country, give the longest streak of consecutive days with at least one insertion during 2020. */\nWITH ranked AS (\n    SELECT country_id,\n           inserted_at::date AS d,\n           ROW_NUMBER() OVER (PARTITION BY country_id ORDER BY inserted_at::date) -\n           ROW_NUMBER() OVER (PARTITION BY country_id, inserted_at::date ORDER BY inserted_at::date) AS grp\n    FROM insertions\n    WHERE inserted_at BETWEEN DATE '2020-01-01' AND DATE '2020-12-31'\n    GROUP BY country_id, inserted_at::date\n), streaks AS (\n    SELECT country_id, COUNT(*) AS len\n    FROM ranked\n    GROUP BY country_id, grp\n)\nSELECT c.country_name, MAX(len) AS longest_streak\nFROM streaks\nJOIN countries AS c\n  ON c.id = streaks.country_id\nGROUP BY c.id, c.country_name;\n\n/* Answer the following: Which capital city contributed more than half of its country's total insertions in April 2022? */\nSELECT c.country_name, cap.city_name AS capital_city\nFROM countries AS c\nJOIN cities AS cap\n  ON cap.id = c.capital_city_id\nJOIN insertions AS i_all\n  ON i_all.country_id = c.id\nLEFT JOIN insertions AS i_cap\n  ON i_cap.city_id = cap.id\n     AND i_cap.inserted_at BETWEEN DATE '2022-04-01' AND DATE '2022-04-30'\nWHERE i_all.inserted_at BETWEEN DATE '2022-04-01' AND DATE '2022-04-30'\nGROUP BY c.id, c.country_name, cap.city_name\nHAVING COUNT(i_cap.id) * 2 > COUNT(i_all.id);\n\n/* Answer the following: Find the day in 2021 with the highest number of countries having at least one data insertion. */\nSELECT inserted_at::date AS day,\n       COUNT(DISTINCT country_id) AS countries_with_data\nFROM insertions\nWHERE inserted_at BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\nGROUP BY day\nORDER BY countries_with_data DESC\nLIMIT 1;\n\n/* Answer the following: Identify the country with data inserted on nine different days in January 2022. Then, find the longest consecutive period with data insertions for this country during January 2022, and calculate the proportion of entries that are from its capital city within this longest consecutive insertion period.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "evidence": "",
            "raw_question": "Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: List every order-row that contains a \u2018Meatlovers\u2019 pizza together with the number of toppings the customer asked to leave off.  Return row_id, order_id, customer_id and excluded_cnt ordered by order_id. */\nSELECT  op.row_id ,\n        op.order_id ,\n        o.customer_id ,\n        COUNT(ex.topping_id) AS excluded_cnt\nFROM    order_pizzas        AS op\nJOIN    orders              AS o   ON o.id      = op.order_id\nJOIN    pizzas              AS p   ON p.id      = op.pizza_id\nJOIN    order_exclusions    AS ex  ON ex.row_id = op.row_id\nWHERE   p.name = 'Meatlovers'\nGROUP BY op.row_id ,\n         op.order_id ,\n         o.customer_id\nORDER BY op.order_id ;\n\n/* Answer the following: What are the three most frequently added extra toppings?  Show topping name and how many times it was added, in descending order, limited to 3 rows. */\nSELECT  t.name ,\n        COUNT(*) AS extra_cnt\nFROM    order_extras  AS e\nJOIN    toppings      AS t ON t.id = e.topping_id\nGROUP BY t.name\nORDER BY extra_cnt DESC\nLIMIT 3 ;\n\n/* Answer the following: For each type of pizza, how many distinct standard toppings appear in its recipe?  Give pizza name and topping_cnt ordered from most to fewest toppings. */\nSELECT  p.name ,\n        COUNT(*) AS topping_cnt\nFROM    pizzas         AS p\nJOIN    pizza_recipes  AS pr ON pr.pizza_id = p.id\nGROUP BY p.name\nORDER BY topping_cnt DESC ;\n\n/* Answer the following: Which customers have never ordered a pizza with any extra toppings?  Return the customer_id list. */\nSELECT DISTINCT o.customer_id\nFROM   orders AS o\nWHERE  NOT EXISTS (      /* no extras for any row of that customer\u2019s orders               */\n        SELECT 1\n        FROM   order_pizzas op\n        JOIN   order_extras ex ON ex.row_id = op.row_id\n        WHERE  op.order_id = o.id\n      );\n\n/* Answer the following: Show every pizza type that normally includes \u201cAnchovies\u201d but was at least once ordered with Anchovies removed.  Return pizza name and how many times Anchovies were excluded. */\nSELECT  p.name ,\n        COUNT(*) AS times_excluded\nFROM    pizzas          AS p\nJOIN    pizza_recipes   AS pr ON pr.pizza_id  = p.id\nJOIN    toppings        AS tp ON tp.id        = pr.topping_id\nJOIN    order_pizzas    AS op ON op.pizza_id  = p.id\nJOIN    order_exclusions AS ex ON ex.row_id   = op.row_id\nWHERE   tp.name         = 'Anchovies'\n  AND   ex.topping_id   = tp.id\nGROUP BY p.name ;\n\n/* Answer the following: For every calendar day, how many pizzas were ordered between 18:00 and 23:00?  Return order_date and evening_pizza_cnt ordered by date. */\nSELECT  DATE(o.order_time)                     AS order_date ,\n        COUNT(*)                               AS evening_pizza_cnt\nFROM    orders        AS o\nJOIN    order_pizzas  AS op ON op.order_id = o.id\nWHERE   EXTRACT(HOUR FROM o.order_time) BETWEEN 18 AND 23\nGROUP BY DATE(o.order_time)\nORDER BY order_date ;\n\n/* Answer the following: For each pizza order, please list a single result row containing the row ID, order ID, customer ID, pizza name, and the final set of ingredients. The final set of ingredients should be determined by taking the standard toppings from the pizza\u2019s recipe, removing any toppings specified as exclusions, then adding any toppings specified as extras. The resulting ingredients must be presented in alphabetical order, prefixed by \u20182x\u2019 if the same ingredient appears multiple times (for example, if both standard and extra or added multiple times), and concatenated into a string that begins with the pizza name followed by \u2018: \u2019. Group by row ID, order ID, pizza name, and order time so that each order appears once, and return the listing of toppings in ascending order by row ID, ensuring that \u2018Meatlovers\u2019 pizzas receive a pizza_id of 1 while all others receive a pizza_id of 2.",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "evidence": "",
            "raw_question": "Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Give the closing balance at the end of every month in 2022 for every account. */\nSELECT\n    A.account_id,\n    DATE_TRUNC('month', M.month_end)::date   AS month_end,\n    SUM(T.amount) OVER (\n        PARTITION BY A.account_id\n        ORDER BY M.month_end\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n    )                                         AS closing_balance\nFROM\n    accounts            AS A\nCROSS JOIN (\n        /* create a list of month-end dates for 2022 */\n        SELECT\n            DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2022-01-01'::date,\n                             '2022-12-01'::date,\n                             INTERVAL '1 month') AS g(d)\n)                       AS M\nLEFT JOIN\n    transactions        AS T\n        ON  T.account_id   = A.account_id\n        AND T.trans_date  <= M.month_end\nGROUP BY\n    A.account_id,\n    M.month_end\nORDER BY\n    A.account_id,\n    M.month_end;\n\n\n/* Answer the following: For customer 'C001', show the month-over-month change in balance for 2021. */\nWITH month_close AS (\n    SELECT\n        DATE_TRUNC('month', g.d)::date + INTERVAL '1 month - 1 day' AS month_end,\n        SUM(t.amount) OVER (ORDER BY DATE_TRUNC('month', g.d))      AS closing_balance\n    FROM generate_series('2021-01-01'::date,\n                         '2021-12-01'::date,\n                         INTERVAL '1 month') AS g(d)\n    LEFT JOIN accounts  AS a  ON a.customer_id = 'C001'\n    LEFT JOIN transactions AS t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= g.d + INTERVAL '1 month - 1 day'\n    GROUP BY g.d\n)\nSELECT\n    month_end,\n    closing_balance,\n    closing_balance - LAG(closing_balance) OVER (ORDER BY month_end) AS month_change\nFROM month_close\nORDER BY month_end;\n\n\n/* Answer the following: List each customer\u2019s cumulative balance at each month-end in the first half of 2020, including customers with no activity. */\nWITH months AS (\n    SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n    FROM generate_series('2020-01-01'::date,'2020-06-01'::date,INTERVAL '1 month') AS g(d)\n)\nSELECT\n    c.customer_id,\n    m.month_end,\n    COALESCE( SUM(t.amount)\n              OVER (PARTITION BY c.customer_id ORDER BY m.month_end\n                    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS cumulative_balance\nFROM customers      AS c\nCROSS JOIN months   AS m\nLEFT  JOIN accounts AS a ON a.customer_id = c.customer_id\nLEFT  JOIN transactions t\n       ON t.account_id = a.account_id\n      AND t.trans_date <= m.month_end\nGROUP BY c.customer_id, m.month_end\nORDER BY c.customer_id, m.month_end;\n\n\n/* Answer the following: What was the highest customer closing balance on any month-end during 2021? */\nWITH balances AS (\n    SELECT\n        c.customer_id,\n        m.month_end,\n        SUM(t.amount) OVER (PARTITION BY c.customer_id\n                            ORDER BY m.month_end\n                            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS closing_balance\n    FROM customers  c\n    CROSS JOIN (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2021-01-01','2021-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON a.customer_id = c.customer_id\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY c.customer_id, m.month_end\n)\nSELECT MAX(closing_balance) FROM balances;\n\n\n/* Answer the following: Return the customers whose balance decreased for at least 3 consecutive months in 2022. */\nWITH month_close AS (\n    SELECT\n        c.customer_id,\n        m.month_end,\n        SUM(t.amount) OVER (PARTITION BY c.customer_id\n                            ORDER BY m.month_end\n                            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS bal\n    FROM customers c\n    CROSS JOIN (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2022-01-01','2022-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON a.customer_id = c.customer_id\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY c.customer_id, m.month_end\n), flagged AS (\n    SELECT\n        customer_id,\n        month_end,\n        bal,\n        LAG(bal)  OVER (PARTITION BY customer_id ORDER BY month_end) AS prev1,\n        LAG(bal,2) OVER (PARTITION BY customer_id ORDER BY month_end) AS prev2\n    FROM month_close\n)\nSELECT DISTINCT customer_id\nFROM flagged\nWHERE bal  < prev1\n  AND prev1 < prev2;\n\n\n/* Answer the following: Show the net change in total bank balances for all customers for each month in 2023. */\nWITH totals AS (\n    SELECT\n        m.month_end,\n        SUM(t.amount) OVER (ORDER BY m.month_end) AS total_close\n    FROM (\n        SELECT DATE_TRUNC('month', d)::date + INTERVAL '1 month - 1 day' AS month_end\n        FROM generate_series('2023-01-01','2023-12-01',INTERVAL '1 month') g(d)\n    ) m\n    LEFT JOIN accounts a  ON TRUE\n    LEFT JOIN transactions t\n           ON t.account_id = a.account_id\n          AND t.trans_date <= m.month_end\n    GROUP BY m.month_end\n)\nSELECT\n    month_end,\n    total_close - LAG(total_close) OVER (ORDER BY month_end) AS net_change\nFROM totals\nORDER BY month_end;\n\n\n/* Answer the following: Please generate a summary of the closing balances at the end of each month for each customer transactions, show the monthly changes and monthly cumulative bank account balances. Ensure that even if a customer has no account activity in a given month, the balance for that month is still included in the output.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "evidence": "",
            "raw_question": "For each customer and each month of 2020, first calculate the month-end balance by adding all deposit amounts and subtracting all withdrawal amounts that occurred during that specific month. Then determine which month in 2020 has the highest count of customers with a positive month-end balance and which month has the lowest count. For each of these two months, compute the average month-end balance across all customers and provide the difference between these two averages",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which products have been viewed more than 500 times in the last 30 days, ignoring activity that happened on pages 1, 2, 12 and 13? */\nSELECT\n        P.prod_name,\n        COUNT(*)  AS view_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_type = 'view'\n  AND   E.event_time >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)\n  AND   E.page_id NOT IN (1,2,12,13)\nGROUP BY P.prod_id\nHAVING  view_cnt > 500;\n\n/* Answer the following: Give the number of distinct users who added each product to their cart during 2023 while never actually purchasing it, excluding page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        COUNT(DISTINCT E.user_id) AS abandon_user_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_type = 'add_to_cart'\n  AND   YEAR(E.event_time) = 2023\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   NOT EXISTS (      /* same user bought the same product any time in 2023 */\n          SELECT 1\n          FROM   product_events AS X\n          WHERE  X.user_id    = E.user_id\n            AND  X.product_id = E.product_id\n            AND  X.event_type = 'purchase'\n            AND  YEAR(X.event_time) = 2023)\nGROUP BY P.prod_id;\n\n/* Answer the following: List the top 10 products that have the highest cart-abandonment rate (adds to cart without purchase) in the past 90 days, again skipping page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        SUM(CASE WHEN E.event_type = 'add_to_cart' THEN 1 END) AS cart_adds,\n        SUM(CASE WHEN E.event_type = 'purchase'     THEN 1 END) AS buys,\n        (SUM(CASE WHEN E.event_type = 'add_to_cart' THEN 1 END) -\n         SUM(CASE WHEN E.event_type = 'purchase'     THEN 1 END)) AS abandoned\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_time >= DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY)\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('add_to_cart','purchase')\nGROUP BY P.prod_id\nHAVING  cart_adds > 0\nORDER BY abandoned DESC\nLIMIT 10;\n\n/* Answer the following: For every user, how many different products did they buy in 2022 without ever viewing them first?  Ignore pages 1, 2, 12 and 13 when looking for views. */\nSELECT\n        E.user_id,\n        COUNT(DISTINCT E.product_id) AS blind_buy_cnt\nFROM    product_events AS E\nWHERE   E.event_type = 'purchase'\n  AND   YEAR(E.event_time) = 2022\n  AND   NOT EXISTS (\n          SELECT 1\n          FROM   product_events AS V\n          WHERE  V.user_id    = E.user_id\n            AND  V.product_id = E.product_id\n            AND  V.event_type = 'view'\n            AND  V.page_id   NOT IN (1,2,12,13)\n            AND  V.event_time <  E.event_time )\nGROUP BY E.user_id;\n\n/* Answer the following: Which products have at least 1,000 views but fewer than 10 purchases during the first quarter of 2024, excluding page ids 1, 2, 12, 13? */\nSELECT\n        P.prod_name,\n        SUM(CASE WHEN E.event_type = 'view'     THEN 1 END) AS view_cnt,\n        SUM(CASE WHEN E.event_type = 'purchase' THEN 1 END) AS buy_cnt\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   E.event_time BETWEEN '2024-01-01' AND '2024-03-31'\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('view','purchase')\nGROUP BY P.prod_id\nHAVING  view_cnt >= 1000\n   AND  buy_cnt  < 10;\n\n/* Answer the following: Compute the average number of hours between a product\u2019s first view and its first purchase, considering events in 2023 and ignoring page ids 1, 2, 12, 13. */\nSELECT\n        P.prod_name,\n        AVG(TIMESTAMPDIFF(HOUR,\n              MIN(CASE WHEN E.event_type = 'view'     THEN E.event_time END),\n              MIN(CASE WHEN E.event_type = 'purchase' THEN E.event_time END))) AS avg_hours_to_buy\nFROM    product_events AS E\nJOIN    products       AS P ON P.prod_id = E.product_id\nWHERE   YEAR(E.event_time) = 2023\n  AND   E.page_id NOT IN (1,2,12,13)\n  AND   E.event_type IN ('view','purchase')\nGROUP BY P.prod_id\nHAVING  MIN(CASE WHEN E.event_type = 'purchase' THEN E.event_time END) IS NOT NULL;\n\n/* Answer the following: Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "evidence": "",
            "raw_question": "For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Between January 2018 and December 2018, which interest recorded the highest average composition-to-index ratio, and what was that ratio?  */\nSELECT interest ,\n       AVG(composition / NULLIF(index_value, 0)) AS avg_comp_ratio\nFROM   interest_monthly\nWHERE  date BETWEEN '2018-01-01' AND '2018-12-31'\nGROUP  BY interest\nORDER  BY avg_comp_ratio DESC\nLIMIT  1;\n\n/* Answer the following: For every month in 2019, list the interest whose composition-to-index ratio ranked in the bottom 3 and give its ratio.  */\nSELECT month_start,\n       interest,\n       comp_ratio\nFROM  (\n        SELECT DATE_TRUNC('month', date) AS month_start,\n               interest,\n               AVG(composition / NULLIF(index_value,0)) AS comp_ratio,\n               DENSE_RANK() OVER (PARTITION BY DATE_TRUNC('month',date)\n                                  ORDER BY AVG(composition / NULLIF(index_value,0))) AS rnk\n        FROM   interest_monthly\n        WHERE  date BETWEEN '2019-01-01' AND '2019-12-31'\n        GROUP  BY month_start, interest\n      ) AS ranked\nWHERE  rnk <= 3\nORDER BY month_start, rnk;\n\n/* Answer the following: What were the three interests that contributed the largest share of total composition (composition / index_value) during Q2-2019 (April\u2013June 2019)?  */\nSELECT interest,\n       SUM(composition / NULLIF(index_value,0))  AS total_share\nFROM   interest_monthly\nWHERE  date BETWEEN '2019-04-01' AND '2019-06-30'\nGROUP  BY interest\nORDER  BY total_share DESC\nLIMIT  3;\n\n/* Answer the following: Show the month-by-month change in the maximum composition-to-index ratio from September 2018 to August 2019 (current month max minus previous month max).  */\nWITH monthly_max AS (\n    SELECT DATE_TRUNC('month', date)                   AS mth,\n           MAX(composition / NULLIF(index_value,0))    AS max_ratio\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2018-09-01' AND '2019-08-31'\n    GROUP  BY mth\n)\nSELECT mth,\n       max_ratio,\n       max_ratio - LAG(max_ratio) OVER (ORDER BY mth)  AS month_over_month_change\nFROM   monthly_max\nORDER  BY mth;\n\n/* Answer the following: In July 2019, what was the cumulative (year-to-date) average composition-to-index ratio for each interest?  */\nSELECT interest,\n       AVG(composition / NULLIF(index_value,0)) AS ytd_avg_ratio\nFROM   interest_monthly\nWHERE  date BETWEEN '2019-01-01' AND '2019-07-31'\nGROUP  BY interest\nORDER  BY ytd_avg_ratio DESC;\n\n/* Answer the following: List the top interest each month from January 2017 to December 2019 by composition-to-index ratio together with the previous month\u2019s top interest.  */\nWITH month_rank AS (\n    SELECT DATE_TRUNC('month', date)                     AS mth,\n           interest,\n           AVG(composition / NULLIF(index_value,0))      AS comp_ratio,\n           ROW_NUMBER() OVER (PARTITION BY DATE_TRUNC('month', date)\n                              ORDER BY AVG(composition / NULLIF(index_value,0)) DESC) AS rn\n    FROM   interest_monthly\n    WHERE  date BETWEEN '2017-01-01' AND '2019-12-31'\n    GROUP  BY mth, interest\n)\nSELECT m1.mth,\n       m1.interest          AS top_interest,\n       m1.comp_ratio        AS top_ratio,\n       LAG(m1.interest) OVER (ORDER BY m1.mth)       AS prev_top_interest,\n       LAG(m1.comp_ratio) OVER (ORDER BY m1.mth)     AS prev_top_ratio\nFROM   month_rank AS m1\nWHERE  rn = 1\nORDER  BY m1.mth;\n\n/* Answer the following: Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "evidence": "",
            "raw_question": "For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the maximum composition value ever recorded, and which interest category and month does it correspond to? */\nSELECT time, interest_name, composition_value\nFROM interest_composition\nORDER BY composition_value DESC\nLIMIT 1;\n\n/* Answer the following: In which month did the overall average composition value across all interest categories reach its peak, and what was that average value? */\nSELECT time, AVG(composition_value) AS avg_comp\nFROM interest_composition\nGROUP BY time\nORDER BY avg_comp DESC\nLIMIT 1;\n\n/* Answer the following: List the top 5 interest categories with the highest average composition value for the entire period. */\nSELECT interest_name, AVG(composition_value) AS avg_comp\nFROM interest_composition\nGROUP BY interest_name\nORDER BY avg_comp DESC\nLIMIT 5;\n\n/* Answer the following: How many distinct interest categories are tracked in the data set? */\nSELECT COUNT(DISTINCT interest_name)\nFROM interest_composition;\n\n/* Answer the following: Identify the interest categories that never fell below a composition value of 20 in any month. */\nSELECT interest_name\nFROM interest_composition\nGROUP BY interest_name\nHAVING MIN(composition_value) >= 20;\n\n/* Answer the following: For each interest category, show the month when its composition value was the highest together with that value. */\nSELECT ic1.time, ic1.interest_name, ic1.composition_value\nFROM interest_composition AS ic1\nJOIN (\n    SELECT interest_name, MAX(composition_value) AS max_val\n    FROM interest_composition\n    GROUP BY interest_name\n) AS ic2\nON ic1.interest_name = ic2.interest_name\nAND ic1.composition_value = ic2.max_val;\n\n/* Answer the following: Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Could you calculate each user\u2019s average balance over the past 30 days, computed daily? Then, for each month (based on the 1st of each month), find the highest of these daily averages for each user. Add up these maximum values across all users for each month as the final result. Please use the first month as a baseline for previous balances and exclude it from the output.",
            "evidence": "",
            "raw_question": "Could you calculate each user\u2019s average balance over the past 30 days, computed daily? Then, for each month (based on the 1st of each month), find the highest of these daily averages for each user. Add up these maximum values across all users for each month as the final result. Please use the first month as a baseline for previous balances and exclude it from the output.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which customer spent the most in 1997, ignoring all discounts? */\nSELECT TOP 1 C.CustomerID,\n             SUM(OD.UnitPrice * OD.Quantity) AS TotalSpent\nFROM Customers            AS C\nJOIN Orders               AS O  ON C.CustomerID = O.CustomerID\nJOIN [Order Details]      AS OD ON O.OrderID    = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1997\nGROUP BY C.CustomerID\nORDER BY TotalSpent DESC\n\n/* Answer the following: What is the total order value handled by each employee in the year 1998, excluding discounts? */\nSELECT E.EmployeeID,\n       SUM(OD.UnitPrice * OD.Quantity) AS TotalValue\nFROM Employees            AS E\nJOIN Orders               AS O  ON E.EmployeeID = O.EmployeeID\nJOIN [Order Details]      AS OD ON O.OrderID    = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY E.EmployeeID\n\n/* Answer the following: How many 1998 orders contained at least one line-item that received a discount? */\nSELECT COUNT(DISTINCT O.OrderID)\nFROM Orders          AS O\nJOIN [Order Details] AS OD ON O.OrderID = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\n  AND OD.Discount > 0\n\n/* Answer the following: What was the average unit price of products actually sold during 1998 (ignoring any list prices that never appeared on an order)? */\nSELECT AVG(OD.UnitPrice) AS AvgSoldPrice_1998\nFROM Orders          AS O\nJOIN [Order Details] AS OD ON O.OrderID = OD.OrderID\nWHERE YEAR(O.OrderDate) = 1998\n\n/* Answer the following: Which product category generated the highest total revenue in 1998, where revenue = UnitPrice * Quantity and discounts are ignored? */\nSELECT TOP 1 CAT.CategoryName,\n             SUM(OD.UnitPrice * OD.Quantity) AS Revenue\nFROM Categories       AS CAT\nJOIN Products         AS P  ON CAT.CategoryID = P.CategoryID\nJOIN [Order Details]  AS OD ON P.ProductID    = OD.ProductID\nJOIN Orders           AS O  ON OD.OrderID     = O.OrderID\nWHERE YEAR(O.OrderDate) = 1998\nGROUP BY CAT.CategoryName\nORDER BY Revenue DESC\n\n/* Answer the following: How many customers placed more than five separate orders during 1998? */\nSELECT COUNT(*) \nFROM (\n    SELECT C.CustomerID\n    FROM Customers AS C\n    JOIN Orders    AS O ON C.CustomerID = O.CustomerID\n    WHERE YEAR(O.OrderDate) = 1998\n    GROUP BY C.CustomerID\n    HAVING COUNT(*) > 5\n) AS Frequent1998\n\n/* Answer the following: Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "n_examples": 6,
            "db_id": "northwind"
        },
        {
            "question": "For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "evidence": "",
            "raw_question": "For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which employee has processed the highest number of orders in total? */\nSELECT EmployeeID, COUNT(*) AS total_orders\nFROM Orders\nGROUP BY EmployeeID\nORDER BY total_orders DESC\nLIMIT 1;\n\n/* Answer the following: List the five customers who have placed the most late orders (where an order is late when ShippedDate >= RequiredDate). Show each customer\u2019s ID and the number of late orders. */\nSELECT CustomerID, COUNT(*) AS late_orders\nFROM Orders\nWHERE ShippedDate >= RequiredDate\nGROUP BY CustomerID\nORDER BY late_orders DESC\nLIMIT 5;\n\n/* Answer the following: How many orders were placed in each month of the year 1997?  */\nSELECT MONTH(OrderDate) AS month, COUNT(*) AS order_count\nFROM Orders\nWHERE YEAR(OrderDate) = 1997\nGROUP BY MONTH(OrderDate)\nORDER BY month;\n\n/* Answer the following: What is the average order value (\u03a3 UnitPrice \u00d7 Quantity \u00d7 (1-Discount)) for the orders handled by employee 5? */\nSELECT AVG(order_total) AS avg_order_value\nFROM (\n    SELECT O.OrderID,\n           SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS order_total\n    FROM Orders        AS O\n    JOIN OrderDetails  AS OD ON O.OrderID = OD.OrderID\n    WHERE O.EmployeeID = 5\n    GROUP BY O.OrderID\n) AS t;\n\n/* Answer the following: Which product has generated the highest revenue in late orders (ShippedDate >= RequiredDate)?  Provide the product ID and the total revenue from those late orders. */\nSELECT OD.ProductID,\n       SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS total_revenue\nFROM Orders       AS O\nJOIN OrderDetails AS OD ON O.OrderID = OD.OrderID\nWHERE O.ShippedDate >= O.RequiredDate\nGROUP BY OD.ProductID\nORDER BY total_revenue DESC\nLIMIT 1;\n\n/* Answer the following: Among customers located in the USA, what percentage of their orders were shipped on time (ShippedDate < RequiredDate)? */\nSELECT O.CustomerID,\n       SUM(CASE WHEN O.ShippedDate < O.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS on_time_percentage\nFROM Orders     AS O\nJOIN Customers  AS C ON O.CustomerID = C.CustomerID\nWHERE C.Country = 'USA'\nGROUP BY O.CustomerID;\n\n/* Answer the following: Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "n_examples": 6,
            "db_id": "northwind"
        },
        {
            "question": "Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "evidence": "",
            "raw_question": "Can you provide a breakdown of how many times each product was viewed, how many times they were added to the shopping cart, and how many times they were left in the cart without being purchased? Also, give me the count of actual purchases for each product. Ensure that products with a page id in (1, 2, 12, 13) are filtered out.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: For every movie, list its title together with the number of female actors in the cast. */\nSELECT M.title ,\n       COUNT(*) AS female_actor_cnt\nFROM Movie         AS M\nJOIN Cast          AS C ON C.movie_id = M.id\nJOIN Actor         AS A ON A.id       = C.actor_id\nWHERE A.gender = 'Female'\nGROUP BY M.id , M.title\n\n/* Answer the following: How many movies released before 2000 had no male actors in their casts (actors whose gender is either \u201cMale\u201d or \u201cNone\u201d are considered non-female)? */\nSELECT COUNT(*) \nFROM Movie AS M\nWHERE CAST(RIGHT(M.year , 4) AS INT) < 2000\n  AND NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender IN ('Male' , 'None')\n      )\n\n/* Answer the following: What is the average rating of movies whose casts contain only actors whose gender is explicitly specified (no actor with gender = 'None')? */\nSELECT AVG(M.rating)\nFROM Movie AS M\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender = 'None'\n      )\n\n/* Answer the following: List the names of directors who have made at least three movies whose casts are exclusively female. */\nSELECT D.name\nFROM Director        AS D\nJOIN Movie_Director  AS MD ON MD.director_id = D.id\nJOIN Movie           AS M  ON M.id          = MD.movie_id\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM Cast  AS C\n        JOIN Actor AS A ON A.id = C.actor_id\n        WHERE C.movie_id = M.id\n          AND A.gender IN ('Male' , 'None')\n      )\nGROUP BY D.id , D.name\nHAVING COUNT(DISTINCT M.id) >= 3\n\n/* Answer the following: For each decade, compute the percentage of movies that feature at least one female actor.  Show the decade, total movies in that decade, and the percentage with \u22651 female. */\nWITH decade_movies AS (\n     SELECT (CAST(RIGHT(year , 4) AS INT) / 10) * 10 AS decade ,\n            id\n     FROM Movie\n)\nSELECT dm.decade ,\n       COUNT(*)                                AS total_movies ,\n       100.0 * COUNT(DISTINCT mf.movie_id) / COUNT(*)  AS pct_with_female\nFROM decade_movies AS dm\nLEFT JOIN (\n        SELECT DISTINCT M.id AS movie_id\n        FROM Movie  AS M\n        JOIN Cast   AS C ON C.movie_id = M.id\n        JOIN Actor  AS A ON A.id       = C.actor_id\n        WHERE A.gender = 'Female'\n) AS mf   ON mf.movie_id = dm.id\nGROUP BY dm.decade\nORDER BY dm.decade\n\n/* Answer the following: List the titles of movies that have more male than female actors, ordered by the difference (male \u2013 female) in descending order. */\nWITH gender_cnt AS (\n     SELECT M.id ,\n            SUM(CASE WHEN A.gender = 'Male'   THEN 1 ELSE 0 END) AS male_cnt ,\n            SUM(CASE WHEN A.gender = 'Female' THEN 1 ELSE 0 END) AS female_cnt\n     FROM Movie AS M\n     JOIN Cast  AS C ON C.movie_id = M.id\n     JOIN Actor AS A ON A.id       = C.actor_id\n     GROUP BY M.id\n)\nSELECT M.title ,\n       gc.male_cnt - gc.female_cnt AS male_minus_female\nFROM gender_cnt AS gc\nJOIN Movie      AS M ON M.id = gc.id\nWHERE gc.male_cnt > gc.female_cnt\nORDER BY male_minus_female DESC\n\n/* Answer the following: For each year, calculate the percentage of films that had exclusively female actors (meaning no male actors and no actors with unknown/unspecified gender). Consider actors with gender marked as 'Male' or 'None' as non-female. For the results, display the year, the total number of movies in that year, and the percentage of movies with exclusively female actors. Extract the year from the Movie.year field by taking the last 4 characters and converting to a number.",
            "n_examples": 6,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "evidence": "",
            "raw_question": "Please analyze our interest data from September 2018 to August 2019. For each month, calculate the average composition for each interest by dividing the composition by the index value. Identify the interest with the highest average composition value each month and report its average composition as the max index composition for that month. Compute the three-month rolling average of these monthly max index compositions. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the names and max index compositions of the top interests from one month ago and two months ago.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many movies were released in the year 1995? */\nSELECT COUNT(*) \nFROM movie\nWHERE year = 1995;\n\n/* Answer the following: List the names of the 3 directors who have directed the largest number of movies. */\nSELECT p.name\nFROM director AS d\nJOIN person  AS p ON d.person_id = p.id\nGROUP BY p.name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For every genre, what is the average movie rank of films released after the year 2000? */\nSELECT g.genre , AVG(m.rank) AS avg_rank\nFROM movie   AS m\nJOIN genres  AS g ON m.id = g.movie_id\nWHERE m.year > 2000\nGROUP BY g.genre;\n\n/* Answer the following: Which actor has appeared in the greatest number of films released before 1980?  */\nSELECT p.name\nFROM movie_cast AS mc\nJOIN movie      AS m ON mc.movie_id = m.id\nJOIN person     AS p ON mc.person_id = p.id\nWHERE m.year < 1980\nGROUP BY p.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: What is the earliest year in which more than 10 horror movies were released? */\nSELECT m.year\nFROM movie  AS m\nJOIN genres AS g ON m.id = g.movie_id\nWHERE g.genre = 'Horror'\nGROUP BY m.year\nHAVING COUNT(*) > 10\nORDER BY m.year\nLIMIT 1;\n\n/* Answer the following: Return all pairs of actors who have co-starred together in at least 5 different movies. */\nSELECT p1.name AS actor1 , p2.name AS actor2\nFROM movie_cast AS mc1\nJOIN movie_cast AS mc2 \n     ON mc1.movie_id = mc2.movie_id \n    AND mc1.person_id < mc2.person_id\nJOIN person AS p1 ON mc1.person_id = p1.id\nJOIN person AS p2 ON mc2.person_id = p2.id\nGROUP BY p1.name , p2.name\nHAVING COUNT(*) >= 5;\n\n/* Answer the following: Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "n_examples": 6,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "evidence": "",
            "raw_question": "Identify the top 10 and bottom 10 interest categories based on their highest composition values across all months. For each category, display the time(MM-YYYY), interest name, and the composition value",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many actors have at least one streak of 10 consecutive years in which they released a movie every single year? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year AS yr\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), seq AS (\n    SELECT actor_id ,\n           yr ,\n           ROW_NUMBER() OVER (PARTITION BY actor_id ORDER BY yr) AS rn\n    FROM actor_years\n), grp AS (\n    SELECT actor_id ,\n           yr ,\n           yr - rn AS grp_key\n    FROM seq\n), streaks AS (\n    SELECT actor_id , COUNT(*) AS streak_len\n    FROM grp\n    GROUP BY actor_id , grp_key\n)\nSELECT COUNT(DISTINCT actor_id)\nFROM streaks\nWHERE streak_len >= 10;\n\n/* Answer the following: Which actor experienced the single longest gap (in years) between any two consecutive movie appearances? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n)\nSELECT a.name\nFROM (\n      SELECT actor_id , MAX(gap) AS max_gap\n      FROM gaps\n      GROUP BY actor_id\n      ORDER BY max_gap DESC\n      LIMIT 1\n) AS g\nJOIN Actor AS a ON a.actor_id = g.actor_id;\n\n/* Answer the following: List the titles of all movies whose entire cast is made up of actors that never had a career gap longer than two years. */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n), steady_actors AS (\n    SELECT actor_id\n    FROM gaps\n    GROUP BY actor_id\n    HAVING MAX(COALESCE(gap,1)) <= 2\n)\nSELECT DISTINCT m.title\nFROM Movie AS m\nJOIN Cast  AS c ON c.movie_id = m.movie_id\nGROUP BY m.movie_id , m.title\nHAVING SUM(CASE WHEN c.actor_id NOT IN (SELECT actor_id FROM steady_actors) THEN 1 ELSE 0 END) = 0;\n\n/* Answer the following: How many actors have careers spanning at least twenty calendar years between their first and last film? */\nWITH career AS (\n    SELECT c.actor_id ,\n           MIN(m.year) AS first_year ,\n           MAX(m.year) AS last_year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id\n)\nSELECT COUNT(*)\nFROM career\nWHERE last_year - first_year >= 20;\n\n/* Answer the following: Give the names of actors who appeared in more than five different movies during the same calendar year. */\nWITH appearances AS (\n    SELECT c.actor_id , m.year , COUNT(*) AS film_count\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n)\nSELECT DISTINCT a.name\nFROM appearances AS p\nJOIN Actor AS a ON a.actor_id = p.actor_id\nWHERE p.film_count > 5;\n\n/* Answer the following: For each decade, how many actors debuted in that decade and never had a gap longer than three years anywhere in their careers? */\nWITH actor_years AS (\n    SELECT c.actor_id , m.year\n    FROM Cast AS c\n    JOIN Movie AS m ON m.movie_id = c.movie_id\n    GROUP BY c.actor_id , m.year\n), gaps AS (\n    SELECT actor_id ,\n           year - LAG(year) OVER (PARTITION BY actor_id ORDER BY year) AS gap\n    FROM actor_years\n), steady AS (\n    SELECT actor_id\n    FROM gaps\n    GROUP BY actor_id\n    HAVING MAX(COALESCE(gap,1)) <= 3\n), debut AS (\n    SELECT actor_id , MIN(year) AS first_year\n    FROM actor_years\n    GROUP BY actor_id\n)\nSELECT (first_year/10)*10 AS decade ,\n       COUNT(*)            AS num_actors\nFROM debut\nWHERE actor_id IN (SELECT actor_id FROM steady)\nGROUP BY (first_year/10)*10\nORDER BY decade;\n\n/* Answer the following: From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "n_examples": 6,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "evidence": "",
            "raw_question": "Considering only the customers who placed orders in 1998, calculate the total amount each customer spent by summing the unit price multiplied by the quantity of all products in their orders, excluding any discounts. Assign each customer to a spending group based on the customer group thresholds, and determine how many customers are in each spending group and what percentage of the total number of customers who placed orders in 1998 each group represents.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which actor has appeared in the highest number of movies directed by Christopher Nolan? */\nSELECT a.name\nFROM actor AS a\nJOIN cast AS c          ON a.id = c.actor_id\nJOIN movie_direction md ON c.movie_id = md.movie_id\nJOIN director      d    ON md.director_id = d.id\nWHERE d.name = 'Christopher Nolan'\nGROUP BY a.id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the five directors who have collaborated most frequently with Amitabh Bachchan. */\nSELECT d.name\nFROM director d\nJOIN movie_direction md ON d.id = md.director_id\nJOIN cast c             ON md.movie_id = c.movie_id\nJOIN actor a            ON c.actor_id = a.id\nWHERE a.name = 'Amitabh Bachchan'\nGROUP BY d.id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: How many actors have worked in more than three movies directed by Steven Spielberg? */\nSELECT COUNT(*)\nFROM (\n    SELECT a.id\n    FROM actor a\n    JOIN cast c              ON a.id = c.actor_id\n    JOIN movie_direction md  ON c.movie_id = md.movie_id\n    JOIN director d          ON md.director_id = d.id\n    WHERE d.name = 'Steven Spielberg'\n    GROUP BY a.id\n    HAVING COUNT(*) > 3\n) AS freq_actor;\n\n/* Answer the following: Which actors have appeared in at least one movie directed by both Quentin Tarantino and Martin Scorsese? */\nSELECT a.name\nFROM actor a\nWHERE a.id IN (\n        SELECT c.actor_id\n        FROM cast c\n        JOIN movie_direction md ON c.movie_id = md.movie_id\n        JOIN director d         ON md.director_id = d.id\n        WHERE d.name = 'Quentin Tarantino'\n)\nAND a.id IN (\n        SELECT c.actor_id\n        FROM cast c\n        JOIN movie_direction md ON c.movie_id = md.movie_id\n        JOIN director d         ON md.director_id = d.id\n        WHERE d.name = 'Martin Scorsese'\n);\n\n/* Answer the following: Give the title and year of the earliest movie in which Shah Rukh Khan acted under the direction of Karan Johar. */\nSELECT m.title, m.year\nFROM movie m\nJOIN cast c              ON m.id = c.movie_id\nJOIN actor a             ON c.actor_id = a.id\nJOIN movie_direction md  ON m.id = md.movie_id\nJOIN director d          ON md.director_id = d.id\nWHERE a.name = 'Shah Rukh Khan'\n  AND d.name = 'Karan Johar'\nORDER BY m.year ASC\nLIMIT 1;\n\n/* Answer the following: Which director has worked with the largest number of distinct actors? */\nSELECT d.name\nFROM director d\nJOIN movie_direction md ON d.id = md.director_id\nJOIN cast c             ON md.movie_id = c.movie_id\nGROUP BY d.id\nORDER BY COUNT(DISTINCT c.actor_id) DESC\nLIMIT 1;\n\n/* Answer the following: I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "n_examples": 6,
            "db_id": "Db-IMDB"
        },
        {
            "question": "Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "evidence": "",
            "raw_question": "Among employees who have more than 50 total orders, which three have the highest percentage of late orders, where an order is considered late if the shipped date is on or after its required date? Please list each employee's ID, the number of late orders, and the corresponding late-order percentage.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many movies starring Shahrukh Khan have an IMDb rating higher than 8? */\nSELECT COUNT(DISTINCT M.id)\nFROM movie AS M\nJOIN cast AS C     ON M.id = C.movie_id\nJOIN actor AS A    ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\n  AND M.imdb_rating > 8;\n\n/* Answer the following: List the titles of movies released in 2010 that feature both Shahrukh Khan and Kajol. */\nSELECT DISTINCT M.title\nFROM movie  AS M\nJOIN cast   AS C1 ON M.id = C1.movie_id\nJOIN actor  AS A1 ON C1.actor_id = A1.id\nJOIN cast   AS C2 ON M.id = C2.movie_id\nJOIN actor  AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name = 'Kajol'\n  AND M.year = 2010;\n\n/* Answer the following: Which director has worked with Shahrukh Khan on the greatest number of films? */\nSELECT D.name\nFROM director        AS D\nJOIN movie_director  AS MD ON D.id = MD.director_id\nJOIN movie           AS M  ON M.id = MD.movie_id\nJOIN cast            AS C  ON M.id = C.movie_id\nJOIN actor           AS A  ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\nGROUP BY D.id\nORDER BY COUNT(DISTINCT M.id) DESC\nLIMIT 1;\n\n/* Answer the following: What is the average box-office gross of Shahrukh Khan movies released between 2000 and 2009? */\nSELECT AVG(M.box_office)\nFROM movie AS M\nJOIN cast  AS C ON M.id = C.movie_id\nJOIN actor AS A ON C.actor_id = A.id\nWHERE A.name = 'Shahrukh Khan'\n  AND M.year BETWEEN 2000 AND 2009;\n\n/* Answer the following: Which actor (excluding Shahrukh Khan) has appeared most frequently alongside him? */\nSELECT A2.name\nFROM cast  AS C1\nJOIN actor AS A1 ON C1.actor_id = A1.id\nJOIN cast  AS C2 ON C1.movie_id = C2.movie_id\nJOIN actor AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name <> 'Shahrukh Khan'\nGROUP BY A2.id\nORDER BY COUNT(DISTINCT C1.movie_id) DESC\nLIMIT 1;\n\n/* Answer the following: How many actors have a Shahrukh number of 1 (they have acted in at least one film with him)? */\nSELECT COUNT(DISTINCT A2.id)\nFROM cast  AS C1\nJOIN actor AS A1 ON C1.actor_id = A1.id\nJOIN cast  AS C2 ON C1.movie_id = C2.movie_id\nJOIN actor AS A2 ON C2.actor_id = A2.id\nWHERE A1.name = 'Shahrukh Khan'\n  AND A2.name <> 'Shahrukh Khan';\n\n/* Answer the following: Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "n_examples": 6,
            "db_id": "Db-IMDB"
        },
        {
            "question": "For each year, calculate the proportion of films that had exclusively female actors, considering actors with gender 'Male' or 'None' (i.e., unknown or unspecified gender) as non-female. Show the proportion of female-actor-only films and the total number of all films for each year.",
            "evidence": "",
            "raw_question": "For each year, calculate the proportion of films that had exclusively female actors, considering actors with gender 'Male' or 'None' (i.e., unknown or unspecified gender) as non-female. Show the proportion of female-actor-only films and the total number of all films for each year.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many web orders were placed in calendar year 2023? calendar year 2023 refers to order_date BETWEEN '2023-01-01' AND '2023-12-31' */\nSELECT COUNT(*) AS orders_2023\nFROM web_sales\nWHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n/* Answer the following: For each region, what is the average order value rounded to two decimals? average order value refers to AVG(order_amount); */\nSELECT r.region_name,\n       ROUND(AVG(w.order_amount), 2) AS avg_order_value\nFROM regions AS r\nJOIN web_sales AS w ON w.region_id = r.region_id\nGROUP BY r.region_name;\n\n/* Answer the following: Which sales representative generated the highest total web sales overall? highest total web sales refers to MAX(total_amount) calculated per sales_rep_id; */\nSELECT s.rep_name,\n       SUM(w.order_amount) AS total_sales\nFROM sales_reps AS s\nJOIN web_sales  AS w ON w.sales_rep_id = s.sales_rep_id\nGROUP BY s.rep_name\nHAVING SUM(w.order_amount) = (\n    SELECT MAX(total_rep_sales)\n    FROM (\n        SELECT SUM(order_amount) AS total_rep_sales\n        FROM web_sales\n        GROUP BY sales_rep_id\n    ) AS x\n);\n\n/* Answer the following: What is the number of customers who have placed more than 10 web orders? placed more than 10 web orders refers to COUNT(web_sales.ws_order_id) > 10 */\nSELECT COUNT(*) AS frequent_customers\nFROM (\n    SELECT customer_id\n    FROM web_sales\n    GROUP BY customer_id\n    HAVING COUNT(ws_order_id) > 10\n) AS t;\n\n/* Answer the following: List the top 5 regions with the highest total web\u2010sales amount. highest total web\u2010sales amount refers to SUM(order_amount) ordered DESC; top 5 refers to LIMIT 5 */\nSELECT r.region_name,\n       SUM(w.order_amount) AS total_sales\nFROM regions AS r\nJOIN web_sales AS w ON w.region_id = r.region_id\nGROUP BY r.region_name\nORDER BY total_sales DESC\nLIMIT 5;\n\n/* Answer the following: In which month of 2022 were the most web orders placed? month refers to EXTRACT(MONTH FROM order_date); most web orders refers to MAX(order_count) per month */\nSELECT EXTRACT(MONTH FROM order_date) AS order_month,\n       COUNT(*) AS order_count\nFROM web_sales\nWHERE order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY order_month\nORDER BY order_count DESC\nLIMIT 1;\n\n/* Answer the following: Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "n_examples": 6,
            "db_id": "education_business"
        },
        {
            "question": "Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "evidence": "",
            "raw_question": "Could you analyze our data and identify which ten-year period starting from any movie release year present in the data had the largest number of films, considering consecutive ten-year periods beginning at each unique year? Only output the start year and the total count for that specific period.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: List the id, first name and last name of the bowlers who have won at least one game with a handicap score lower than 180 at Bolero Lanes. */\nSELECT DISTINCT B.BowlerID ,\n                B.FirstName ,\n                B.LastName\nFROM Bowler     AS B\nJOIN Game       AS G ON B.BowlerID = G.BowlerID\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND G.HandicapScore < 180\n  AND V.VenueName = 'Bolero Lanes';\n\n/* Answer the following: What is the average handicap score of winning games played at Totem Lanes during tournaments held in 2021? */\nSELECT AVG(G.HandicapScore)\nFROM Game       AS G\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND V.VenueName = 'Totem Lanes'\n  AND strftime('%Y', T.TournamentDate) = '2021';\n\n/* Answer the following: Give each bowler\u2019s id, first name, last name and the number of games they have won at Thunderbird Lanes. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName ,\n       COUNT(*)  AS WinsAtThunderbird\nFROM Bowler     AS B\nJOIN Game       AS G ON B.BowlerID = G.BowlerID\nJOIN Match      AS M ON G.MatchID  = M.MatchID\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nWHERE G.WinnerFlag = 1\n  AND V.VenueName = 'Thunderbird Lanes'\nGROUP BY B.BowlerID , B.FirstName , B.LastName;\n\n/* Answer the following: Which bowler has the highest total number of winning games across all venues? Return their id, first name, last name and total wins. */\nSELECT B.BowlerID ,\n       B.FirstName ,\n       B.LastName ,\n       COUNT(*) AS TotalWins\nFROM Bowler AS B\nJOIN Game   AS G ON B.BowlerID = G.BowlerID\nWHERE G.WinnerFlag = 1\nGROUP BY B.BowlerID , B.FirstName , B.LastName\nORDER BY TotalWins DESC\nLIMIT 1;\n\n/* Answer the following: List the tournament id, date and venue where every winning handicap score was 200 or lower. */\nSELECT T.TournamentID ,\n       T.TournamentDate ,\n       V.VenueName\nFROM Tournament AS T\nJOIN Venue      AS V ON T.VenueID = V.VenueID\nJOIN Match      AS M ON M.TournamentID = T.TournamentID\nJOIN Game       AS G ON G.MatchID  = M.MatchID\nWHERE G.WinnerFlag = 1\nGROUP BY T.TournamentID , T.TournamentDate , V.VenueName\nHAVING MAX(G.HandicapScore) <= 200;\n\n/* Answer the following: Find the matches in which the same bowler won every game. Return tournament id, match number and that bowler\u2019s id. */\nSELECT T.TournamentID ,\n       M.MatchNumber ,\n       MIN(G.BowlerID) AS BowlerID   -- all winners are the same so MIN = MAX\nFROM Match      AS M\nJOIN Tournament AS T ON M.TournamentID = T.TournamentID\nJOIN Game       AS G ON G.MatchID      = M.MatchID\nWHERE G.WinnerFlag = 1\nGROUP BY M.MatchID\nHAVING COUNT(DISTINCT G.BowlerID) = 1;\n\n/* Answer the following: List the bowlers (including their ID, first name, and last name), match number, game number, handicap score, tournament date, and location for only those bowlers who have won games with a handicap score of 190 or less at all three venues: Thunderbird Lanes, Totem Lanes, and Bolero Lanes. Only include the specific game records where they won with a handicap score of 190 or less at these three locations.",
            "n_examples": 6,
            "db_id": "BowlingLeague"
        },
        {
            "question": "From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "evidence": "",
            "raw_question": "From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the average grade for all completed Mathematics courses? completed refers to ClassStatus = 2; */\nSELECT AVG(E.Grade)\nFROM Enrollments AS E\nJOIN Courses AS C ON E.CourseID = C.ID\nWHERE C.Department = 'Mathematics' \n  AND E.ClassStatus = 2;\n\n/* Answer the following: List the first and last names of students who have completed at least three Science courses. completed refers to ClassStatus = 2; at least three refers to COUNT(*) \u2265 3; */\nSELECT S.FirstName , S.LastName\nFROM Students AS S\nJOIN Enrollments AS E ON S.ID = E.StudentID\nJOIN Courses    AS C ON E.CourseID = C.ID\nWHERE C.Department = 'Science'\n  AND E.ClassStatus = 2\nGROUP BY S.ID\nHAVING COUNT(*) >= 3;\n\n/* Answer the following: What is the highest grade achieved in any completed History course? completed refers to ClassStatus = 2; highest grade refers to MAX(Grade); */\nSELECT MAX(E.Grade)\nFROM Enrollments AS E\nJOIN Courses AS C ON E.CourseID = C.ID\nWHERE C.Department = 'History'\n  AND E.ClassStatus = 2;\n\n/* Answer the following: For every English course, give the course name and the number of students who have completed it. completed refers to ClassStatus = 2; */\nSELECT C.CourseName ,\n       COUNT(*) AS CompletedStudents\nFROM Courses     AS C\nJOIN Enrollments AS E ON C.ID = E.CourseID\nWHERE C.Department = 'English'\n  AND E.ClassStatus = 2\nGROUP BY C.ID , C.CourseName;\n\n/* Answer the following: Which students have grades higher than the overall average grade of all completed English courses? completed refers to ClassStatus = 2; */\nSELECT DISTINCT S.FirstName , S.LastName\nFROM Students     AS S\nJOIN Enrollments  AS E ON S.ID = E.StudentID\nJOIN Courses      AS C ON E.CourseID = C.ID\nWHERE C.Department = 'English'\n  AND E.ClassStatus = 2\n  AND E.Grade >\n      ( SELECT AVG(E2.Grade)\n        FROM Enrollments AS E2\n        JOIN Courses     AS C2 ON E2.CourseID = C2.ID\n        WHERE C2.Department = 'English'\n          AND E2.ClassStatus = 2 );\n\n/* Answer the following: Which student has the lowest average grade across all of their completed courses? completed refers to ClassStatus = 2; lowest average refers to MIN(AVG(Grade)); */\nSELECT S.LastName\nFROM Students    AS S\nJOIN Enrollments AS E ON S.ID = E.StudentID\nWHERE E.ClassStatus = 2\nGROUP BY S.ID\nORDER BY AVG(E.Grade) ASC\nLIMIT 1;\n\n/* Answer the following: Could you provide a list of last names for all students who have completed English courses (where completion is defined as having a ClassStatus of 2), along with their quintile ranks based on their individual grades in those courses? The quintile should be determined by calculating how many students have grades greater than or equal to each student's grade, then dividing this ranking by the total number of students who completed English courses. The quintiles should be labeled as \"First\" (top 20%), \"Second\" (top 21-40%), \"Third\" (top 41-60%), \"Fourth\" (top 61-80%), and \"Fifth\" (bottom 20%). Please sort the results from highest performing quintile to lowest (First to Fifth).",
            "n_examples": 6,
            "db_id": "school_scheduling"
        },
        {
            "question": "I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "evidence": "",
            "raw_question": "I need you to look into the actor collaborations and tell me how many actors have made more films with Yash Chopra than with any other director. This will help us understand his influence on the industry better.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which musical style is chosen most frequently as a 1st preference? */\nSELECT music_first AS musical_style\nFROM survey\nGROUP BY music_first\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many students selected 'Jazz' in any of their three preference positions? */\nSELECT COUNT(DISTINCT student_id)\nFROM survey\nWHERE music_first = 'Jazz'\n   OR music_second = 'Jazz'\n   OR music_third  = 'Jazz';\n\n/* Answer the following: List every musical style together with the number of times it appears as a 2nd preference. */\nSELECT music_second AS musical_style,\n       COUNT(*)     AS second_pref_count\nFROM survey\nGROUP BY music_second\nORDER BY second_pref_count DESC;\n\n/* Answer the following: Which musical styles were never picked as a 3rd preference? */\nSELECT DISTINCT style\nFROM (\n    SELECT music_first  AS style FROM survey\n    UNION\n    SELECT music_second AS style FROM survey\n) AS top_two\nEXCEPT\nSELECT DISTINCT music_third\nFROM survey;\n\n/* Answer the following: What is the most common ordered pair of 1st-and-2nd preferences? */\nSELECT music_first,\n       music_second,\n       COUNT(*) AS pair_count\nFROM survey\nGROUP BY music_first, music_second\nORDER BY pair_count DESC\nLIMIT 1;\n\n/* Answer the following: For each musical style give its weighted popularity score  \n   (3 points for 1st, 2 points for 2nd, 1 point for 3rd) ordered from highest to lowest. */\nSELECT style,\n       SUM(CASE WHEN pref = 1 THEN 3\n                WHEN pref = 2 THEN 2\n                WHEN pref = 3 THEN 1 END) AS weighted_score\nFROM (\n    SELECT student_id, 1 AS pref, music_first  AS style FROM survey\n    UNION ALL\n    SELECT student_id, 2       , music_second AS style FROM survey\n    UNION ALL\n    SELECT student_id, 3       , music_third  AS style FROM survey\n) AS all_prefs\nGROUP BY style\nORDER BY weighted_score DESC;\n\n/* Answer the following: Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "n_examples": 6,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "evidence": "",
            "raw_question": "Find out how many actors have a 'Shahrukh number' of 2? This means they acted in a film with someone who acted with Shahrukh Khan, but not directly with him.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: List the stage names of entertainers whose first two style strengths match, in order, the first two preferences of at least one customer. */\nSELECT DISTINCT e.stage_name\nFROM entertainers AS e\nJOIN customers     AS c\n     ON e.style_strength_1 = c.style_pref_1\n    AND e.style_strength_2 = c.style_pref_2;\n\n/* Answer the following: What are the last names of customers whose first style preference does not match any style strength of any entertainer? */\nSELECT DISTINCT c.last_name\nFROM customers AS c\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM entertainers AS e\n        WHERE c.style_pref_1 IN (e.style_strength_1,\n                                 e.style_strength_2,\n                                 e.style_strength_3)\n);\n\n/* Answer the following: How many entertainer-customer pairs have all three style strengths or preferences identical, regardless of order? */\nSELECT COUNT(*)\nFROM entertainers AS e\nJOIN customers     AS c\n  ON   e.style_strength_1 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND e.style_strength_2 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND e.style_strength_3 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n   AND c.style_pref_1     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3)\n   AND c.style_pref_2     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3)\n   AND c.style_pref_3     IN (e.style_strength_1, e.style_strength_2, e.style_strength_3);\n\n/* Answer the following: Find every style that appears both as a third strength of an entertainer and as a third preference of a customer. */\nSELECT DISTINCT e.style_strength_3 AS style\nFROM entertainers AS e\nJOIN customers     AS c\n  ON e.style_strength_3 = c.style_pref_3\nWHERE e.style_strength_3 IS NOT NULL;\n\n/* Answer the following: For each entertainer, how many customers share the same first style as the entertainer\u2019s first style strength? */\nSELECT e.stage_name,\n       COUNT(c.customer_id) AS matching_customers\nFROM entertainers AS e\nLEFT JOIN customers AS c\n       ON e.style_strength_1 = c.style_pref_1\nGROUP BY e.stage_name;\n\n/* Answer the following: Show the last names of customers who match at least two style strengths of entertainers that list only two strengths in total. */ \nSELECT DISTINCT c.last_name\nFROM entertainers AS e\nJOIN customers     AS c\n  ON ( e.style_strength_1 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3)\n     AND e.style_strength_2 IN (c.style_pref_1, c.style_pref_2, c.style_pref_3) )\nWHERE e.style_strength_3 IS NULL;\n\n/* Answer the following: Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "n_examples": 6,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "evidence": "",
            "raw_question": "Provide a detailed web sales report for each region, including the number of orders, total sales amount, and the name and sales amount of all sales representatives who achieved the highest total sales amount in that region (include all representatives in case of a tie).",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Compute the total weighted score for every musical style (3 points for every 1st-choice, 2 for 2nd-choice, 1 for 3rd-choice). */\nSELECT \n    Style,\n    SUM(CASE PreferenceSeq \n            WHEN 1 THEN 3 \n            WHEN 2 THEN 2 \n            WHEN 3 THEN 1 \n        END) AS weighted_score\nFROM Musical_Preferences\nGROUP BY Style;\n\n/* Answer the following: Which musical style has the highest total weighted score? */\nSELECT Style\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS S\nORDER BY weighted_score DESC\nLIMIT 1;\n\n/* Answer the following: What is the average of those total weighted scores across all styles that have been ranked at least once? */\nSELECT AVG(weighted_score) AS avg_weighted_score\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS Scores;\n\n/* Answer the following: For each musical style, list its total weighted score together with the absolute difference from the overall average weighted score. */\nSELECT \n    Style,\n    weighted_score,\n    ABS(weighted_score - (\n        SELECT AVG(weighted_score)\n        FROM (\n            SELECT \n                Style,\n                SUM(CASE PreferenceSeq \n                        WHEN 1 THEN 3 \n                        WHEN 2 THEN 2 \n                        WHEN 3 THEN 1 \n                    END) AS weighted_score\n            FROM Musical_Preferences\n            GROUP BY Style\n        ) AS AvgTab\n    )) AS diff_from_avg\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS StyleScores;\n\n/* Answer the following: Which musical style has the greatest absolute difference between its weighted score and the overall average? */\nSELECT Style\nFROM (\n    SELECT \n        Style,\n        SUM(CASE PreferenceSeq \n                WHEN 1 THEN 3 \n                WHEN 2 THEN 2 \n                WHEN 3 THEN 1 \n            END) AS weighted_score\n    FROM Musical_Preferences\n    GROUP BY Style\n) AS T\nORDER BY ABS(weighted_score - (\n    SELECT AVG(weighted_score)\n    FROM (\n        SELECT \n            Style,\n            SUM(CASE PreferenceSeq \n                    WHEN 1 THEN 3 \n                    WHEN 2 THEN 2 \n                    WHEN 3 THEN 1 \n                END) AS weighted_score\n        FROM Musical_Preferences\n        GROUP BY Style\n    ) AS Z\n)) DESC\nLIMIT 1;\n\n/* Answer the following: List the musical styles that were never chosen as a first-choice by any user but were chosen as a second or third choice at least once. */\nSELECT Style\nFROM Musical_Preferences\nGROUP BY Style\nHAVING SUM(CASE WHEN PreferenceSeq = 1 THEN 1 ELSE 0 END) = 0\n   AND SUM(CASE WHEN PreferenceSeq IN (2,3) THEN 1 ELSE 0 END) > 0;\n\n/* Answer the following: Given a database of musical styles and user preferences, where Musical_Preferences contains user rankings of musical styles (PreferenceSeq=1 for first choice, PreferenceSeq=2 for second choice, PreferenceSeq=3 for third choice): Calculate a weighted score for each musical style by assigning 3 points for each time it was ranked as first choice, 2 points for each second choice, and 1 point for each third choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.\t",
            "n_examples": 6,
            "db_id": "EntertainmentAgency"
        },
        {
            "question": "List the bowlers, match number, game number, handicap score, tournament date, and location for only those bowlers who won their game with a handicap score of 190 or less at Thunderbird Lanes, Totem Lanes, and Bolero Lanes.",
            "evidence": "",
            "raw_question": "List the bowlers, match number, game number, handicap score, tournament date, and location for only those bowlers who won their game with a handicap score of 190 or less at Thunderbird Lanes, Totem Lanes, and Bolero Lanes.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the total sales for each salesperson in 2019? */\nSELECT sp.name ,\n       SUM(o.amount) AS total_sales_2019\nFROM   sales_person AS sp\nJOIN   orders       AS o  ON sp.id = o.salesperson_id\nWHERE  strftime('%Y', o.order_date) = '2019'\nGROUP  BY sp.id ;\n\n/* Answer the following: What was the average annual sales quota across all sales-people for the year 2020? */\nSELECT AVG(sq.quota_amount) AS avg_quota_2020\nFROM   sales_quota AS sq\nWHERE  sq.year = 2020 ;\n\n/* Answer the following: Which sales-people exceeded their annual quota in 2018? */\nSELECT sp.name ,\n       SUM(o.amount)            AS total_sales ,\n       sq.quota_amount          AS quota_2018\nFROM   sales_person AS sp\nJOIN   orders       AS o  ON sp.id = o.salesperson_id\nJOIN   sales_quota  AS sq ON sq.salesperson_id = sp.id\nWHERE  sq.year = 2018\n  AND  strftime('%Y', o.order_date) = '2018'\nGROUP  BY sp.id\nHAVING total_sales > quota_2018 ;\n\n/* Answer the following: For each year, how many sales-people achieved at least 110 percent of their quota? */\nSELECT yearly.year ,\n       COUNT(*) AS num_above_110pct\nFROM (\n        SELECT sp.id           AS salesperson_id ,\n               sq.year         AS year ,\n               SUM(o.amount)   AS total_sales ,\n               sq.quota_amount\n        FROM   sales_person  AS sp\n        JOIN   sales_quota   AS sq ON sq.salesperson_id = sp.id\n        JOIN   orders        AS o  ON o.salesperson_id = sp.id\n        WHERE  strftime('%Y', o.order_date) = sq.year\n        GROUP  BY sp.id , sq.year\n     ) AS yearly\nWHERE  total_sales >= 1.10 * quota_amount\nGROUP  BY yearly.year ;\n\n/* Answer the following: Which salesperson beat their quota by the highest percentage in 2021? */\nSELECT sp.name\nFROM   sales_person AS sp\nJOIN (\n        SELECT o.salesperson_id ,\n               (SUM(o.amount) - sq.quota_amount) * 1.0 / sq.quota_amount AS pct_above\n        FROM   orders       AS o\n        JOIN   sales_quota  AS sq ON sq.salesperson_id = o.salesperson_id\n        WHERE  sq.year = 2021\n          AND  strftime('%Y', o.order_date) = '2021'\n        GROUP  BY o.salesperson_id\n     ) AS t ON sp.id = t.salesperson_id\nORDER  BY t.pct_above DESC\nLIMIT 1 ;\n\n/* Answer the following: What were the company-wide total sales for each year? */\nSELECT strftime('%Y', o.order_date) AS year ,\n       SUM(o.amount)                AS company_total_sales\nFROM   orders AS o\nGROUP  BY year ;\n\n/* Answer the following: How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "n_examples": 6,
            "db_id": "AdventureWorks"
        },
        {
            "question": "Could you provide a list of last names for all students who have completed English courses, including their quintile ranks based on their individual grades in those courses (without averaging), where the quintiles are determined by ranking students according to the number of students who have grades greater than or equal to theirs, and sorted from the highest to the lowest grade quintile?",
            "evidence": "",
            "raw_question": "Could you provide a list of last names for all students who have completed English courses, including their quintile ranks based on their individual grades in those courses (without averaging), where the quintiles are determined by ranking students according to the number of students who have grades greater than or equal to theirs, and sorted from the highest to the lowest grade quintile?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which director has made the single longest movie and what is that movie\u2019s duration? */\nSELECT d.director_id,\n       d.name,\n       m.title,\n       m.duration\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nORDER BY m.duration DESC\nLIMIT 1;\n\n/* Answer the following: List the three directors with the highest average movie rating (minimum five movies each). */\nSELECT d.director_id,\n       d.name,\n       ROUND(AVG(m.rating),2) AS avg_rating,\n       COUNT(*)              AS movie_count\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nGROUP BY d.director_id, d.name\nHAVING COUNT(*) >= 5\nORDER BY avg_rating DESC\nLIMIT 3;\n\n/* Answer the following: How many movies did each director release in 2015?  Show directors who released at least one. */\nSELECT d.director_id,\n       d.name,\n       COUNT(*) AS movies_2015\nFROM directors AS d\nJOIN movies AS m ON d.director_id = m.director_id\nWHERE YEAR(m.release_date) = 2015\nGROUP BY d.director_id, d.name;\n\n/* Answer the following: Give the total number of votes received by all movies of \u201cSteven Spielberg\u201d. */\nSELECT SUM(m.votes) AS total_votes\nFROM movies AS m\nJOIN directors AS d ON d.director_id = m.director_id\nWHERE d.name = 'Steven Spielberg';\n\n/* Answer the following: What is the average running time of movies released between 2000 and 2009 (inclusive)? */\nSELECT ROUND(AVG(duration)) AS avg_runtime\nFROM movies\nWHERE YEAR(release_date) BETWEEN 2000 AND 2009;\n\n/* Answer the following: Which five movies have the highest ratio of votes to duration (votes per minute)? */\nSELECT title,\n       votes,\n       duration,\n       ROUND(votes * 1.0 / duration,2) AS votes_per_min\nFROM movies\nWHERE duration > 0\nORDER BY votes_per_min DESC\nLIMIT 5;\n\n/* Answer the following: Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "n_examples": 6,
            "db_id": "imdb_movies"
        },
        {
            "question": "Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "evidence": "",
            "raw_question": "Could you list each musical style with the number of times it appears as a 1st, 2nd, or 3rd preference in a single row per style?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the total dollar amount spent on Bitcoin purchases in 2022 for every region? */\nSELECT region ,\n       SUM(amount_usd) AS total_spent_2022\nFROM   bitcoin_purchases\nWHERE  EXTRACT (YEAR FROM purchase_date) = 2022\nGROUP  BY region ;\n\n/* Answer the following: Which three regions paid the highest average price per Bitcoin in 2023, considering only transactions of at least 10 BTC? */\nSELECT region ,\n       AVG(amount_usd / quantity) AS avg_price_2023\nFROM   bitcoin_purchases\nWHERE  EXTRACT (YEAR FROM purchase_date) = 2023\n  AND  quantity >= 10\nGROUP  BY region\nORDER  BY avg_price_2023 DESC\nLIMIT 3 ;\n\n/* Answer the following: In which year was the worldwide quantity of Bitcoin purchased the greatest, and how many coins were bought? */\nSELECT year,\n       total_quantity\nFROM   (\n        SELECT EXTRACT (YEAR FROM purchase_date) AS year ,\n               SUM(quantity)                    AS total_quantity ,\n               RANK() OVER (ORDER BY SUM(quantity) DESC) AS rk\n        FROM   bitcoin_purchases\n        GROUP  BY EXTRACT (YEAR FROM purchase_date)\n       ) AS sub\nWHERE  rk = 1 ;\n\n/* Answer the following: For every region, what was the percentage change in total Bitcoin quantity purchased from 2021 to 2022? */\nWITH qty AS (\n     SELECT region ,\n            EXTRACT (YEAR FROM purchase_date) AS yr ,\n            SUM(quantity)                     AS qty_btc\n     FROM   bitcoin_purchases\n     WHERE  EXTRACT (YEAR FROM purchase_date) IN (2021, 2022)\n     GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n)\nSELECT q22.region ,\n       ROUND( (q22.qty_btc - q21.qty_btc) * 100.0 / q21.qty_btc , 2) AS pct_change_qty\nFROM   qty AS q21\nJOIN   qty AS q22\n  ON   q21.region = q22.region\n WHERE  q21.yr = 2021\n   AND  q22.yr = 2022 ;\n\n/* Answer the following: For each year, which region obtained the lowest average purchase price per Bitcoin and what was that price? */\nWITH avg_price AS (\n     SELECT region ,\n            EXTRACT (YEAR FROM purchase_date) AS yr ,\n            AVG(amount_usd / quantity)        AS avg_price\n     FROM   bitcoin_purchases\n     GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n)\nSELECT yr ,\n       region ,\n       avg_price\nFROM   (\n        SELECT yr ,\n               region ,\n               avg_price ,\n               RANK() OVER (PARTITION BY yr ORDER BY avg_price ASC) AS rk\n        FROM   avg_price\n       ) AS ranked\nWHERE  rk = 1 ;\n\n/* Answer the following: Show the running (cumulative) total dollar amount spent on Bitcoin for every region up to and including each year. */\nSELECT region ,\n       yr ,\n       SUM(yearly_spend) OVER (PARTITION BY region ORDER BY yr) AS cumulative_spend\nFROM   (\n        SELECT region ,\n               EXTRACT (YEAR FROM purchase_date)         AS yr ,\n               SUM(amount_usd)                           AS yearly_spend\n        FROM   bitcoin_purchases\n        GROUP  BY region , EXTRACT (YEAR FROM purchase_date)\n       ) AS t\nORDER  BY region , yr ;\n\n/* Answer the following: Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Given a database of musical styles and user preferences, where each user ranks up to three preferred styles as their first, second, and third choices, assign 3 points for each first-choice ranking, 2 points for each second-choice ranking, and 1 point for each third-choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.",
            "evidence": "",
            "raw_question": "Given a database of musical styles and user preferences, where each user ranks up to three preferred styles as their first, second, and third choices, assign 3 points for each first-choice ranking, 2 points for each second-choice ranking, and 1 point for each third-choice ranking. Calculate the total weighted score for each musical style that has been ranked by at least one user. Then, compute the absolute difference between each style's total weighted score and the average total weighted score across all such styles.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: For every ticker, what was the average daily trading volume (after converting values that end with \u201cK\u201d, \u201cM\u201d, or \u201cB\u201d and treating \u201c-\u201d as zero) during September 2021?  List the tickers with the highest average volumes first. */\nSELECT ticker,\n       AVG(adj_volume) AS avg_volume\nFROM (\n    SELECT ticker,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE date BETWEEN '2021-09-01' AND '2021-09-30'\n) AS v\nWHERE adj_volume > 0\nGROUP BY ticker\nORDER BY avg_volume DESC;\n\n/* Answer the following: On which date in 2021 did BTC register its single-day highest trading volume (after normalizing \u201cK\u201d, \u201cM\u201d, \u201cB\u201d, and \u201c-\u201d)? */\nSELECT date\nFROM (\n    SELECT date,\n           CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE ticker = 'BTC' AND date BETWEEN '2021-01-01' AND '2021-12-31'\n) AS v\nORDER BY adj_volume DESC\nLIMIT 1;\n\n/* Answer the following: Show the daily percentage change in closing price for ETH from May 10 2021 through May 15 2021. */\nSELECT date,\n       ROUND( (close - LAG(close) OVER (ORDER BY date)) * 100.0 / LAG(close) OVER (ORDER BY date), 2 ) AS pct_change\nFROM bitcoin_prices\nWHERE ticker = 'ETH' AND date BETWEEN '2021-05-10' AND '2021-05-15'\nORDER BY date;\n\n/* Answer the following: What was the total trading volume for XRP during the first week of July 2021 (after converting \u201cK\u201d, \u201cM\u201d, \u201cB\u201d, and treating \u201c-\u201d as zero and ignoring the zeros)? */\nSELECT SUM(adj_volume) AS total_volume\nFROM (\n    SELECT CASE\n               WHEN volume LIKE '%K' THEN CAST(REPLACE(volume,'K','') AS REAL)*1000\n               WHEN volume LIKE '%M' THEN CAST(REPLACE(volume,'M','') AS REAL)*1000000\n               WHEN volume LIKE '%B' THEN CAST(REPLACE(volume,'B','') AS REAL)*1000000000\n               WHEN volume = '-'          THEN 0\n               ELSE CAST(volume AS REAL)\n           END AS adj_volume\n    FROM bitcoin_prices\n    WHERE ticker = 'XRP' AND date BETWEEN '2021-07-01' AND '2021-07-07'\n) AS v\nWHERE adj_volume > 0;\n\n/* Answer the following: Which tickers recorded at least one closing price above 50,000 USD during April 2021? */\nSELECT DISTINCT ticker\nFROM bitcoin_prices\nWHERE date BETWEEN '2021-04-01' AND '2021-04-30'\n  AND close > 50000;\n\n/* Answer the following: Provide the 7-day moving average of the closing price for BTC for each day from August 7 2021 to August 14 2021 (inclusive). */\nSELECT date,\n       ROUND(AVG(close) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW), 2) AS ma_7d_close\nFROM bitcoin_prices\nWHERE ticker = 'BTC'\n  AND date BETWEEN '2021-08-07' AND '2021-08-14'\nORDER BY date;\n\n/* Answer the following: Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "evidence": "",
            "raw_question": "Show all pairs of entertainers and customers who each have up to three style strengths or preferences, where the first and second style preferences of the customers match the first and second style strengths of the entertainers (or in reverse order). Only return the entertainer\u2019s stage name and the customer\u2019s last name",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which departments have the highest budget and what are their budgets? */\nSELECT name, budget\nFROM department\nWHERE budget = (SELECT MAX(budget) FROM department);\n\n/* Answer the following: List the names of students who took more than three different courses in the Spring semester of 2010. */\nSELECT s.name\nFROM student AS s\nJOIN takes  AS t ON s.id = t.id\nWHERE t.semester = 'Spring' AND t.year = 2010\nGROUP BY s.id, s.name\nHAVING COUNT(DISTINCT t.course_id) > 3;\n\n/* Answer the following: What is the average salary of instructors in each department?  Provide the department name together with the average salary. */\nSELECT d.name, AVG(i.salary) AS avg_salary\nFROM instructor AS i\nJOIN department AS d ON i.dept_id = d.id\nGROUP BY d.name;\n\n/* Answer the following: Which classrooms have never been scheduled for any section?  Return building and room number. */\nSELECT c.building, c.room_number\nFROM classroom AS c\nLEFT JOIN section AS s\n       ON c.building = s.building\n      AND c.room_number = s.room_number\nWHERE s.course_id IS NULL;\n\n/* Answer the following: Find the course or courses that serve as prerequisites for the greatest number of other courses.  Return the course id and name. */\nSELECT p.prereq_id, c.name\nFROM prereq AS p\nJOIN course AS c ON p.prereq_id = c.course_id\nGROUP BY p.prereq_id, c.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which students share the exact same name as at least one instructor?  List the distinct names. */\nSELECT DISTINCT s.name\nFROM student    AS s\nJOIN instructor AS i ON s.name = i.name;\n\n/* Answer the following: Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "n_examples": 6,
            "db_id": "education_business"
        },
        {
            "question": "How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "evidence": "",
            "raw_question": "How did each salesperson's annual total sales compare to their annual sales quota? Provide the difference between their total sales and the quota for each year, organized by salesperson and year.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of female legislators who ever served on December 31, 1999? served on December 31, 1999 refers to start_date <= '1999-12-31' AND end_date >= '1999-12-31'; female refers to gender = 'F'; */\nSELECT COUNT(DISTINCT L.legislator_id)\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.start_date <= '1999-12-31'\n  AND T.end_date   >= '1999-12-31';\n\n/* Answer the following: List the abbreviations of the three states with the largest number of first-time female legislators. first-time female legislators refers to gender = 'F' and term_number = 1; */\nSELECT first_state\nFROM legislators\nWHERE gender = 'F' AND term_number = 1\nGROUP BY first_state\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: For each party, how many female legislators had at least one term that included December 31, 2010? included December 31, 2010 refers to start_date <= '2010-12-31' AND end_date >= '2010-12-31'; */\nSELECT L.party, COUNT(DISTINCT L.legislator_id) AS female_count\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.start_date <= '2010-12-31'\n  AND T.end_date   >= '2010-12-31'\nGROUP BY L.party;\n\n/* Answer the following: Which state has the greatest average length in days of the first term served by female legislators, and what is that average length? first term refers to term_number = 1; */\nSELECT L.first_state,\n       AVG(JULIANDAY(T.end_date) - JULIANDAY(T.start_date)) AS avg_days\nFROM legislators AS L\nJOIN terms AS T\n  ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F' AND T.term_number = 1\nGROUP BY L.first_state\nORDER BY avg_days DESC\nLIMIT 1;\n\n/* Answer the following: How many female legislators first represented Texas (TX) and had at least one term that overlapped with Christmas Day (December 25) of any year? overlap with Christmas Day means MONTH(T.start_date) < 12 OR (MONTH =12 and DAY <=25) and MONTH(T.end_date) >12 OR (MONTH=12 and DAY>=25).  Simpler: DAY-MONTH string '12-25' lies between start_date and end_date for any year; */\nSELECT COUNT(DISTINCT L.legislator_id)\nFROM legislators AS L\nJOIN terms AS T ON L.legislator_id = T.legislator_id\nWHERE L.gender = 'F'\n  AND L.first_state = 'TX'\n  AND STRFTIME('%m-%d', T.start_date) <= '12-25'\n  AND STRFTIME('%m-%d', T.end_date)   >= '12-25';\n\n/* Answer the following: Retrieve the names of all living female legislators (gender = 'F' AND death_date IS NULL) whose first_state is New York (NY). */\nSELECT L.name\nFROM legislators AS L\nWHERE L.gender = 'F'\n  AND L.death_date IS NULL\n  AND L.first_state = 'NY';\n\n/* Answer the following: Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "evidence": "",
            "raw_question": "Can you provide the top 9 directors by movie count, including their ID, name, number of movies, average inter-movie duration (rounded to the nearest integer), average rating (rounded to 2 decimals), total votes, minimum and maximum ratings, and total movie duration? Sort the output first by movie count in descending order and then by total movie duration in descending order.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of remote job postings for the title 'Data Scientist' that report an annual average salary greater than 120000? remote refers to location_type = 'Remote'; annual average salary refers to salary_avg_annual */\nSELECT COUNT(*) \nFROM job_postings \nWHERE title = 'Data Scientist' \n  AND location_type = 'Remote' \n  AND salary_avg_annual > 120000;\n\n/* Answer the following: List the three most frequently required skills for 'Data Analyst' positions, ordered from most to least in demand. 'Data Analyst' refers to title = 'Data Analyst'. */\nSELECT s.name\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.title = 'Data Analyst'\nGROUP BY s.name\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: Among on-site 'Business Analyst' postings with non-null salary, what is the minimum annual average salary? on-site refers to location_type = 'On-site'; non-null salary refers to salary_avg_annual IS NOT NULL. */\nSELECT MIN(salary_avg_annual)\nFROM job_postings\nWHERE title = 'Business Analyst'\n  AND location_type = 'On-site'\n  AND salary_avg_annual IS NOT NULL;\n\n/* Answer the following: How many unique skills are required across all remote postings that offer a salary greater than the average salary of all remote postings? remote refers to location_type = 'Remote'; salary refers to salary_avg_annual. */\nSELECT COUNT(DISTINCT s.name)\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.location_type = 'Remote'\n  AND jp.salary_avg_annual > (\n        SELECT AVG(salary_avg_annual)\n        FROM job_postings\n        WHERE location_type = 'Remote'\n     );\n\n/* Answer the following: For each employment type, what is the average annual salary of 'Data Engineer' postings that specify a salary? employment type refers to employment_type; salary specified refers to salary_avg_annual IS NOT NULL. */\nSELECT employment_type,\n       AVG(salary_avg_annual) AS avg_salary\nFROM job_postings\nWHERE title = 'Data Engineer'\n  AND salary_avg_annual IS NOT NULL\nGROUP BY employment_type;\n\n/* Answer the following: Which skill appears in the highest number of remote 'Data Analyst' postings that have a non-null salary? remote refers to location_type = 'Remote'; non-null salary refers to salary_avg_annual IS NOT NULL. */\nSELECT s.name\nFROM skills AS s\nJOIN job_skills AS js   ON s.id = js.skill_id\nJOIN job_postings AS jp ON jp.id = js.job_id\nWHERE jp.title = 'Data Analyst'\n  AND jp.location_type = 'Remote'\n  AND jp.salary_avg_annual IS NOT NULL\nGROUP BY s.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "evidence": "",
            "raw_question": "Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: List the names of all legislators who have served more than 30 consecutive years in office. */\nSELECT name\nFROM legislators\nWHERE (CAST(strftime('%Y', last_term_end) AS INTEGER) - CAST(strftime('%Y', first_term_start) AS INTEGER)) > 30;\n\n/* Answer the following: How many bills were sponsored by female legislators during calendar year 2020? */\nSELECT COUNT(*)\nFROM bills AS b\nJOIN legislators AS l\n  ON b.sponsor_id = l.legislator_id\nWHERE l.gender = 'F'\n  AND b.introduced_date BETWEEN '2020-01-01' AND '2020-12-31';\n\n/* Answer the following: What is the average age at which Democratic legislators first took office?  (Age is measured as the difference, in years, between birth date and first term start.) */\nSELECT AVG(\n         CAST(strftime('%Y', first_term_start) AS INTEGER) -\n         CAST(strftime('%Y', birth_date)        AS INTEGER)\n       ) AS avg_age_at_first_office\nFROM legislators\nWHERE party = 'Democrat';\n\n/* Answer the following: Which committee held the greatest number of meetings in 2015? */\nSELECT c.name\nFROM committees AS c\nJOIN committee_meetings AS m\n  ON c.committee_id = m.committee_id\nWHERE m.meeting_date BETWEEN '2015-01-01' AND '2015-12-31'\nGROUP BY c.committee_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: How many different states are represented by legislators who are currently in office? */\nSELECT COUNT(DISTINCT t.state)\nFROM terms AS t\nWHERE t.term_end IS NULL\n   OR t.term_end > DATE('now');\n\n/* Answer the following: Give the names of the five legislators who cast the most votes in the 116th Congress. */\nSELECT l.name\nFROM votes AS v\nJOIN legislators AS l\n  ON v.legislator_id = l.legislator_id\nWHERE v.congress = 116\nGROUP BY v.legislator_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: What is the annual retention rate of legislators who began their first term between January 1, 1917 and December 31, 1999, measured as the proportion of this cohort still in office on December 31st for each of the first 20 years following their initial term start? The results should show all 20 periods in sequence regardless of whether any legislators were retained in a particular year.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "evidence": "",
            "raw_question": "Analyze the annual average purchase price per Bitcoin by region, computed as the total dollar amount spent divided by the total quantity purchased each year, excluding the first year's data for each region. Then, for each year, rank the regions based on these average purchase prices, and calculate the annual percentage change in cost for each region compared to the previous year.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which state abbreviations show a non-zero male legislator retention rate exactly two years after the first-term start date?  A legislator is counted as \u201cretained\u201d if he is in office on December 31 two years after his own first-term start. */\nSELECT DISTINCT L.state_abbrev\nFROM Legislators AS L\nWHERE L.gender = 'M'\n  AND EXISTS (\n        SELECT 1\n        FROM Service_Periods AS S\n        WHERE S.leg_id = L.leg_id\n          AND S.service_start_date <= DATE(L.first_term_start_date, '+2 years')\n          AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+2 years')\n      );\n\n/* Answer the following:  For every state, what is the female retention rate four years after first-term entry ( retained_f / initial_f ) ? */\nSELECT\n    L.state_abbrev,\n    SUM(\n        CASE\n            WHEN S.service_start_date <= DATE(L.first_term_start_date, '+4 years')\n             AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+4 years')\n            THEN 1 ELSE 0\n        END\n    )::FLOAT\n    / COUNT(*)    AS retention_rate_year4\nFROM Legislators AS L\nLEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\nWHERE L.gender = 'F'\nGROUP BY L.state_abbrev;\n\n/* Answer the following:  Which state has the largest absolute gap between male and female retention rates at the six-year checkpoint? */\nWITH six AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        COUNT(*)                                 AS initial_cnt,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+6 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+6 years')\n                THEN 1 ELSE 0\n            END\n        )                                         AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT state_abbrev\nFROM (\n      SELECT\n          state_abbrev,\n          MAX(CASE WHEN gender='M' THEN retained_cnt::FLOAT/initial_cnt END)  AS male_rate,\n          MAX(CASE WHEN gender='F' THEN retained_cnt::FLOAT/initial_cnt END)  AS fem_rate\n      FROM six\n      GROUP BY state_abbrev\n) AS r\nORDER BY ABS(male_rate - fem_rate) DESC\nLIMIT 1;\n\n/* Answer the following:  How many states keep BOTH male and female retention above zero at the eight-year milestone? */\nWITH eight AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+8 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+8 years')\n                THEN 1 ELSE 0\n            END\n        ) AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT COUNT(*) \nFROM (\n      SELECT state_abbrev\n      FROM eight\n      GROUP BY state_abbrev\n      HAVING MIN(CASE WHEN gender='M' THEN retained_cnt END) > 0\n         AND MIN(CASE WHEN gender='F' THEN retained_cnt END) > 0\n) AS ok;\n\n/* Answer the following:  List the states where BOTH genders reach a zero retention rate by the ten-year checkpoint. */\nWITH ten AS (\n    SELECT\n        L.state_abbrev,\n        L.gender,\n        SUM(\n            CASE\n                WHEN S.service_start_date <= DATE(L.first_term_start_date,'+10 years')\n                 AND COALESCE(S.service_end_date,'9999-12-31') >= DATE(L.first_term_start_date,'+10 years')\n                THEN 1 ELSE 0\n            END\n        ) AS retained_cnt\n    FROM Legislators AS L\n    LEFT JOIN Service_Periods AS S ON S.leg_id = L.leg_id\n    GROUP BY L.state_abbrev, L.gender\n)\nSELECT state_abbrev\nFROM ten\nGROUP BY state_abbrev\nHAVING MAX(CASE WHEN gender='M' THEN retained_cnt END) = 0\n   AND MAX(CASE WHEN gender='F' THEN retained_cnt END) = 0;\n\n/* Answer the following:  Which California legislators served continuously from their first-day in office through the six-year mark? */\nSELECT DISTINCT L.leg_id\nFROM Legislators      AS L\nJOIN Service_Periods  AS S ON S.leg_id = L.leg_id\nWHERE L.state_abbrev = 'CA'\n  AND S.service_start_date <= L.first_term_start_date\n  AND COALESCE(S.service_end_date, '9999-12-31') >= DATE(L.first_term_start_date, '+6 years');\n\n/* Answer the following: Identify the state abbreviations where, for both male and female legislators, the retention rate remains greater than zero at specific intervals of 0, 2, 4, 6, 8, and 10 years after their first term start date. A legislator is considered retained if they are serving on December 31 of the respective year. Only include states where both gender cohorts maintain non-zero retention rates at all six of these time points during the first decade of service.",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "evidence": "",
            "raw_question": "Using the \"bitcoin_prices\" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in \"K\" or \"M\" is accurately converted to thousands or millions, any \"-\" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many female legislators born after 1970 have ever represented Texas? */\nSELECT COUNT(DISTINCT L.id)\nFROM legislators AS L\nJOIN terms AS T ON L.id = T.legislator_id\nWHERE L.gender = 'F'\n  AND L.birthday > '1970-12-31'\n  AND T.state = 'TX';\n\n/* Answer the following: List the full names of legislators who have served both as a senator and as a representative. */\nSELECT DISTINCT L.first_name || ' ' || L.last_name\nFROM legislators AS L\nJOIN terms AS T1 ON L.id = T1.legislator_id\nJOIN terms AS T2 ON L.id = T2.legislator_id\nWHERE T1.type = 'sen'\n  AND T2.type = 'rep';\n\n/* Answer the following: For each state, in which year did a Green-party legislator first begin a term? */\nSELECT T.state,\n       MIN(strftime('%Y', T.start_date)) AS first_green_year\nFROM terms AS T\nWHERE T.party = 'Green'\nGROUP BY T.state;\n\n/* Answer the following: Which legislator has the single longest term in days and how long was it? */\nSELECT L.first_name || ' ' || L.last_name AS legislator,\n       MAX(julianday(T.end_date) - julianday(T.start_date)) AS longest_term_days\nFROM legislators AS L\nJOIN terms AS T ON L.id = T.legislator_id\nGROUP BY L.id\nORDER BY longest_term_days DESC\nLIMIT 1;\n\n/* Answer the following: On January 20, 1993, how many distinct legislators were serving in office? */\nSELECT COUNT(DISTINCT legislator_id)\nFROM terms\nWHERE start_date <= '1993-01-20'\n  AND end_date   >= '1993-01-20';\n\n/* Answer the following: Which five states have accumulated the highest total number of female senator-years? */\nSELECT T.state,\n       SUM((julianday(T.end_date) - julianday(T.start_date))/365.25) AS female_senator_years\nFROM terms AS T\nJOIN legislators AS L ON L.id = T.legislator_id\nWHERE L.gender = 'F'\n  AND T.type = 'sen'\nGROUP BY T.state\nORDER BY female_senator_years DESC\nLIMIT 5;\n\n/* Answer the following: For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "evidence": "",
            "raw_question": "Which university faculty members' salaries are closest to the average salary for their respective ranks? Please provide the ranks, first names, last names, and salaries.university",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the total revenue generated during the Black Friday week (from 2022-11-21 00:00:00 through 2022-11-27 23:59:59)? */\nSELECT SUM(amount) AS black_friday_revenue\nFROM orders\nWHERE order_datetime >= '2022-11-21 00:00:00'\n  AND order_datetime <  '2022-11-28 00:00:00';\n\n\n/* Answer the following: Which customer has the highest lifetime sales (LTV) and what is that amount?  Lifetime sales refers to the sum of all order amounts for the customer. */\nSELECT customer_id ,\n       SUM(amount) AS lifetime_sales\nFROM orders\nGROUP BY customer_id\nORDER BY lifetime_sales DESC\nLIMIT 1;\n\n\n/* Answer the following: How many customers placed at least three orders within their first 14 days after signing up?  \u201cFirst 14 days\u201d means the first 14\u00d724 hours from signup_datetime. */\nSELECT COUNT(*)\nFROM (\n     SELECT o.customer_id\n     FROM orders  AS o\n     JOIN  customers AS c USING (customer_id)\n     WHERE o.order_datetime <= c.signup_datetime + INTERVAL '14 days'\n     GROUP BY o.customer_id\n     HAVING COUNT(o.order_id) >= 3\n) AS x;\n\n\n/* Answer the following: What percentage of total revenue comes from the mobile channel?  Mobile channel refers to channel = 'mobile'. */\nSELECT 100.0 * SUM(CASE WHEN channel = 'mobile' THEN amount ELSE 0 END)\n/               SUM(amount)            AS pct_mobile_revenue\nFROM orders;\n\n\n/* Answer the following: On which day of the week is the average order value highest?  Day-of-week is given by EXTRACT(DOW FROM order_datetime) where 0=Sunday. */\nSELECT EXTRACT(DOW FROM order_datetime) AS dow\nFROM   orders\nGROUP  BY dow\nORDER BY AVG(amount) DESC\nLIMIT 1;\n\n\n/* Answer the following: What is the average number of days between a customer\u2019s first and second purchase?  Consider only customers who have at least two orders. */\nWITH ranked AS (\n     SELECT customer_id,\n            order_datetime,\n            ROW_NUMBER() OVER (PARTITION BY customer_id\n                               ORDER BY order_datetime) AS rn\n     FROM orders\n),\nfirst_second AS (\n     SELECT customer_id,\n            MAX(CASE WHEN rn = 1 THEN order_datetime END) AS first_time,\n            MAX(CASE WHEN rn = 2 THEN order_datetime END) AS second_time\n     FROM ranked\n     WHERE rn <= 2\n     GROUP BY customer_id\n     HAVING COUNT(*) = 2\n)\nSELECT AVG( EXTRACT(EPOCH FROM (second_time - first_time)) / 86400.0 )\n       AS avg_days_between_first_two\nFROM first_second;\n\n\n/* Answer the following: Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "evidence": "",
            "raw_question": "Among job postings that specifically have the Data Analyst, require a non-null annual average salary, and are remote, what is the overall average salary when considering only the top three most frequently demanded skills for these positions?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Provide the two highest-grossing films for each director, together with the average \u201cdirector share\u201d of revenue in those films (film revenue divided equally among that film\u2019s directors). */\nSELECT\n    D.name                     AS director_name,\n    F.title                    AS film_title,\n    F.revenue / C.cnt          AS director_share,\n    AVG(F.revenue / C.cnt) OVER (PARTITION BY D.id)\n                               AS avg_share_for_director\nFROM Director AS D\nJOIN Film_Director FD          ON FD.director_id = D.id\nJOIN Film F                    ON F.id           = FD.film_id\nJOIN ( SELECT film_id, COUNT(*) AS cnt\n       FROM Film_Director\n       GROUP BY film_id ) C    ON C.film_id      = F.id\nJOIN ( SELECT director_id,\n              film_id,\n              ROW_NUMBER() OVER (PARTITION BY director_id\n                                 ORDER BY revenue DESC) AS rn\n       FROM Film_Director\n       JOIN Film ON Film.id = Film_Director.film_id ) R\n                               ON R.director_id  = D.id\n                              AND R.film_id      = F.id\nWHERE R.rn <= 2;\n\n/* Answer the following: For every author, list the three best-selling books and the author\u2019s average share of copies sold across those books (copies sold divided by the number of authors of that book). */\nSELECT\n    A.name,\n    B.title,\n    B.copies_sold / CA.author_cnt            AS author_share,\n    AVG(B.copies_sold / CA.author_cnt)\n        OVER (PARTITION BY A.id)             AS avg_share_per_author\nFROM Author A\nJOIN Book_Author BA          ON BA.author_id = A.id\nJOIN Book B                  ON B.id        = BA.book_id\nJOIN ( SELECT book_id, COUNT(*) AS author_cnt\n       FROM Book_Author\n       GROUP BY book_id ) CA  ON CA.book_id  = B.id\nJOIN ( SELECT author_id,\n              book_id,\n              ROW_NUMBER() OVER (PARTITION BY author_id\n                                 ORDER BY copies_sold DESC) AS rk\n       FROM Book_Author\n       JOIN Book ON Book.id = Book_Author.book_id ) R\n                             ON R.author_id  = A.id\n                            AND R.book_id    = B.id\nWHERE R.rk <= 3;\n\n/* Answer the following: Show each instructor\u2019s two courses with the highest enrolment and the average enrolment-per-instructor share (enrolment divided by number of instructors teaching the course) for those courses. */\nSELECT\n    I.name,\n    C.course_name,\n    C.enrolled / CC.inst_cnt                 AS inst_share,\n    AVG(C.enrolled / CC.inst_cnt)\n        OVER (PARTITION BY I.id)             AS avg_inst_share\nFROM Instructor I\nJOIN Course_Instructor CI      ON CI.instr_id = I.id\nJOIN Course C                  ON C.id       = CI.course_id\nJOIN ( SELECT course_id, COUNT(*) AS inst_cnt\n       FROM Course_Instructor\n       GROUP BY course_id ) CC  ON CC.course_id = C.id\nJOIN ( SELECT instr_id, course_id,\n              ROW_NUMBER() OVER (PARTITION BY instr_id\n                                 ORDER BY enrolled DESC) AS rn\n       FROM Course_Instructor\n       JOIN Course ON Course.id = Course_Instructor.course_id ) R\n                                ON R.instr_id  = I.id\n                               AND R.course_id = C.id\nWHERE R.rn <= 2;\n\n/* Answer the following: List the top three prize-money tournaments for each athlete together with the average athlete share in those tournaments (prize money divided by the total athletes in the tournament). */\nSELECT\n    AT.name,\n    T.tournament_name,\n    T.prize_money / PC.part_cnt              AS athlete_share,\n    AVG(T.prize_money / PC.part_cnt)\n        OVER (PARTITION BY AT.id)            AS avg_share\nFROM Athlete AT\nJOIN Participation P          ON P.athlete_id = AT.id\nJOIN Tournament T             ON T.id         = P.tournament_id\nJOIN ( SELECT tournament_id, COUNT(*) AS part_cnt\n       FROM Participation\n       GROUP BY tournament_id ) PC\n                             ON PC.tournament_id = T.id\nJOIN ( SELECT athlete_id, tournament_id,\n              ROW_NUMBER() OVER (PARTITION BY athlete_id\n                                 ORDER BY prize_money DESC) AS rk\n       FROM Participation\n       JOIN Tournament\n         ON Tournament.id = Participation.tournament_id ) R\n                             ON R.athlete_id  = AT.id\n                            AND R.tournament_id = T.id\nWHERE R.rk <= 3;\n\n/* Answer the following: For each researcher, return the three most-cited papers and the average citation share per researcher (citations divided by authors of the paper) in those papers. */\nSELECT\n    R.name,\n    P.title,\n    P.citations / AC.auth_cnt               AS citation_share,\n    AVG(P.citations / AC.auth_cnt)\n        OVER (PARTITION BY R.id)            AS avg_citation_share\nFROM Researcher R\nJOIN Paper_Author PA        ON PA.researcher_id = R.id\nJOIN Paper P                ON P.id            = PA.paper_id\nJOIN ( SELECT paper_id, COUNT(*) AS auth_cnt\n       FROM Paper_Author\n       GROUP BY paper_id ) AC ON AC.paper_id   = P.id\nJOIN ( SELECT researcher_id, paper_id,\n              ROW_NUMBER() OVER (PARTITION BY researcher_id\n                                 ORDER BY citations DESC) AS rn\n       FROM Paper_Author\n       JOIN Paper ON Paper.id = Paper_Author.paper_id ) X\n                             ON X.researcher_id = R.id\n                            AND X.paper_id      = P.id\nWHERE X.rn <= 3;\n\n/* Answer the following: Give each musician\u2019s three most-streamed songs along with his/her average stream share (streams divided by number of credited musicians) for those songs. */\nSELECT\n    M.name,\n    S.title,\n    S.streams / MC.mus_cnt                  AS stream_share,\n    AVG(S.streams / MC.mus_cnt)\n        OVER (PARTITION BY M.id)           AS avg_stream_share\nFROM Musician M\nJOIN Song_Artist SA         ON SA.musician_id = M.id\nJOIN Song S                 ON S.id          = SA.song_id\nJOIN ( SELECT song_id, COUNT(*) AS mus_cnt\n       FROM Song_Artist\n       GROUP BY song_id ) MC ON MC.song_id   = S.id\nJOIN ( SELECT musician_id, song_id,\n              ROW_NUMBER() OVER (PARTITION BY musician_id\n                                 ORDER BY streams DESC) AS rk\n       FROM Song_Artist\n       JOIN Song ON Song.id = Song_Artist.song_id ) R\n                             ON R.musician_id = M.id\n                            AND R.song_id    = S.id\nWHERE R.rk <= 3;\n\n/* Answer the following: Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "What is the proportion of legislators who started their first term between 1917 and 1999 that remained in office on December 31st of each year, tracked annually for up to 20 years following their initial term start?",
            "evidence": "",
            "raw_question": "What is the proportion of legislators who started their first term between 1917 and 1999 that remained in office on December 31st of each year, tracked annually for up to 20 years following their initial term start?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which five actors\u2019 films have been rented the most? */\nSELECT CONCAT(a.first_name, ' ', a.last_name) AS actor_name\nFROM actor AS a\nJOIN film_actor     AS fa ON a.actor_id = fa.actor_id\nJOIN inventory      AS i  ON fa.film_id  = i.film_id\nJOIN rental         AS r  ON i.inventory_id = r.inventory_id\nGROUP BY a.actor_id\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n/* Answer the following: How many customers have never rented a film? */\nSELECT COUNT(*)\nFROM customer AS c\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM rental AS r\n    WHERE r.customer_id = c.customer_id\n);\n\n/* Answer the following: List the top three film categories by number of rentals in 2006. */\nSELECT c.name,\n       COUNT(*) AS rental_count\nFROM category       AS c\nJOIN film_category  AS fc ON c.category_id = fc.category_id\nJOIN inventory      AS i  ON fc.film_id    = i.film_id\nJOIN rental         AS r  ON i.inventory_id = r.inventory_id\nWHERE r.rental_date BETWEEN '2006-01-01' AND '2006-12-31'\nGROUP BY c.category_id\nORDER BY rental_count DESC\nLIMIT 3;\n\n/* Answer the following: What is the average rental duration (in days) for films longer than 120 minutes? */\nSELECT AVG(f.rental_duration)\nFROM film AS f\nWHERE f.length > 120;\n\n/* Answer the following: Which staff member processed the most payments in February 2006? */\nSELECT CONCAT(s.first_name, ' ', s.last_name) AS staff_name\nFROM staff   AS s\nJOIN payment AS p ON s.staff_id = p.staff_id\nWHERE p.payment_date BETWEEN '2006-02-01' AND '2006-02-28'\nGROUP BY s.staff_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which city has the highest number of customers? */\nSELECT ci.city,\n       COUNT(*) AS customer_count\nFROM city    AS ci\nJOIN address AS a  ON ci.city_id   = a.city_id\nJOIN customer AS c ON a.address_id = c.address_id\nGROUP BY ci.city_id\nORDER BY customer_count DESC\nLIMIT 1;\n\n/* Answer the following: Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "evidence": "",
            "raw_question": "For male legislators from Louisiana, how many distinct legislators were actively serving on December 31 of each year from more than 30 years since their first term up to less than 50 years, grouping the results by the exact number of years elapsed since their first term?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For each movie rating, what is the average rental price of films with that rating? */\nSELECT rating, AVG(rental_rate) AS avg_rental_price\nFROM film\nGROUP BY rating;\n\n/* Answer the following: Which rating category contains the longest films on average? */\nSELECT rating\nFROM film\nGROUP BY rating\nORDER BY AVG(length) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total payment amount collected in February 2006? */\nSELECT SUM(amount) AS total_feb_2006_revenue\nFROM payment\nWHERE DATE_TRUNC('month', payment_date) = DATE '2006-02-01';\n\n/* Answer the following: Which customer has spent the highest total amount on rentals? */\nSELECT c.first_name || ' ' || c.last_name AS customer_name\nFROM customer AS c\nJOIN payment  AS p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nORDER BY SUM(p.amount) DESC\nLIMIT 1;\n\n/* Answer the following: List the names of customers who have rented more than 30 films in total. */\nSELECT c.first_name, c.last_name\nFROM customer AS c\nJOIN rental   AS r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nHAVING COUNT(r.rental_id) > 30;\n\n/* Answer the following: Which movie rating has generated the greatest number of rentals? */\nSELECT f.rating\nFROM rental   AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN film      AS f ON i.film_id      = f.film_id\nGROUP BY f.rating\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "evidence": "",
            "raw_question": "Based on the state each female legislator first represented, which state has the highest number of female legislators whose terms included December 31st at any point, and what is that count? Please provide the state's abbreviation.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which customer paid the highest total amount in the calendar year 2022?  */\nSELECT C.name\nFROM Customers AS C\nJOIN Payments AS P ON P.customer_id = C.id\nWHERE strftime('%Y', P.payment_date) = '2022'\nGROUP BY C.id\nORDER BY SUM(P.amount) DESC\nLIMIT 1;\n\n/* Answer the following: What were the total company-wide payments for every month in 2023?  */\nSELECT strftime('%Y-%m', P.payment_date)  AS month,\n       ROUND(SUM(P.amount), 2)            AS total_paid\nFROM Payments AS P\nWHERE strftime('%Y', P.payment_date) = '2023'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Among all customers, who recorded the largest percentage increase between any two consecutive months in 2022 and what was that percentage? percentage increase refers to (curr \u2212 prev) / prev * 100  */\nWITH m AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id, month\n), diffs AS (\n    SELECT m1.customer_id,\n           m1.month                       AS curr_month,\n           100.0 * (m1.monthly_amt - m2.monthly_amt) / m2.monthly_amt AS pct_change\n    FROM m AS m1\n    JOIN m AS m2\n         ON m1.customer_id = m2.customer_id\n        AND date(m1.month || '-01') = date(m2.month || '-01', '+1 month')\n)\nSELECT C.name,\n       curr_month,\n       ROUND(pct_change, 2) AS pct_change\nFROM diffs\nJOIN Customers AS C ON C.id = diffs.customer_id\nORDER BY pct_change DESC\nLIMIT 1;\n\n/* Answer the following: Compute the average monthly payment in 2023 for each of our top 5 customers by total spend in that same year.  */\nWITH totals AS (\n    SELECT customer_id, SUM(amount) AS yr_total\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2023'\n    GROUP BY customer_id\n    ORDER BY yr_total DESC\n    LIMIT 5\n), months AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2023'\n      AND customer_id IN (SELECT customer_id FROM totals)\n    GROUP BY customer_id, month\n)\nSELECT C.name,\n       ROUND(AVG(monthly_amt), 2) AS avg_monthly_payment\nFROM months\nJOIN Customers AS C ON C.id = months.customer_id\nGROUP BY months.customer_id;\n\n/* Answer the following: Among customers whose 2022 spending exceeded 10,000, which one experienced the smallest month-over-month drop, and what was the drop amount?  */\nWITH yr_totals AS (\n    SELECT customer_id\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n    GROUP BY customer_id\n    HAVING SUM(amount) > 10000\n), m AS (\n    SELECT customer_id,\n           strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE strftime('%Y', payment_date) = '2022'\n      AND customer_id IN (SELECT customer_id FROM yr_totals)\n    GROUP BY customer_id, month\n), diffs AS (\n    SELECT m1.customer_id,\n           m1.month AS curr_month,\n           m2.month AS prev_month,\n           m2.monthly_amt - m1.monthly_amt AS drop_amt\n    FROM m AS m1\n    JOIN m AS m2\n      ON m1.customer_id = m2.customer_id\n     AND date(m1.month || '-01') = date(m2.month || '-01', '+1 month')\n), only_drops AS (\n    SELECT * FROM diffs WHERE drop_amt > 0\n)\nSELECT C.name,\n       prev_month || ' to ' || curr_month AS period,\n       ROUND(MIN(drop_amt), 2)            AS smallest_drop\nFROM only_drops\nJOIN Customers AS C ON C.id = only_drops.customer_id\nGROUP BY customer_id\nORDER BY smallest_drop\nLIMIT 1;\n\n/* Answer the following: For customer \u2018Acme Corp\u2019, list all months where the payment grew by more than 500 dollars compared with the previous month.  */\nWITH acme AS (\n    SELECT strftime('%Y-%m', payment_date) AS month,\n           SUM(amount)                     AS monthly_amt\n    FROM Payments\n    WHERE customer_id = (SELECT id FROM Customers WHERE name = 'Acme Corp')\n    GROUP BY month\n), diffs AS (\n    SELECT a1.month AS curr_month,\n           a1.monthly_amt - a2.monthly_amt AS diff_amt\n    FROM acme AS a1\n    JOIN acme AS a2\n      ON date(a1.month || '-01') = date(a2.month || '-01', '+1 month')\n)\nSELECT curr_month\nFROM diffs\nWHERE diff_amt > 500\nORDER BY curr_month;\n\n/* Answer the following: Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Identify the state abbreviations where, for both male and female legislators who began serving in that state, the retention rate of the initial cohort is greater than zero at each of the intervals 0, 2, 4, 6, 8, and 10 years after their initial term start date during the first 10 years of service.",
            "evidence": "",
            "raw_question": "Identify the state abbreviations where, for both male and female legislators who began serving in that state, the retention rate of the initial cohort is greater than zero at each of the intervals 0, 2, 4, 6, 8, and 10 years after their initial term start date during the first 10 years of service.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the average quantity ordered for all products in the 'Electronics' category? */\nSELECT AVG(OI.quantity)\nFROM OrderItems AS OI\nJOIN Products   AS P  ON OI.product_id = P.product_id\nJOIN Categories AS C  ON P.category_id = C.category_id\nWHERE C.category_name = 'Electronics';\n\n/* Answer the following: Name the top 3 customers who generated the highest total sales in 2022. */\nSELECT C.customer_name\nFROM Customers AS C\nJOIN Orders      AS O  ON C.customer_id = O.customer_id\nJOIN OrderItems  AS OI ON O.order_id    = OI.order_id\nWHERE strftime('%Y', O.order_date) = '2022'\nGROUP BY C.customer_id\nORDER BY SUM(OI.quantity * OI.unit_price) DESC\nLIMIT 3;\n\n/* Answer the following: For each country, how many distinct customers made purchases in 2021? */\nSELECT C.country,\n       COUNT(DISTINCT C.customer_id) AS customer_count\nFROM Customers AS C\nJOIN Orders AS O ON C.customer_id = O.customer_id\nWHERE strftime('%Y', O.order_date) = '2021'\nGROUP BY C.country;\n\n/* Answer the following: Which product has the second highest number of orders? */\nSELECT P.product_name\nFROM Products AS P\nJOIN OrderItems AS OI ON P.product_id = OI.product_id\nGROUP BY P.product_id\nORDER BY COUNT(DISTINCT OI.order_id) DESC\nLIMIT 1 OFFSET 1;\n\n/* Answer the following: What is the total revenue from orders placed in the first quarter (January-March) of 2023? */\nSELECT SUM(OI.quantity * OI.unit_price) AS total_revenue\nFROM Orders     AS O\nJOIN OrderItems AS OI ON O.order_id = OI.order_id\nWHERE O.order_date BETWEEN '2023-01-01' AND '2023-03-31';\n\n/* Answer the following: Which customer placed the earliest order and on what date? */\nSELECT C.customer_name,\n       O.order_date\nFROM Customers AS C\nJOIN Orders    AS O ON C.customer_id = O.customer_id\nORDER BY O.order_date ASC\nLIMIT 1;\n\n/* Answer the following: Using the sales data, what is the median value of total sales made in countries where the number of customers is greater than 4?",
            "n_examples": 6,
            "db_id": "chinook"
        },
        {
            "question": "Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "evidence": "",
            "raw_question": "Could you find out the average percentage of the total lifetime sales (LTV) that occur in the first 7 and 30 days after a customer's initial purchase? Also, include the average total lifetime sales (LTV). Please exclude customers with zero lifetime sales. The 7- and 30-day periods should be based on the exact number of hours-minutes-seconds, not calendar days.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which store recorded the highest total payment amount in the year 2006? */\nSELECT st.store_id ,\n       SUM(p.amount) AS total_payments\nFROM payment AS p\nJOIN staff   AS sf ON p.staff_id = sf.staff_id\nJOIN store   AS st ON sf.store_id = st.store_id\nWHERE YEAR(p.payment_date) = 2006\nGROUP BY st.store_id\nORDER BY total_payments DESC\nLIMIT 1;\n\n/* Answer the following: For each store, how many rentals were returned more than three days late during February 2005? */\nSELECT st.store_id ,\n       COUNT(*) AS late_rentals\nFROM rental    AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN store     AS st ON i.store_id = st.store_id\nWHERE r.return_date IS NOT NULL\n  AND YEAR(r.rental_date)  = 2005\n  AND MONTH(r.rental_date) = 2\n  AND DATEDIFF(r.return_date , r.rental_date) > 3\nGROUP BY st.store_id;\n\n/* Answer the following: List the top three customers who spent the most money in 2005 and the total amount each spent. */\nSELECT c.customer_id ,\n       c.first_name ,\n       c.last_name ,\n       SUM(p.amount) AS total_spent\nFROM payment  AS p\nJOIN customer AS c ON p.customer_id = c.customer_id\nWHERE YEAR(p.payment_date) = 2005\nGROUP BY c.customer_id\nORDER BY total_spent DESC\nLIMIT 3;\n\n/* Answer the following: What is the average rental duration, in days, of all films that belong to the 'Comedy' category? */\nSELECT AVG(f.rental_duration) AS avg_duration\nFROM film          AS f\nJOIN film_category AS fc ON f.film_id     = fc.film_id\nJOIN category      AS c  ON fc.category_id = c.category_id\nWHERE c.name = 'Comedy';\n\n/* Answer the following: How many rentals did each staff member process in March 2006? Show staff id, first name, last name, and the count. */\nSELECT sf.staff_id ,\n       sf.first_name ,\n       sf.last_name ,\n       COUNT(*) AS rental_count\nFROM rental AS r\nJOIN staff  AS sf ON r.staff_id = sf.staff_id\nWHERE YEAR(r.rental_date)  = 2006\n  AND MONTH(r.rental_date) = 3\nGROUP BY sf.staff_id;\n\n/* Answer the following: Which film has been rented the greatest number of times? Provide the film id, title, and the number of rentals. */\nSELECT f.film_id ,\n       f.title ,\n       COUNT(*) AS rental_count\nFROM rental    AS r\nJOIN inventory AS i ON r.inventory_id = i.inventory_id\nJOIN film      AS f ON i.film_id      = f.film_id\nGROUP BY f.film_id\nORDER BY rental_count DESC\nLIMIT 1;\n\n/* Answer the following: Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "n_examples": 6,
            "db_id": "sqlite-sakila"
        },
        {
            "question": "Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "evidence": "",
            "raw_question": "Please provide a list of the top three revenue-generating films for each actor, along with the average revenue per actor in those films, calculated by dividing the total film revenue equally among the actors for each film.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: List the first 5 words alphabetically that are exactly 4 letters long, start with 'b', and have at least two anagrams of the same length. Alongside each word, show the total number of anagrams it has. */\nSELECT w.word,\n       COUNT(*) AS anagram_cnt\nFROM   words AS w\nJOIN   words AS w2\n       ON w.signature = w2.signature\nWHERE  w.len = 4\n  AND  w.word LIKE 'b%'\nGROUP  BY w.word\nHAVING COUNT(*) >= 2\nORDER  BY w.word\nLIMIT  5;\n\n/* Answer the following: How many distinct anagram groups consist of exactly three different words of length 6? */\nSELECT COUNT(*)\nFROM  (SELECT signature\n       FROM   words\n       WHERE  len = 6\n       GROUP  BY signature\n       HAVING COUNT(*) = 3) AS g;\n\n/* Answer the following: Give every anagram of the word 'stone' that appears in the dictionary (including 'stone' itself). */\nSELECT word\nFROM   words\nWHERE  signature = (SELECT signature\n                    FROM   words\n                    WHERE  word = 'stone'\n                    LIMIT  1);\n\n/* Answer the following: Between word lengths 2 and 8 inclusive, which length hosts the greatest number of anagram groups that contain more than four words? Return the length and the number of such groups. */\nSELECT len,\n       COUNT(*) AS group_cnt\nFROM  (SELECT len, signature\n       FROM   words\n       WHERE  len BETWEEN 2 AND 8\n       GROUP  BY len, signature\n       HAVING COUNT(*) > 4) AS sub\nGROUP  BY len\nORDER  BY group_cnt DESC, len\nLIMIT  1;\n\n/* Answer the following: What are the 7 largest anagram families in the dictionary? Return the anagram signature and the family size, ordered from largest to smallest. */\nSELECT signature,\n       COUNT(*) AS family_size\nFROM   words\nGROUP  BY signature\nORDER  BY family_size DESC\nLIMIT  7;\n\n/* Answer the following: How many words are anagrams of another word that differs from them in only the first letter? */\nSELECT COUNT(DISTINCT w1.word)\nFROM   words AS w1\nJOIN   words AS w2\n       ON  w1.signature = w2.signature\n       AND w1.len = w2.len\n       AND SUBSTR(w1.word,2) = SUBSTR(w2.word,2)\n       AND w1.word <> w2.word;\n\n/* Answer the following: Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "n_examples": 6,
            "db_id": "modern_data"
        },
        {
            "question": "Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "evidence": "",
            "raw_question": "Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which five states have the highest percentage of friendly aliens? */\nSELECT state\nFROM alien_population\nORDER BY (friendly_aliens * 100.0 / total_aliens) DESC\nLIMIT 5;\n\n/* Answer the following: How many states have a higher percentage of hostile aliens than friendly aliens? */\nSELECT COUNT(*)\nFROM alien_population\nWHERE (hostile_aliens * 1.0 / total_aliens) > (friendly_aliens * 1.0 / total_aliens);\n\n/* Answer the following: What is the average alien age among states whose total alien population exceeds one million? */\nSELECT AVG(avg_alien_age)\nFROM alien_population\nWHERE total_aliens > 1000000;\n\n/* Answer the following: Which state has the greatest average alien age among states with at least 10,000 aliens? */\nSELECT state\nFROM alien_population\nWHERE total_aliens >= 10000\nORDER BY avg_alien_age DESC\nLIMIT 1;\n\n/* Answer the following: How many friendly aliens live in the state of California (CA)? */\nSELECT friendly_aliens\nFROM alien_population\nWHERE state = 'CA';\n\n/* Answer the following: List all states where more than 60 % of the aliens are friendly and the average alien age is below 150. */\nSELECT state\nFROM alien_population\nWHERE (friendly_aliens * 100.0 / total_aliens) > 60\n  AND avg_alien_age < 150;\n\n/* Answer the following: For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "n_examples": 6,
            "db_id": "city_legislation"
        },
        {
            "question": "For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "evidence": "",
            "raw_question": "For each rating category of the first movie rented by customers\u2014where the first movie is identified based on the earliest payment date per customer\u2014please provide the average total amount spent per customer and the average number of subsequent rentals (calculated as the total number of rentals minus one) for customers whose first rented movie falls into that rating category.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which store has the lowest total sales amount among stores located in 'New York'? */\nSELECT s.store_name\nFROM stores AS s\nJOIN orders AS o ON o.store_id = s.store_id\nWHERE s.city = 'New York'\nGROUP BY s.store_id , s.store_name\nORDER BY SUM(o.total_amount) ASC\nLIMIT 1;\n\n/* Answer the following: How many orders placed in 2022 do not yet have any delivery record? */\nSELECT COUNT(*)\nFROM orders AS o\nWHERE EXTRACT(YEAR FROM o.order_date) = 2022\n  AND NOT EXISTS (\n        SELECT 1\n        FROM deliveries AS d\n        WHERE d.order_id = o.order_id\n    );\n\n/* Answer the following: List the top 5 stores with the highest average order value for orders that were delivered successfully. */\nSELECT s.store_name\nFROM stores AS s\nJOIN orders AS o ON o.store_id = s.store_id\nJOIN deliveries AS d ON d.order_id = o.order_id\nWHERE d.status = 'DELIVERED'\nGROUP BY s.store_id , s.store_name\nORDER BY AVG(o.total_amount) DESC\nLIMIT 5;\n\n/* Answer the following: For each month in 2023, what is the count of distinct customers who placed at least one order? */\nSELECT EXTRACT(MONTH FROM o.order_date) AS month,\n       COUNT(DISTINCT o.customer_id)      AS customer_cnt\nFROM orders AS o\nWHERE EXTRACT(YEAR FROM o.order_date) = 2023\nGROUP BY EXTRACT(MONTH FROM o.order_date)\nORDER BY month;\n\n/* Answer the following: What percentage of all orders have a delivery record with status 'RETURNED'?  (Return the value as a decimal between 0 and 1.) */\nSELECT CAST(COUNT(DISTINCT CASE WHEN d.status = 'RETURNED' THEN o.order_id END) AS FLOAT)\n       / COUNT(*) AS return_ratio\nFROM orders AS o\nLEFT JOIN deliveries AS d ON d.order_id = o.order_id;\n\n/* Answer the following: Which store has the highest ratio of delivered orders to total orders among stores with at least 100 orders? */\nSELECT s.store_name\nFROM stores  AS s\nJOIN orders  AS o ON o.store_id = s.store_id\nLEFT JOIN deliveries AS d\n       ON d.order_id = o.order_id\n      AND d.status = 'DELIVERED'\nGROUP BY s.store_id , s.store_name\nHAVING COUNT(*) >= 100\nORDER BY (COUNT(DISTINCT CASE WHEN d.status = 'DELIVERED' THEN o.order_id END) * 1.0\n          / COUNT(*)) DESC\nLIMIT 1;\n\n/* Answer the following: In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "n_examples": 6,
            "db_id": "delivery_center"
        },
        {
            "question": "Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "evidence": "",
            "raw_question": "Among our top 10 paying customers, can you identify the largest change in payment amounts from one month to the immediately following month? Specifically, please determine for which customer and during which month this maximum month-over-month difference occurred, and provide the difference rounded to two decimal places.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which regions experienced a drop of more than 10 percent in finished orders from March to April? */\nSELECT r.region_name\nFROM regions AS r\nJOIN hubs   AS h ON h.region_id = r.region_id\nJOIN orders AS o ON o.hub_id    = h.hub_id\nWHERE o.status = 'finished'\nGROUP BY r.region_name\nHAVING 1.0 * SUM( CASE WHEN EXTRACT(MONTH FROM o.order_date)=4 THEN 1 ELSE 0 END ) /\n             NULLIF( SUM( CASE WHEN EXTRACT(MONTH FROM o.order_date)=3 THEN 1 ELSE 0 END ), 0)  < 0.90\n\n/* Answer the following: List the three hubs with the highest cancellation rate in January (cancellations \u00f7 total orders). */\nSELECT h.hub_name\nFROM hubs   AS h\nJOIN orders AS o ON o.hub_id = h.hub_id\nWHERE EXTRACT(MONTH FROM o.order_date)=1\nGROUP BY h.hub_name\nORDER BY 1.0 * SUM( CASE WHEN o.status='cancelled' THEN 1 ELSE 0 END )\n         / COUNT(*)  DESC\nLIMIT 3\n\n/* Answer the following: What is the total number of finished orders across all hubs during the first quarter (January\u2013March)? */\nSELECT COUNT(*) AS total_finished_Q1\nFROM   orders\nWHERE  status = 'finished'\n  AND  EXTRACT(MONTH FROM order_date) BETWEEN 1 AND 3\n\n/* Answer the following: What is the average delivery-time (in minutes) for finished orders handled by the New York hub in March? */\nSELECT AVG(o.delivery_time_min) AS avg_minutes\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nWHERE  h.hub_name = 'New York'\n  AND  o.status   = 'finished'\n  AND  EXTRACT(MONTH FROM o.order_date)=3\n\n/* Answer the following: Which hub generated the highest revenue (sum of amount) from finished orders in February? */\nSELECT h.hub_name\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nWHERE  o.status = 'finished'\n  AND  EXTRACT(MONTH FROM o.order_date)=2\nGROUP BY h.hub_name\nORDER BY SUM(o.amount) DESC\nLIMIT 1\n\n/* Answer the following: Identify every hub whose cancelled-order ratio exceeded 5 percent in any single month. */\nSELECT DISTINCT h.hub_name\nFROM   hubs   AS h\nJOIN   orders AS o ON o.hub_id = h.hub_id\nGROUP BY h.hub_name, EXTRACT(MONTH FROM o.order_date)\nHAVING 1.0 * SUM( CASE WHEN o.status='cancelled' THEN 1 ELSE 0 END ) / COUNT(*) > 0.05\n\n/* Answer the following: Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "n_examples": 6,
            "db_id": "delivery_center"
        },
        {
            "question": "Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "evidence": "",
            "raw_question": "Can you identify the year and month with the highest rental orders created by the store's staff for each store? Please list the store ID, the year, the month, and the total rentals for those dates.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What are the names of the 3 drivers with the highest average number of deliveries per working day in 2021? */\nSELECT d.name\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.delivery_date BETWEEN '2021-01-01' AND '2021-12-31'\nGROUP BY d.driver_id\nORDER BY (1.0 * COUNT(*) / COUNT(DISTINCT del.delivery_date)) DESC\nLIMIT 3;\n\n/* Answer the following: Which driver has the lowest average delivery distance in urban zones? */\nSELECT d.name\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.zone_type = 'Urban'\nGROUP BY d.driver_id\nORDER BY AVG(del.distance_km) ASC\nLIMIT 1;\n\n/* Answer the following: List the top 5 restaurants that generate the highest average number of deliveries per week. */\nSELECT r.name\nFROM restaurants AS r\nJOIN deliveries AS del ON r.restaurant_id = del.restaurant_id\nGROUP BY r.restaurant_id\nORDER BY (1.0 * COUNT(*) / COUNT(DISTINCT strftime('%Y-%W', del.delivery_date))) DESC\nLIMIT 5;\n\n/* Answer the following: How many drivers made on average more than 20 deliveries per day in December 2022? */\nWITH driver_avg AS (\n  SELECT d.driver_id,\n         COUNT(*) * 1.0 / COUNT(DISTINCT del.delivery_date) AS avg_per_day\n  FROM drivers AS d\n  JOIN deliveries AS del ON d.driver_id = del.driver_id\n  WHERE del.delivery_date BETWEEN '2022-12-01' AND '2022-12-31'\n  GROUP BY d.driver_id\n)\nSELECT COUNT(*)\nFROM driver_avg\nWHERE avg_per_day > 20;\n\n/* Answer the following: Show the average daily delivery count for each driver that worked at least 100 days in 2022. */\nSELECT d.name,\n       COUNT(*) * 1.0 / COUNT(DISTINCT del.delivery_date) AS avg_daily_deliveries\nFROM drivers AS d\nJOIN deliveries AS del ON d.driver_id = del.driver_id\nWHERE del.delivery_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY d.driver_id\nHAVING COUNT(DISTINCT del.delivery_date) >= 100;\n\n/* Answer the following: Which day of the week has the highest average delivery count across all drivers? (0 = Sunday \u2026 6 = Saturday) */\nSELECT strftime('%w', delivery_date) AS weekday,\n       AVG(daily_cnt) AS avg_deliveries\nFROM (\n  SELECT delivery_date, COUNT(*) AS daily_cnt\n  FROM deliveries\n  GROUP BY delivery_date\n) AS daily\nGROUP BY weekday\nORDER BY avg_deliveries DESC\nLIMIT 1;\n\n/* Answer the following: Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "n_examples": 6,
            "db_id": "delivery_center"
        },
        {
            "question": "Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "evidence": "",
            "raw_question": "Identify the first 10 words, sorted alphabetically, that are 4 to 5 characters long, start with 'r', and have at least one anagram of the same length, considering case-sensitive letters. Provide the count of such anagrams for each word.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the maximum overall rating ever registered for any player? */\nSELECT MAX(overall_rating)\nFROM player_attributes;\n\n/* Answer the following: List the names of the 5 heaviest players. */\nSELECT player_name\nFROM player\nORDER BY weight DESC\nLIMIT 5;\n\n/* Answer the following: Which season had the highest average number of goals per match across all leagues? average number of goals per match refers to AVG(home_team_goal + away_team_goal) */\nSELECT season\nFROM match\nGROUP BY season\nORDER BY AVG(home_team_goal + away_team_goal) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a goalless draw? goalless draw refers to home_team_goal = 0 AND away_team_goal = 0 */\nSELECT COUNT(*)\nFROM match\nWHERE home_team_goal = 0 AND away_team_goal = 0;\n\n/* Answer the following: In the 2013/2014 season, which league hosted the most matches? */\nSELECT L.name\nFROM league AS L\nJOIN match  AS M ON L.id = M.league_id\nWHERE M.season = '2013/2014'\nGROUP BY L.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Which player has the highest recorded finishing rating over all snapshots? finishing rating refers to column finishing; highest recorded refers to MAX(finishing) */\nSELECT P.player_name\nFROM player AS P\nJOIN player_attributes AS A\n     ON P.player_api_id = A.player_api_id\nGROUP BY P.player_api_id, P.player_name\nORDER BY MAX(A.finishing) DESC\nLIMIT 1;\n\n/* Answer the following: Can you calculate the median from the highest season goals of each team?",
            "n_examples": 6,
            "db_id": "EU_soccer"
        },
        {
            "question": "For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "evidence": "",
            "raw_question": "For alien data, how many of the top 10 states by alien population have a higher percentage of friendly aliens than hostile aliens, with an average alien age exceeding 200?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For every season, which single team scores the greatest total number of goals when we add together the goals they scored as the home side and as the away side?  If more than one team tie for the most goals in a season, return just one of them for that season. */\nSELECT s.season ,\n       t.team_long_name\nFROM   (\n          SELECT season ,\n                 team_id ,\n                 SUM(goals)                     AS total_goals ,\n                 ROW_NUMBER() OVER (PARTITION BY season\n                                    ORDER BY     SUM(goals) DESC ,\n                                                 team_id) AS rn\n          FROM   (\n                    SELECT season ,\n                           home_team_api_id AS team_id ,\n                           home_team_goal   AS goals\n                    FROM   match\n                    UNION ALL\n                    SELECT season ,\n                           away_team_api_id AS team_id ,\n                           away_team_goal   AS goals\n                    FROM   match\n                 ) AS g\n          GROUP  BY season ,\n                    team_id\n       ) AS s\nJOIN   team t\n       ON t.team_api_id = s.team_id\nWHERE  s.rn = 1;\n\n/* Answer the following: Which league has the highest average number of goals per match (home goals + away goals) across all seasons combined? */\nSELECT l.name\nFROM   league l\nJOIN   match  m\n       ON m.league_id = l.id\nGROUP  BY l.id\nORDER BY AVG(m.home_team_goal + m.away_team_goal) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a draw (home goals = away goals) during the 2010/2011 season? */\nSELECT COUNT(*)\nFROM   match\nWHERE  season = '2010/2011'\nAND    home_team_goal = away_team_goal;\n\n/* Answer the following: List the 5 teams with the highest overall win percentage in the English Premier League over all seasons.  (Win percentage = wins \u00f7 total matches played.) */\nSELECT t.team_long_name\nFROM   (\n          SELECT team_id ,\n                 1.0 * SUM(win) / COUNT(*) AS win_rate\n          FROM   (\n                     SELECT home_team_api_id AS team_id ,\n                            CASE WHEN home_team_goal > away_team_goal THEN 1 ELSE 0 END AS win\n                     FROM   match\n                     WHERE  league_id = (SELECT id FROM league WHERE name = 'England Premier League')\n                     UNION ALL\n                     SELECT away_team_api_id ,\n                            CASE WHEN away_team_goal > home_team_goal THEN 1 ELSE 0 END\n                     FROM   match\n                     WHERE  league_id = (SELECT id FROM league WHERE name = 'England Premier League')\n                 ) w\n          GROUP  BY team_id\n       ) r\nJOIN   team t\n       ON t.team_api_id = r.team_id\nORDER  BY r.win_rate DESC\nLIMIT 5;\n\n/* Answer the following: For every league, what is the average number of wins per team in the 2012/2013 season? */\nSELECT l.name ,\n       AVG(team_wins) AS avg_wins_per_team\nFROM   (\n          SELECT league_id ,\n                 team_id ,\n                 SUM(win) AS team_wins\n          FROM   (\n                     SELECT league_id ,\n                            home_team_api_id AS team_id ,\n                            CASE WHEN home_team_goal > away_team_goal THEN 1 ELSE 0 END AS win\n                     FROM   match\n                     WHERE  season = '2012/2013'\n                     UNION ALL\n                     SELECT league_id ,\n                            away_team_api_id ,\n                            CASE WHEN away_team_goal > home_team_goal THEN 1 ELSE 0 END\n                     FROM   match\n                     WHERE  season = '2012/2013'\n                 ) s\n          GROUP  BY league_id ,\n                    team_id\n       ) p\nJOIN   league l\n       ON l.id = p.league_id\nGROUP  BY l.id;\n\n/* Answer the following: Which team conceded the fewest goals while playing away during the 2014/2015 season?  (Return only one team even if there is a tie.) */\nSELECT t.team_long_name\nFROM   (\n          SELECT away_team_api_id AS team_id ,\n                 SUM(home_team_goal) AS goals_conceded\n          FROM   match\n          WHERE  season = '2014/2015'\n          GROUP  BY away_team_api_id\n          ORDER  BY goals_conceded ASC ,\n                    away_team_api_id\n          LIMIT 1\n       ) x\nJOIN   team t\n       ON t.team_api_id = x.team_id;\n\n/* Answer the following: In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "n_examples": 6,
            "db_id": "EU_soccer"
        },
        {
            "question": "In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "evidence": "",
            "raw_question": "In the dataset of orders joined with store information, which store has the highest total number of orders, and among that store\u2019s orders, what is the ratio of orders that appear in the deliveries table with a 'DELIVERED' status to the total orders for that store?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which stadium has hosted the greatest number of matches that finished in a draw? */\nSELECT s.name\nFROM matches AS m\nJOIN stadiums AS s ON s.stadium_id = m.stadium_id\nWHERE m.home_score = m.away_score\nGROUP BY s.stadium_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Who scored the earliest goal in a World-Cup final? earliest goal refers to MIN(g.minute); World-Cup final refers to m.competition = 'World Cup' AND m.stage = 'Final' */\nSELECT p.name\nFROM goals AS g\nJOIN matches AS m ON g.match_id = m.match_id\nJOIN players AS p ON p.player_id = g.scorer_id\nWHERE m.competition = 'World Cup'\n  AND m.stage = 'Final'\nORDER BY g.minute ASC\nLIMIT 1;\n\n/* Answer the following: Which teams won every match they played in the 2019 season? won every match means there exists no match where they drew or lost */\nSELECT t.name\nFROM teams AS t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM matches AS m\n    WHERE m.season = 2019\n      AND (m.home_team_id = t.team_id OR m.away_team_id = t.team_id)\n      AND (\n           (m.home_team_id = t.team_id AND m.home_score <= m.away_score) OR\n           (m.away_team_id = t.team_id AND m.away_score <= m.home_score)\n      )\n);\n\n/* Answer the following: What is the average number of yellow cards shown per match by referee 'Pierluigi Collina'? yellow cards refers to c.card_type = 'Y' */\nSELECT AVG(card_cnt)\nFROM (\n    SELECT m.match_id, COUNT(*) AS card_cnt\n    FROM matches AS m\n    JOIN referees AS r ON r.referee_id = m.referee_id\n    JOIN cards AS c ON c.match_id = m.match_id\n    WHERE r.name = 'Pierluigi Collina'\n      AND c.card_type = 'Y'\n    GROUP BY m.match_id\n) AS sub;\n\n/* Answer the following: Which coach has managed the highest number of different teams across all seasons? highest number refers to MAX(COUNT(DISTINCT team_id)) */\nSELECT c.name\nFROM coaches AS c\nJOIN coach_team_season AS cts ON c.coach_id = cts.coach_id\nGROUP BY c.coach_id\nORDER BY COUNT(DISTINCT cts.team_id) DESC\nLIMIT 1;\n\n/* Answer the following: Who was the oldest player to appear in at least 10 matches during the 2021 season? oldest refers to minimum birthdate; at least 10 matches refers to COUNT(*) >= 10 */\nSELECT p.name\nFROM players AS p\nJOIN appearances AS a ON a.player_id = p.player_id\nJOIN matches AS m ON m.match_id = a.match_id\nWHERE m.season = 2021\nGROUP BY p.player_id, p.birthdate\nHAVING COUNT(*) >= 10\nORDER BY p.birthdate ASC           -- earliest birthdate = oldest\nLIMIT 1;\n\n/* Answer the following: Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "n_examples": 6,
            "db_id": "EU_soccer"
        },
        {
            "question": "Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "evidence": "",
            "raw_question": "Can you identify the hubs that saw more than a 20% increase in finished orders from February to March?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which team recorded the most wins in the 2022 season? */\nSELECT t.name\nFROM teams AS t\nJOIN standings AS s ON t.id = s.team_id\nWHERE s.season = 2022\nORDER BY s.wins DESC\nLIMIT 1;\n\n/* Answer the following: List the top five players in total points scored during the 2021 season. */\nSELECT p.name\nFROM players AS p\nJOIN player_stats AS ps ON p.id = ps.player_id\nWHERE ps.season = 2021\nORDER BY ps.points DESC\nLIMIT 5;\n\n/* Answer the following: What is the average seating capacity of arenas located in the state of Texas? */\nSELECT AVG(a.capacity)\nFROM arenas AS a\nWHERE a.state = 'TX';\n\n/* Answer the following: How many games ended in a tie in the 2020 regular season? */\nSELECT COUNT(*)\nFROM games\nWHERE season = 2020\n  AND home_score = away_score;\n\n/* Answer the following: Who is the longest\u2013tenured active head coach as of 2023? */\nSELECT c.name\nFROM coaches AS c\nWHERE c.end_year IS NULL OR c.end_year >= 2023\nORDER BY c.start_year ASC\nLIMIT 1;\n\n/* Answer the following: What was the total salary expenditure for the Los Angeles Lakers in the 2019 season? */\nSELECT SUM(ps.salary)\nFROM player_salaries AS ps\nJOIN players AS p ON p.id = ps.player_id\nJOIN teams AS t ON t.id = p.team_id\nWHERE t.name = 'Los Angeles Lakers'\n  AND ps.season = 2019;\n\n/* Answer the following: Tell me top10 teams with the most wins across the league",
            "n_examples": 6,
            "db_id": "EU_soccer"
        },
        {
            "question": "Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "evidence": "",
            "raw_question": "Can you find 5 delivery drivers with the highest average number of daily deliveries?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For every IPL season, find the batsman with the highest strike-rate (minimum 100 balls faced) and the bowler with the best economy rate (minimum 20 overs bowled). Break ties using the lower player_id. Return season_id, batsman_id, strike_rate, bowler_id, economy ordered by season_id. */\nWITH BatAgg AS (\n    SELECT season_id,\n           batsman_id,\n           SUM(runs_off_bat)                    AS runs,\n           COUNT(*)                             AS balls\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, batsman_id\n    HAVING COUNT(*) >= 100\n),\nBatRank AS (\n    SELECT season_id,\n           batsman_id,\n           runs * 1.0 / balls * 100             AS strike_rate,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY runs * 1.0 / balls * 100 DESC, batsman_id) AS rk\n    FROM BatAgg\n),\nBowlAgg AS (\n    SELECT season_id,\n           bowler_id,\n           SUM(total_runs)                      AS runs_conceded,\n           COUNT(*)                             AS balls_bowled\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, bowler_id\n    HAVING COUNT(*) >= 120                -- 20 overs\n),\nBowlRank AS (\n    SELECT season_id,\n           bowler_id,\n           runs_conceded * 1.0 / (balls_bowled / 6.0) AS economy,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY runs_conceded * 1.0 / (balls_bowled / 6.0) ASC, bowler_id) AS rk\n    FROM BowlAgg\n)\nSELECT B.season_id,\n       B.batsman_id,\n       ROUND(B.strike_rate, 2) AS strike_rate,\n       L.bowler_id,\n       ROUND(L.economy, 2)     AS economy\nFROM BatRank  B\nJOIN BowlRank L\n  ON L.season_id = B.season_id\nWHERE B.rk = 1 AND L.rk = 1\nORDER BY B.season_id;\n\n/* Answer the following: For every venue, list the two batsmen with the most fours and the two bowlers with the most wickets (excluding run out, hit wicket, retired hurt). Pair the results by rank (rank-1 batsman with rank-1 bowler, etc.). Return venue_id, rank, batsman_id, fours, bowler_id, wickets ordered by venue_id, rank. */\nWITH FourCnt AS (\n    SELECT venue_id,\n           batsman_id,\n           COUNT(*) AS fours,\n           ROW_NUMBER() OVER (PARTITION BY venue_id\n                              ORDER BY COUNT(*) DESC, batsman_id) AS rk\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    WHERE runs_off_bat = 4\n    GROUP BY venue_id, batsman_id\n),\nWktCnt AS (\n    SELECT venue_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY venue_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    WHERE dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY venue_id, bowler_id\n)\nSELECT F.venue_id,\n       F.rk                            AS rank,\n       F.batsman_id,\n       F.fours,\n       W.bowler_id,\n       W.wkts                          AS wickets\nFROM FourCnt F\nJOIN WktCnt W\n  ON W.venue_id = F.venue_id\n AND W.rk       = F.rk\nWHERE F.rk <= 2\nORDER BY F.venue_id, F.rk;\n\n/* Answer the following: Across all IPL history, retrieve the five bowlers with the best bowling average (runs conceded per wicket) among those who have bowled at least 200 balls and taken at least 20 wickets. Break ties using the lower bowler_id. Return bowler_id and bowling_average. */\nWITH BowlStats AS (\n    SELECT bowler_id,\n           SUM(total_runs)          AS runs_conceded,\n           COUNT(*)                 AS balls_bowled,\n           COUNT(CASE WHEN dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n                       THEN 1 END)  AS wickets\n    FROM ball_by_ball\n    GROUP BY bowler_id\n    HAVING COUNT(*) >= 200 AND wickets >= 20\n)\nSELECT bowler_id,\n       ROUND(runs_conceded * 1.0 / wickets, 2) AS bowling_average\nFROM BowlStats\nORDER BY bowling_average ASC, bowler_id\nLIMIT 5;\n\n/* Answer the following: For every match in the 2019 season, identify (a) the bowler who took the most wickets in power-play overs (1\u20136) and (b) the batsman who scored the most runs in death overs (16\u201320). Ignore run-out, hit-wicket, retired-hurt dismissals for wickets and break all ties with the lower player_id. Return match_id, batsman_id, runs_in_death, bowler_id, powerplay_wkts ordered by match_id. */\nWITH Season19 AS (\n    SELECT match_id, season_id\n    FROM matches\n    WHERE season_id = 2019\n),\nPP_Wkts AS (\n    SELECT b.match_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY b.match_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM Season19 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE over BETWEEN 1 AND 6\n      AND dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY b.match_id, bowler_id\n),\nDeathRuns AS (\n    SELECT b.match_id,\n           batsman_id,\n           SUM(runs_off_bat) AS runs,\n           ROW_NUMBER() OVER (PARTITION BY b.match_id\n                              ORDER BY SUM(runs_off_bat) DESC, batsman_id) AS rk\n    FROM Season19 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE over BETWEEN 16 AND 20\n    GROUP BY b.match_id, batsman_id\n)\nSELECT s.match_id,\n       d.batsman_id,\n       d.runs        AS runs_in_death,\n       p.bowler_id,\n       p.wkts        AS powerplay_wkts\nFROM Season19 s\nJOIN DeathRuns d ON d.match_id = s.match_id AND d.rk = 1\nJOIN PP_Wkts  p ON p.match_id = s.match_id AND p.rk = 1\nORDER BY s.match_id;\n\n/* Answer the following: For each team in the 2020 season, find the top run-scorer and the top wicket-taker (ignoring run out, hit wicket, retired hurt dismissals). Break ties by lower player_id. Return team_id, batsman_id, runs, bowler_id, wickets ordered by team_id. */\nWITH Season20 AS (\n    SELECT match_id\n    FROM matches\n    WHERE season_id = 2020\n),\nBatRuns AS (\n    SELECT batting_team_id AS team_id,\n           batsman_id,\n           SUM(runs_off_bat) AS runs,\n           ROW_NUMBER() OVER (PARTITION BY batting_team_id\n                              ORDER BY SUM(runs_off_bat) DESC, batsman_id) AS rk\n    FROM Season20 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    GROUP BY batting_team_id, batsman_id\n),\nBowlWkts AS (\n    SELECT bowling_team_id AS team_id,\n           bowler_id,\n           COUNT(*) AS wkts,\n           ROW_NUMBER() OVER (PARTITION BY bowling_team_id\n                              ORDER BY COUNT(*) DESC, bowler_id) AS rk\n    FROM Season20 s\n    JOIN ball_by_ball b ON b.match_id = s.match_id\n    WHERE dismissal_type NOT IN ('run out', 'hit wicket', 'retired hurt')\n    GROUP BY bowling_team_id, bowler_id\n)\nSELECT B.team_id,\n       B.batsman_id,\n       B.runs,\n       W.bowler_id,\n       W.wkts AS wickets\nFROM BatRuns B\nJOIN BowlWkts W\n  ON W.team_id = B.team_id\nWHERE B.rk = 1 AND W.rk = 1\nORDER BY B.team_id;\n\n/* Answer the following: For every IPL season, determine the batting partnership (pair of batsmen) that scored the highest total runs across the whole season. Use the lower sum of player_ids to break ties. Return season_id, batsman1_id, batsman2_id, partnership_runs ordered by season_id. */\nWITH PairRuns AS (\n    SELECT season_id,\n           LEAST(striker_id, non_striker_id)  AS p1,\n           GREATEST(striker_id, non_striker_id) AS p2,\n           SUM(runs_off_bat)                   AS pruns\n    FROM matches\n    JOIN ball_by_ball USING (match_id)\n    GROUP BY season_id, LEAST(striker_id, non_striker_id), GREATEST(striker_id, non_striker_id)\n),\nPairRank AS (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY season_id\n                              ORDER BY pruns DESC, (p1 + p2) ASC) AS rk\n    FROM PairRuns\n)\nSELECT season_id,\n       p1 AS batsman1_id,\n       p2 AS batsman2_id,\n       pruns AS partnership_runs\nFROM PairRank\nWHERE rk = 1\nORDER BY season_id;\n\n/* Answer the following: For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Can you calculate the median from the highest season goals of each team?",
            "evidence": "",
            "raw_question": "Can you calculate the median from the highest season goals of each team?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which partnership recorded the single-highest number of runs in the entire tournament?  Return the match id, the two player ids (player with more runs first, or higher id when tied), their individual runs and the partnership total. */\nSELECT\n    match_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_id ELSE partner_id\n    END   AS player1_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_id ELSE player_id\n    END   AS player2_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_runs ELSE partner_runs\n    END   AS player1_runs,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_runs ELSE player_runs\n    END   AS player2_runs,\n    partnership_runs\nFROM Partnership\nORDER BY partnership_runs DESC\nLIMIT 1;\n\n/* Answer the following: For match 101, list the top three partnerships by runs, showing the two player ids (higher scorer first) together with their individual and partnership scores. */\nSELECT\n    match_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_id ELSE partner_id\n    END   AS player1_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_id ELSE player_id\n    END   AS player2_id,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN player_runs ELSE partner_runs\n    END   AS player1_runs,\n    CASE\n        WHEN player_runs > partner_runs\n             OR (player_runs = partner_runs AND player_id > partner_id)\n             THEN partner_runs ELSE player_runs\n    END   AS player2_runs,\n    partnership_runs\nFROM Partnership\nWHERE match_id = 101\nORDER BY partnership_runs DESC\nLIMIT 3;\n\n/* Answer the following: Provide the average partnership-runs for each match. */\nSELECT\n    match_id,\n    AVG(partnership_runs) AS avg_partnership_runs\nFROM Partnership\nGROUP BY match_id;\n\n/* Answer the following: For every player, show the total runs he scored in all his partnerships (counting only his own runs, not his partner\u2019s). */\nSELECT\n    player_id,\n    SUM(player_runs) AS total_individual_runs_in_partnerships\nFROM (\n    SELECT player_id, player_runs FROM Partnership\n    UNION ALL\n    SELECT partner_id AS player_id, partner_runs AS player_runs FROM Partnership\n) AS all_parts\nGROUP BY player_id;\n\n/* Answer the following: Which pair of players (over all matches combined) has accumulated the highest total partnership runs together?  Return player1 id, player2 id (lower id first), and their cumulative runs. */\nSELECT\n    LEAST(p1.player_id , p1.partner_id)  AS player_low_id,\n    GREATEST(p1.player_id , p1.partner_id) AS player_high_id,\n    SUM(p1.partnership_runs)              AS total_runs_together\nFROM Partnership AS p1\nGROUP BY LEAST(p1.player_id , p1.partner_id),\n         GREATEST(p1.player_id , p1.partner_id)\nORDER BY total_runs_together DESC\nLIMIT 1;\n\n/* Answer the following: For each match, identify the player with the highest individual score and return his id, the score, and his team id. */\nSELECT\n    m.match_id,\n    pm.player_id,\n    pm.runs_scored,\n    pm.team_id\nFROM PlayerMatch AS pm\nJOIN (\n    SELECT match_id,\n           MAX(runs_scored) AS top_score\n    FROM PlayerMatch\n    GROUP BY match_id\n) AS t\nON t.match_id = pm.match_id AND t.top_score = pm.runs_scored;\n\n/* Answer the following: Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "evidence": "",
            "raw_question": "In each league, considering all seasons, which single team has the fewest total match wins based on comparing home and away goals, including teams with zero wins, ensuring that if multiple teams tie for the fewest wins, only one team is returned for each league?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which five genres released after 2010 have the highest average rating (consider only genres with at least 20 movies)? */\nSELECT g.name,\n       AVG(m.rating) AS avg_rating\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nWHERE m.year > 2010\nGROUP BY g.id\nHAVING COUNT(*) >= 20\nORDER BY avg_rating DESC\nLIMIT 5;\n\n/* Answer the following: Who is the director that has made the largest number of Drama movies with a rating higher than 7? */\nSELECT d.name,\n       COUNT(*) AS drama_hits\nFROM directors AS d\nJOIN movie_directors AS md ON d.id = md.director_id\nJOIN movies AS m ON md.movie_id = m.id\nJOIN movie_genres AS mg ON m.id = mg.movie_id\nJOIN genres AS g ON mg.genre_id = g.id\nWHERE g.name = 'Drama'\n  AND m.rating > 7\nGROUP BY d.id\nORDER BY drama_hits DESC\nLIMIT 1;\n\n/* Answer the following: Give the ten actors who have appeared in at least five films rated above 8, showing their names and the number of such appearances. */\nSELECT a.name,\n       COUNT(*) AS high_rated_roles\nFROM actors AS a\nJOIN movie_actors AS ma ON a.id = ma.actor_id\nJOIN movies AS m ON ma.movie_id = m.id\nWHERE m.rating > 8\nGROUP BY a.id\nHAVING COUNT(*) >= 5\nORDER BY high_rated_roles DESC\nLIMIT 10;\n\n/* Answer the following: For each genre, what is the highest-rated movie released in 2020? List the genre, movie title and its rating. */\nSELECT g.name   AS genre,\n       m.title  AS top_2020_title,\n       m.rating\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nWHERE m.year = 2020\n  AND m.rating = (\n        SELECT MAX(m2.rating)\n        FROM movie_genres AS mg2\n        JOIN movies AS m2 ON mg2.movie_id = m2.id\n        WHERE mg2.genre_id = g.id\n          AND m2.year = 2020\n  );\n\n/* Answer the following: How many movies in each genre have been directed by female directors? Provide the genres in descending order of that count. */\nSELECT g.name,\n       COUNT(DISTINCT m.id) AS films_by_females\nFROM genres AS g\nJOIN movie_genres AS mg ON g.id = mg.genre_id\nJOIN movies AS m ON mg.movie_id = m.id\nJOIN movie_directors AS md ON m.id = md.movie_id\nJOIN directors AS d ON md.director_id = d.id\nWHERE d.gender = 'F'\nGROUP BY g.id\nORDER BY films_by_females DESC;\n\n/* Answer the following: Which three directors have earned the highest total box-office revenue from Action films? Return their names with the summed revenue. */\nSELECT d.name,\n       SUM(m.revenue) AS total_action_revenue\nFROM directors AS d\nJOIN movie_directors AS md ON d.id = md.director_id\nJOIN movies AS m ON md.movie_id = m.id\nJOIN movie_genres AS mg ON m.id = mg.movie_id\nJOIN genres AS g ON mg.genre_id = g.id\nWHERE g.name = 'Action'\nGROUP BY d.id\nORDER BY total_action_revenue DESC\nLIMIT 3;\n\n/* Answer the following: Determine the top three genres with the most movies rated above 8, and then identify the top four directors who have directed the most films rated above 8 within those genres. List these directors and their respective movie counts.",
            "n_examples": 6,
            "db_id": "imdb_movies"
        },
        {
            "question": "Tell me top10 teams with the most wins across the league",
            "evidence": "",
            "raw_question": "Tell me top10 teams with the most wins across the league",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Calculate the duration of each track, classify them as short (under 3 min), medium (3\u20135 min) or long (over 5 min), then show the minimum and maximum time for each class in minutes together with the total revenue earned by the tracks in that class. */\nSELECT\n    CASE\n        WHEN length_sec < 180                 THEN 'short'\n        WHEN length_sec BETWEEN 180 AND 300   THEN 'medium'\n        ELSE                                        'long'\n    END                                                   AS duration_class,\n    MIN(length_sec) / 60.0                                AS min_minutes,\n    MAX(length_sec) / 60.0                                AS max_minutes,\n    SUM(revenue)                                          AS total_revenue\nFROM track\nGROUP BY duration_class;\n\n/* Answer the following: Group every movie by length (short < 90 min, medium 90\u2013150 min, long > 150 min) and list the minimum and maximum running time inside each group together with the total worldwide gross for that group. */\nSELECT\n    CASE\n        WHEN runtime_min < 90                  THEN 'short'\n        WHEN runtime_min BETWEEN 90 AND 150    THEN 'medium'\n        ELSE                                        'long'\n    END                                                  AS length_group,\n    MIN(runtime_min)                                     AS shortest_min,\n    MAX(runtime_min)                                     AS longest_min,\n    SUM(worldwide_gross)                                 AS group_gross\nFROM movie\nGROUP BY length_group;\n\n/* Answer the following: Classify podcast episodes as bite-size (<10 min), standard (10\u201330 min) or marathon (>30 min).  For each class return the minimum length, maximum length and the total advertising revenue generated. */\nSELECT\n    CASE\n        WHEN duration_sec < 600                   THEN 'bite-size'\n        WHEN duration_sec BETWEEN 600 AND 1800    THEN 'standard'\n        ELSE                                           'marathon'\n    END                                                     AS ep_type,\n    MIN(duration_sec) / 60.0                                AS min_min,\n    MAX(duration_sec) / 60.0                                AS max_min,\n    SUM(ad_revenue)                                         AS ads_total\nFROM episode\nGROUP BY ep_type;\n\n/* Answer the following: Divide audio-books into tiny (<2 hr), mid-size (2\u20136 hr) and epic (>6 hr).  Show the minimum and maximum running time (in hours) as well as total sales for every size group. */\nSELECT\n    CASE\n        WHEN length_min < 120                   THEN 'tiny'\n        WHEN length_min BETWEEN 120 AND 360     THEN 'mid-size'\n        ELSE                                         'epic'\n    END                                                AS size_bucket,\n    MIN(length_min) / 60.0                             AS min_hours,\n    MAX(length_min) / 60.0                             AS max_hours,\n    SUM(sales_amount)                                  AS total_sales\nFROM audiobook\nGROUP BY size_bucket;\n\n/* Answer the following: Put training videos into short (<15 min), medium (15\u201340 min) or long (>40 min).  Return, for each label, the minimum / maximum video length (minutes) and the combined subscription revenue produced. */\nSELECT\n    CASE\n        WHEN duration_min < 15                 THEN 'short'\n        WHEN duration_min BETWEEN 15 AND 40    THEN 'medium'\n        ELSE                                        'long'\n    END                                               AS video_len_cat,\n    MIN(duration_min)                                 AS min_min,\n    MAX(duration_min)                                 AS max_min,\n    SUM(subscription_rev)                             AS sub_total\nFROM training_video\nGROUP BY video_len_cat;\n\n/* Answer the following: Classify workout sessions as quick (<20 min), regular (20\u201350 min) or endurance (>50 min).  Provide the shortest and longest session time and the total pay-per-view income for each classification. */\nSELECT\n    CASE\n        WHEN session_min < 20                   THEN 'quick'\n        WHEN session_min BETWEEN 20 AND 50      THEN 'regular'\n        ELSE                                         'endurance'\n    END                                                   AS session_type,\n    MIN(session_min)                                      AS min_session,\n    MAX(session_min)                                      AS max_session,\n    SUM(ppv_income)                                       AS income_total\nFROM workout_session\nGROUP BY session_type;\n\n/* Answer the following: Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "n_examples": 6,
            "db_id": "music"
        },
        {
            "question": "Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "evidence": "",
            "raw_question": "Which player has participated in the highest number of winning matches and which player has participated in the highest number of losing matches, considering only matches where they actually played (excluding null entries) and where their team won or lost (excluding draws)?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which are the top 3 companies by average salary in the entire country after stripping all non-numeric characters from the salary column? */\nSELECT company_name\nFROM salary_data\nGROUP BY company_name\nORDER BY AVG(\n         CAST( REGEXP_REPLACE(salary , '[^0-9.]' , '' , 'g') AS NUMERIC)\n       ) DESC\nLIMIT 3;\n\n\n/* Answer the following: What is the median salary (after cleaning) of employees located in Bangalore? */\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY clean_salary) AS median_salary\nFROM (\n        SELECT CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC) AS clean_salary\n        FROM salary_data\n        WHERE location = 'Bangalore'\n     ) AS sub;\n\n\n/* Answer the following: Compare the national average salary of employees in the \u201cIT\u201d sector to those in the \u201cManufacturing\u201d sector.  Return two columns: sector and avg_salary. */\nSELECT sector,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nWHERE sector IN ('IT','Manufacturing')\nGROUP BY sector;\n\n\n/* Answer the following: For every company that operates in Chennai, show the absolute difference between its average salary in Chennai and the national average salary for that company (after cleaning salaries). */\nWITH national AS (\n    SELECT company_name,\n           AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS nat_avg\n    FROM salary_data\n    GROUP BY company_name\n),\nchennai AS (\n    SELECT company_name,\n           AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS chn_avg\n    FROM salary_data\n    WHERE location = 'Chennai'\n    GROUP BY company_name\n)\nSELECT 'Chennai'                     AS location,\n       c.company_name,\n       c.chn_avg                     AS avg_salary_chennai,\n       n.nat_avg                     AS avg_salary_national,\n       ABS(c.chn_avg - n.nat_avg)    AS diff\nFROM chennai c\nJOIN national n USING (company_name);\n\n\n/* Answer the following: List the 5 job titles in Kolkata that have the highest average cleaned salary.  Show the job title and its average salary. */\nSELECT job_title,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nWHERE location = 'Kolkata'\nGROUP BY job_title\nORDER BY avg_salary DESC\nLIMIT 5;\n\n\n/* Answer the following: Which city has the highest overall average salary once salaries are converted to numeric values?  Return the city name and its average salary. */\nSELECT location,\n       AVG(CAST(REGEXP_REPLACE(salary,'[^0-9.]','','g') AS NUMERIC)) AS avg_salary\nFROM salary_data\nGROUP BY location\nORDER BY avg_salary DESC\nLIMIT 1;\n\n\n/* Answer the following: Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "n_examples": 6,
            "db_id": "education_business"
        },
        {
            "question": "For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "evidence": "",
            "raw_question": "For each IPL season, identify the top three batsmen with the highest total runs scored and the top three bowlers with the most wickets taken, excluding \u2018run out\u2019, \u2018hit wicket\u2019, and \u2018retired hurt\u2019 dismissals. In the event of ties in runs or wickets, break the tie using the smaller player ID. Then output these six players in matched positions\u2014batsman 1 with bowler 1, batsman 2 with bowler 2, and batsman 3 with bowler 3\u2014in ascending order of the season ID, along with each player\u2019s total runs or wickets.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Who was the highest wicket-taker in the 2021 IPL season, ignoring run-outs and other dismissals that do not credit the bowler? */\nSELECT P.player_name ,\n       COUNT(*) AS wickets\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.tournament = 'IPL'\n  AND  M.season     = 2021\n  AND  B.wicket_type IS NOT NULL\n  AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field' , 'handled the ball')\nGROUP  BY P.player_name\nORDER  BY wickets DESC\nLIMIT  1;\n\n\n/* Answer the following: What was Pat Cummins\u2019 economy rate in the 2019 Ashes series (runs off the bat per over, wides and no-balls excluded)? */\nSELECT ( SUM(B.runs_off_bat) * 1.0 ) / ( COUNT(*) / 6.0 ) AS economy_rate\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  P.player_name = 'Pat Cummins'\n  AND  M.series      = 'The Ashes'\n  AND  M.season      = 2019\n  AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') );\n\n\n/* Answer the following: List every bowler whose career T20I strike-rate is below 18 (minimum 50 wickets), ordered from best to worst.  Strike-rate is balls per wicket. */\nSELECT P.player_name ,\n       ( COUNT(*) * 1.0 ) /\n       SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) AS strike_rate\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.match_format = 'T20I'\n  AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\nGROUP  BY P.player_name\nHAVING SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) >= 50\n   AND ( COUNT(*) * 1.0 ) /\n       SUM( CASE WHEN B.wicket_type IS NOT NULL\n                 AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                 THEN 1 ELSE 0 END ) < 18\nORDER  BY strike_rate ASC;\n\n\n/* Answer the following: How many \u2018bowled\u2019 dismissals did each bowler achieve in the 2022 international season? */\nSELECT P.player_name ,\n       COUNT(*) AS bowled_wkts\nFROM   Balls   AS B\nJOIN   Matches AS M ON M.match_id  = B.match_id\nJOIN   Players AS P ON P.player_id = B.bowler_id\nWHERE  M.season      = 2022\n  AND  B.wicket_type = 'bowled'\nGROUP  BY P.player_name\nORDER  BY bowled_wkts DESC;\n\n\n/* Answer the following: For every bowler, give his best bowling figure in the 2015 World Cup (format \u201cwickets-runs\u201d, runs exclude wides and no-balls). */\nWITH per_match AS (\n    SELECT B.bowler_id ,\n           B.match_id ,\n           SUM( CASE WHEN B.wicket_type IS NOT NULL\n                     AND  B.wicket_type NOT IN ('run out' , 'retired hurt' , 'obstructing the field')\n                     THEN 1 ELSE 0 END ) AS wkts ,\n           SUM( B.runs_off_bat )          AS runs\n    FROM   Balls   AS B\n    JOIN   Matches AS M ON M.match_id = B.match_id\n    WHERE  M.tournament = 'World Cup'\n      AND  M.season     = 2015\n      AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\n    GROUP  BY B.bowler_id , B.match_id\n)\nSELECT P.player_name ,\n       CONCAT(wkts , '-' , runs) AS best_figure\nFROM   (\n       SELECT bowler_id , wkts , runs ,\n              ROW_NUMBER() OVER (PARTITION BY bowler_id\n                                 ORDER BY wkts DESC , runs ASC) AS rn\n       FROM   per_match\n) X\nJOIN   Players P ON P.player_id = X.bowler_id\nWHERE  rn = 1;\n\n\n/* Answer the following: Which bowler delivered the most maiden overs (overs conceding zero runs off the bat) in Test matches during 2020? */\nWITH over_runs AS (\n    SELECT B.bowler_id ,\n           B.match_id ,\n           B.innings_no ,\n           B.over_id ,\n           SUM(B.runs_off_bat) AS runs_in_over\n    FROM   Balls   AS B\n    JOIN   Matches AS M ON M.match_id = B.match_id\n    WHERE  M.match_format = 'Test'\n      AND  M.season       = 2020\n      AND  ( B.extras_type IS NULL OR B.extras_type NOT IN ('wide' , 'no ball') )\n    GROUP  BY B.bowler_id , B.match_id , B.innings_no , B.over_id\n)\nSELECT P.player_name ,\n       COUNT(*) AS maiden_overs\nFROM   over_runs\nJOIN   Players P ON P.player_id = over_runs.bowler_id\nWHERE  runs_in_over = 0\nGROUP  BY P.player_name\nORDER  BY maiden_overs DESC\nLIMIT  1;\n\n\n/* Answer the following: Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "evidence": "",
            "raw_question": "Find the IDs of players who scored the highest number of partnership runs for each match. The output should include the IDs of two players, each with their individual scores and the total partnership score. For each pair, the player with the higher individual score should be listed as player 1, and the player with the lower score as player 2. In cases where both players have the same score, the player with the higher ID should be player 1, and the player with the lower ID should be player 2. There can be multiple rows for a single match.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which player has bowled the greatest number of overs in his entire IPL career? greatest number of overs refers to MAX(SUM(overs)) per player */\nSELECT P.player_name\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nGROUP BY P.player_id, P.player_name\nORDER BY SUM(PM.overs) DESC\nLIMIT 1;\n\n/* Answer the following: List the id, name and total runs of the top-5 run-scorers in IPL history. total runs refers to SUM(batting_score) */\nSELECT P.player_id,\n       P.player_name,\n       SUM(PM.batting_score) AS total_runs\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nGROUP BY P.player_id, P.player_name\nORDER BY total_runs DESC\nLIMIT 5;\n\n/* Answer the following: Give the names of all right-hand batsmen who bowl left-arm spin. right-hand batsmen refers to batting_hand = 'Right-hand bat'; left-arm spin refers to bowling_skill LIKE '%left-arm%' */\nSELECT player_name\nFROM player\nWHERE batting_hand = 'Right-hand bat'\n  AND bowling_skill LIKE '%left-arm%';\n\n/* Answer the following: What is the highest individual batting score ever recorded in an IPL match? highest individual batting score refers to MAX(batting_score) */\nSELECT MAX(batting_score)\nFROM player_match;\n\n/* Answer the following: Which player has the best bowling figure in a single match? best bowling figure means the most wickets in one match, and if tied the fewest runs conceded; show player name, wickets and runs conceded */\nSELECT P.player_name,\n       PM.wickets,\n       PM.runs_conceded\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nWHERE (PM.wickets, PM.runs_conceded) IN (\n      SELECT PM2.wickets,\n             MIN(PM2.runs_conceded)\n      FROM player_match AS PM2\n      GROUP BY PM2.wickets\n      ORDER BY PM2.wickets DESC\n      LIMIT 1\n);\n\n/* Answer the following: Find the strike rate of \u201cVirat Kohli\u201d across his career. strike rate refers to 100 * SUM(runs) / SUM(balls) */\nSELECT 100.0 * SUM(PM.batting_score) / SUM(PM.balls) AS strike_rate\nFROM player AS P\nJOIN player_match AS PM ON P.player_id = PM.player_id\nWHERE P.player_name = 'Virat Kohli';\n\n/* Answer the following: For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "n_examples": 6,
            "db_id": "IPL"
        },
        {
            "question": "Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "evidence": "",
            "raw_question": "Calculate the duration of each track, classify them as short, medium, or long, output the minimum and maximum time for each kind (in minutes) and the total revenue for each category, group by the category.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: In step 1, which versions have a greater number of problems solved by the \u2018Stack\u2019 model (test_score = 1) than by all non-\u2018Stack\u2019 models combined? solved refers to test_score = 1; step 1 refers to step = 1 */\nSELECT R1.version\nFROM results AS R1\nWHERE R1.model = 'Stack'\n  AND R1.step = 1\n  AND R1.test_score = 1\nGROUP BY R1.version\nHAVING COUNT(*) >\n       (\n         SELECT COUNT(*)\n         FROM results AS R2\n         WHERE R2.version = R1.version\n           AND R2.step = 1\n           AND R2.model <> 'Stack'\n           AND R2.test_score = 1\n       );\n\n/* Answer the following: For every problem, what is the highest test score achieved in version \u2018v3\u2019 across all models and steps? version \u2018v3\u2019 refers to version = 'v3' */\nSELECT problem_id, MAX(test_score) AS max_test_score\nFROM results\nWHERE version = 'v3'\nGROUP BY problem_id;\n\n/* Answer the following: List the problems where any model achieved a perfect validation score (validation_score = 1) but failed the test (test_score < 1) in step 2. step 2 refers to step = 2 */\nSELECT DISTINCT problem_id\nFROM results\nWHERE step = 2\n  AND validation_score = 1\n  AND test_score < 1;\n\n/* Answer the following: Which models have an average validation score higher than their average test score across all problems, versions, and steps? */\nSELECT model\nFROM results\nGROUP BY model\nHAVING AVG(validation_score) > AVG(test_score);\n\n/* Answer the following: Give the total number of result rows whose test score is NULL. test score is NULL refers to test_score IS NULL */\nSELECT COUNT(*)\nFROM results\nWHERE test_score IS NULL;\n\n/* Answer the following: In step 3, which problem has the largest gap between the \u2018Stack\u2019 model\u2019s test score and the best non-\u2018Stack\u2019 model\u2019s test score within the same version? step 3 refers to step = 3; largest gap refers to MAX(Stack_score \u2013 Best_other_score) */\nSELECT R1.problem_id\nFROM (\n    SELECT version,\n           problem_id,\n           MAX(test_score) AS stack_score\n    FROM results\n    WHERE model = 'Stack'\n      AND step = 3\n    GROUP BY version, problem_id\n) AS R1\nJOIN (\n    SELECT version,\n           problem_id,\n           MAX(test_score) AS best_other_score\n    FROM results\n    WHERE model <> 'Stack'\n      AND step = 3\n    GROUP BY version, problem_id\n) AS R2\nON R1.version = R2.version\nAND R1.problem_id = R2.problem_id\nORDER BY (R1.stack_score - R2.best_other_score) DESC\nLIMIT 1;\n\n/* Answer the following: Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "n_examples": 6,
            "db_id": "stacking"
        },
        {
            "question": "Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "evidence": "",
            "raw_question": "Using a Salary Dataset where the salary values need to be cleaned by removing non-numeric characters and converting them to a numeric type, write a detailed SQL query that identifies the top 5 companies by average salary in each of Mumbai, Pune, New Delhi, and Hyderabad, then compares each company\u2019s average salary in those cities to the overall national average salary. The final result should display four columns: Location, Company Name, Average Salary in State, and Average Salary in Country, listing only the top 5 companies in each of the specified locations.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the highest test-score reached by a non-'Stack' component for every model? non-'Stack' component refers to component <> 'Stack'. */\nSELECT \n    M.name , \n    M.version , \n    MAX(S.test_score) AS best_non_stack_score\nFROM Models AS M\nJOIN Steps  AS S  ON S.model_id = M.model_id\nWHERE S.component <> 'Stack'\nGROUP BY M.name , M.version ;\n\n/* Answer the following: How many models are classified as having a strong status? strong status refers to EXISTS a step where MAX(test_score) of non-'Stack' components < test_score of the 'Stack' component. */\nSELECT COUNT(*) \nFROM Models AS M\nWHERE EXISTS (\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component  = 'Stack'\n          AND S1.test_score > (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n);\n\n/* Answer the following: List the name and version of every model with soft status but without strong status. soft status refers to one step where MAX(non-'Stack') = Stack, while no step satisfies strong status. */\nSELECT DISTINCT M.name , M.version\nFROM Models AS M\nWHERE EXISTS (               -- at least one soft step\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component = 'Stack'\n          AND S1.test_score = (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n)\nAND NOT EXISTS (             -- zero strong steps\n        SELECT 1\n        FROM Steps AS S3\n        WHERE S3.model_id = M.model_id\n          AND S3.component = 'Stack'\n          AND S3.test_score > (\n                SELECT MAX(S4.test_score)\n                FROM Steps AS S4\n                WHERE S4.model_id = M.model_id\n                  AND S4.step_number = S3.step_number\n                  AND S4.component <> 'Stack'\n          )\n);\n\n/* Answer the following: For every L1_model, how many associated models (name, version) have a strong status? */\nSELECT \n    M.l1_model , \n    COUNT(DISTINCT M.model_id) AS strong_model_cnt\nFROM Models AS M\nWHERE EXISTS (\n        SELECT 1\n        FROM Steps AS S1\n        WHERE S1.model_id = M.model_id\n          AND S1.component = 'Stack'\n          AND S1.test_score > (\n                SELECT MAX(S2.test_score)\n                FROM Steps AS S2\n                WHERE S2.model_id = M.model_id\n                  AND S2.step_number = S1.step_number\n                  AND S2.component <> 'Stack'\n          )\n)\nGROUP BY M.l1_model ;\n\n/* Answer the following: Which L1_model has the highest average 'Stack' test score across all of its models? 'Stack' refers to component = 'Stack'. */\nSELECT \n    M.l1_model\nFROM Models  AS M\nJOIN Steps   AS S ON S.model_id = M.model_id\nWHERE S.component = 'Stack'\nGROUP BY M.l1_model\nORDER BY AVG(S.test_score) DESC\nLIMIT 1;\n\n/* Answer the following: Which model (name and version) shows the largest positive gap between its best 'Stack' score and its best non-'Stack' score? */\nWITH best_scores AS (\n    SELECT \n        M.model_id ,\n        M.name ,\n        M.version ,\n        MAX(CASE WHEN S.component = 'Stack'     THEN S.test_score END) AS best_stack ,\n        MAX(CASE WHEN S.component <> 'Stack'   THEN S.test_score END) AS best_non_stack\n    FROM Models AS M\n    JOIN Steps  AS S ON S.model_id = M.model_id\n    GROUP BY M.model_id , M.name , M.version\n)\nSELECT \n    name , \n    version\nFROM best_scores\nORDER BY (best_stack - best_non_stack) DESC\nLIMIT 1;\n\n/* Answer the following: Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "n_examples": 6,
            "db_id": "stacking"
        },
        {
            "question": "Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "evidence": "",
            "raw_question": "Calculate the total number of wickets taken by each bowler (excluding run-outs and other dismissals not attributed to the bowler), their economy rate (total runs conceded divided by total overs bowled, considering only runs scored off the bat and ignoring any extra runs like wides and no-balls), their strike rate (average number of balls bowled per wicket taken), and their best bowling performance in a single match (the match with the most wickets taken by the bowler, formatted as \"wickets-runs\" where runs are the runs conceded excluding extras).",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many total records correspond to the Stack model across all steps and versions? */\nSELECT COUNT(*) \nFROM model_comparison \nWHERE model_type = 'Stack';\n\n/* Answer the following: List every distinct version that has at least one traditional model entry. */\nSELECT DISTINCT version \nFROM model_comparison \nWHERE model_type = 'Traditional';\n\n/* Answer the following: Which step contains the highest number of traditional\u2013model rows, and what is that row-count? */\nSELECT step, COUNT(*) AS row_cnt\nFROM model_comparison\nWHERE model_type = 'Traditional'\nGROUP BY step\nORDER BY row_cnt DESC\nLIMIT 1;\n\n/* Answer the following: For each version, give the number of Stack\u2013model rows, sorted from most to fewest. */\nSELECT version, COUNT(*) AS stack_rows\nFROM model_comparison\nWHERE model_type = 'Stack'\nGROUP BY version\nORDER BY stack_rows DESC;\n\n/* Answer the following: Which L1_model categories appear in both the Stack and Traditional model groups? */\nSELECT DISTINCT L1_model\nFROM model_comparison\nWHERE model_type = 'Stack'\nINTERSECT\nSELECT DISTINCT L1_model\nFROM model_comparison\nWHERE model_type = 'Traditional';\n\n/* Answer the following: Find the version with the fewest distinct steps among Stack models and return that version together with the number of different steps it contains. */\nSELECT version, COUNT(DISTINCT step) AS steps_cnt\nFROM model_comparison\nWHERE model_type = 'Stack'\nGROUP BY version\nORDER BY steps_cnt ASC\nLIMIT 1;\n\n/* Answer the following: Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "n_examples": 6,
            "db_id": "stacking"
        },
        {
            "question": "For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "evidence": "",
            "raw_question": "For each player, list their ID, name, their most frequent role across all matches, batting hand, bowling skill, total runs scored, total matches played, total times they were dismissed, batting average (total runs divided by total dismissals), highest score in a single match, the number of matches in which they scored at least 30 runs, at least 50 runs, and at least 100 runs, total balls faced in their career, strike rate (total runs divided by total balls faced, multiplied by 100), total wickets taken, economy rate (average runs conceded per over), and their best bowling performance in a single match (most wickets taken in a match, formatted as \"wickets taken-runs given\", where the best performance is the one with the most wickets, and if tied, the fewest runs conceded). Ignore the extra runs data.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which packaging combination contains the largest number of distinct leaf-level items after fully expanding every nested layer?  A leaf-level item is any component whose id exists in the Items table (i.e., it is not itself a package). */\nWITH RECURSIVE unpack AS (\n    /* start with components that are listed directly inside a package */\n    SELECT \n        pc.parent_package_id       AS root_pkg,\n        pc.child_component_id      AS component_id\n    FROM package_components AS pc\n    \n    UNION ALL\n        \n    /* if that component is itself a package, keep drilling down */\n    SELECT \n        u.root_pkg,\n        pc.child_component_id\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)           -- only keep walking when the node is itself a package\n)\nSELECT p.package_name\nFROM unpack AS u\nJOIN packages AS p ON p.package_id = u.root_pkg\nWHERE u.component_id IN (SELECT item_id FROM items)                      -- keep only leaves\nGROUP BY p.package_id, p.package_name\nORDER BY COUNT(DISTINCT u.component_id) DESC\nLIMIT 1;\n\n\n\n/* Answer the following: In the combination called \u201cGift Box Deluxe\u201d, what is the total quantity of the item \u201cChocolate Bar\u201d after all inner packages have been unpacked? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.child_component_id      AS component_id,\n        pc.child_quantity          AS qty\n    FROM packages        AS p\n    JOIN package_components AS pc\n         ON pc.parent_package_id = p.package_id\n    WHERE p.package_name = 'Gift Box Deluxe'\n    \n    UNION ALL\n    \n    SELECT \n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT COALESCE(SUM(u.qty),0) AS total_chocolate_bars\nFROM unpack AS u\nJOIN items  AS i ON i.item_id = u.component_id\nWHERE i.item_name = 'Chocolate Bar';\n\n\n\n/* Answer the following: List the five leaf-level items that appear in the largest number of different packaging combinations (after recursive expansion). */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT i.item_name,\n       COUNT(DISTINCT u.root_pkg) AS combination_count\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id\nGROUP BY i.item_id, i.item_name\nORDER BY combination_count DESC\nLIMIT 5;\n\n\n\n/* Answer the following: For every packaging combination, what is the deepest nesting level encountered inside its hierarchy?  (Top-level components are depth 1.) */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.parent_package_id   AS root_pkg,\n        pc.child_component_id  AS component_id,\n        1                      AS depth\n    FROM package_components AS pc\n    \n    UNION ALL\n    \n    SELECT \n        u.root_pkg,\n        pc.child_component_id,\n        u.depth + 1\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT p.package_name,\n       MAX(depth) AS max_depth\nFROM unpack AS u\nJOIN packages AS p ON p.package_id = u.root_pkg\nGROUP BY p.package_id, p.package_name\nORDER BY max_depth DESC;\n\n\n\n/* Answer the following: Return the names of packaging combinations whose immediate children are all leaf-level items (i.e., they have no nested packages inside them). */\nSELECT p.package_name\nFROM packages AS p\nWHERE NOT EXISTS (\n        SELECT 1\n        FROM package_components AS pc\n        WHERE pc.parent_package_id = p.package_id\n          AND pc.child_component_id IN (SELECT package_id FROM packages)   -- child that is itself a package\n);\n\n\n\n/* Answer the following: What is the total weight (in grams) of the \u201cHoliday Bundle\u201d combination, assuming each leaf item\u2019s weight is stored in items.item_weight? */\nWITH RECURSIVE unpack AS (\n    SELECT \n        pc.child_component_id  AS component_id,\n        pc.child_quantity      AS qty\n    FROM packages AS p\n    JOIN package_components AS pc\n         ON pc.parent_package_id = p.package_id\n    WHERE p.package_name = 'Holiday Bundle'\n    \n    UNION ALL\n    \n    SELECT \n        pc.child_component_id,\n        u.qty * pc.child_quantity\n    FROM unpack AS u\n    JOIN package_components AS pc\n         ON pc.parent_package_id = u.component_id\n    WHERE u.component_id IN (SELECT package_id FROM packages)\n)\nSELECT SUM(u.qty * i.item_weight) AS total_weight_grams\nFROM unpack AS u\nJOIN items AS i ON i.item_id = u.component_id;\n\n\n\n/* Answer the following: What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "evidence": "",
            "raw_question": "Which problems exceed the total number of times they appear in the solution table when counting all occurrences, across steps 1, 2, and 3, where any non-\"Stack\" model's maximum test score is lower than the \"Stack\" model's test score for the same step and version?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which top-level packaging containers (those that are not placed inside any other packaging) hold more than 3 distinct kinds of items directly inside them?  */\nSELECT p.name\nFROM Packaging AS p\nJOIN PackagingItem AS pi ON pi.packaging_id = p.id\nWHERE p.parent_packaging_id IS NULL\nGROUP BY p.id, p.name\nHAVING COUNT(DISTINCT pi.item_id) > 3;\n\n/* Answer the following: What is the total quantity of the item called 'Screws' contained anywhere inside the packaging container named 'Box A', counting every nested level beneath it? */\nWITH RECURSIVE descendants AS (\n    SELECT id\n    FROM Packaging\n    WHERE name = 'Box A'\n    UNION ALL\n    SELECT c.id\n    FROM Packaging AS c\n    JOIN descendants AS d ON c.parent_packaging_id = d.id\n)\nSELECT SUM(pi.quantity)\nFROM descendants AS d\nJOIN PackagingItem AS pi ON pi.packaging_id = d.id\nJOIN Item AS i        ON i.id  = pi.item_id\nWHERE i.name = 'Screws';\n\n/* Answer the following: List the names of all items that appear in at least five different top-level containers. */\nSELECT i.name\nFROM Item AS i\nJOIN PackagingItem AS pi ON pi.item_id = i.id\nJOIN Packaging     AS p  ON p.id        = pi.packaging_id\nWHERE p.parent_packaging_id IS NULL\nGROUP BY i.id, i.name\nHAVING COUNT(DISTINCT p.id) >= 5;\n\n/* Answer the following: Which packaging container has the greatest total quantity of items directly inside it, and what is that total? */\nSELECT p.name, SUM(pi.quantity) AS total_quantity\nFROM Packaging AS p\nJOIN PackagingItem AS pi ON pi.packaging_id = p.id\nGROUP BY p.id, p.name\nORDER BY total_quantity DESC\nLIMIT 1;\n\n/* Answer the following: What are the names of items whose overall quantity across the entire warehouse (all packaging combined) is less than 10? */\nSELECT i.name\nFROM Item AS i\nJOIN PackagingItem AS pi ON pi.item_id = i.id\nGROUP BY i.id, i.name\nHAVING SUM(pi.quantity) < 10;\n\n/* Answer the following: Which non-top-level packaging units (those that have a parent) do not contain any items directly inside them? */\nSELECT p.name\nFROM Packaging AS p\nLEFT JOIN PackagingItem AS pi ON pi.packaging_id = p.id\nWHERE p.parent_packaging_id IS NOT NULL\nGROUP BY p.id, p.name\nHAVING COUNT(pi.item_id) = 0;\n\n/* Answer the following: Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "evidence": "",
            "raw_question": "Identify the L1_model associated with each model (specified by name and version) that occurs most frequently for each status ('strong' or 'soft'), along with the number of times it occurs. A model has a 'strong' status if, for any of its steps, the maximum test score among non-'Stack' models is less than the 'Stack' model's test score. It has a 'soft' status if the maximum test score among non-'Stack' models equals the 'Stack' model's test score. Count how many times each L1_model is associated with a 'strong' or 'soft' status across all models, and determine which L1_model has the highest occurrence for each status.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For order 423, what are the distinct product IDs together with the total quantity ordered for each? */\nSELECT product_id,\n       SUM(quantity) AS ordered_qty\nFROM order_lines\nWHERE order_id = 423\nGROUP BY product_id;\n\n/* Answer the following: For the products that appear on order 423, list every inventory location in warehouse 1, ordering them by oldest purchase_date and then by smallest on_hand quantity. */\nSELECT I.product_id,\n       I.id      AS location_id,\n       I.aisle,\n       I.position,\n       I.on_hand,\n       I.purchase_date\nFROM inventory AS I\nWHERE I.warehouse_id = 1\n  AND I.product_id IN (SELECT product_id\n                       FROM order_lines\n                       WHERE order_id = 423)\nORDER BY I.purchase_date,\n         I.on_hand;\n\n/* Answer the following: Provide the cumulative ordered quantity after each line for products that appear more than once on order 423. */\nSELECT line_number,\n       product_id,\n       quantity,\n       SUM(quantity) OVER (PARTITION BY product_id\n                           ORDER BY line_number) AS cumulative_qty\nFROM order_lines\nWHERE order_id = 423\nORDER BY line_number;\n\n/* Answer the following: Which products on order 423 do not have enough inventory in warehouse 1 to cover the total ordered quantity? */\nWITH ordered AS (\n  SELECT product_id,\n         SUM(quantity) AS ordered_qty\n  FROM order_lines\n  WHERE order_id = 423\n  GROUP BY product_id\n),\nstock AS (\n  SELECT product_id,\n         SUM(on_hand) AS available_qty\n  FROM inventory\n  WHERE warehouse_id = 1\n  GROUP BY product_id\n)\nSELECT o.product_id\nFROM ordered AS o\nLEFT JOIN stock AS s\n       ON s.product_id = o.product_id\nWHERE COALESCE(s.available_qty,0) < o.ordered_qty;\n\n/* Answer the following: For product 205 on order 423, return the first inventory location from which picking should start (oldest purchase_date and smallest on_hand in warehouse 1). */\nSELECT id    AS location_id,\n       aisle,\n       position,\n       on_hand\nFROM inventory\nWHERE warehouse_id = 1\n  AND product_id = 205\nORDER BY purchase_date,\n         on_hand\nLIMIT 1;\n\n/* Answer the following: Show the ordered quantity for product 205 on order 423 and the running total of available inventory as locations are sorted by purchase_date (warehouse 1). */\nWITH need AS (\n  SELECT SUM(quantity) AS ordered_qty\n  FROM order_lines\n  WHERE order_id = 423\n    AND product_id = 205\n)\nSELECT i.id       AS location_id,\n       i.purchase_date,\n       i.on_hand,\n       SUM(i.on_hand) OVER (ORDER BY i.purchase_date, i.on_hand) AS running_stock,\n       n.ordered_qty\nFROM inventory AS i\nCROSS JOIN need n\nWHERE i.warehouse_id = 1\n  AND i.product_id = 205\nORDER BY i.purchase_date,\n         i.on_hand;\n\n/* Answer the following: For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "evidence": "",
            "raw_question": "Which model category (L1_model) appears the most frequently across all steps and versions when comparing traditional models to the Stack model, and what is the total count of its occurrences?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many total units are currently available for each product across all inventory locations? */\nSELECT \n    P.product_name, \n    SUM(I.qty_available) AS total_qty_available\nFROM products AS P\nJOIN inventory AS I \n     ON P.product_id = I.product_id\nGROUP BY P.product_name\nORDER BY P.product_name;\n\n/* Answer the following: Which (product , location) pair has the smallest on-hand quantity among items purchased before 2023-01-01? purchased before 2023-01-01 refers to purchase_date < '2023-01-01' */\nSELECT \n    P.product_name, \n    I.location_id, \n    I.qty_available\nFROM inventory AS I\nJOIN products  AS P \n     ON P.product_id = I.product_id\nWHERE I.purchase_date < '2023-01-01'\nORDER BY I.qty_available ASC , I.purchase_date ASC\nLIMIT 1;\n\n/* Answer the following: What is the average fulfillment (picked / required) percentage for orders placed in March 2023? orders placed in March 2023 refers to order_date BETWEEN '2023-03-01' AND '2023-03-31' */\nWITH order_fulfillment AS (\n    SELECT \n        O.order_id,\n        SUM(PK.picked_qty) AS picked_qty,\n        O.qty_required\n    FROM orders AS O\n    JOIN picks  AS PK \n         ON PK.order_id = O.order_id\n    WHERE O.order_date BETWEEN '2023-03-01' AND '2023-03-31'\n    GROUP BY O.order_id, O.qty_required\n)\nSELECT \n    ROUND(AVG(picked_qty * 1.0 / qty_required),4) AS avg_fulfillment_pct\nFROM order_fulfillment;\n\n/* Answer the following: List the first five orders (by date) for product \u2018Widget A\u2019 that were not fully picked, together with their pick percentage. \u2018Widget A\u2019 refers to product_name = 'Widget A'; not fully picked refers to picked_qty < qty_required */\nWITH order_level AS (\n    SELECT \n        O.order_id,\n        O.order_date,\n        SUM(PK.picked_qty)        AS picked_qty,\n        O.qty_required\n    FROM orders  AS O\n    JOIN products AS P  ON P.product_id = O.product_id\n    JOIN picks    AS PK ON PK.order_id = O.order_id\n    WHERE P.product_name = 'Widget A'\n    GROUP BY O.order_id, O.order_date, O.qty_required\n    HAVING SUM(PK.picked_qty) < O.qty_required\n)\nSELECT \n    order_id,\n    order_date,\n    ROUND(picked_qty * 1.0 / qty_required ,4) AS pick_pct\nFROM order_level\nORDER BY order_date\nLIMIT 5;\n\n/* Answer the following: For each product, show the location that still has on-hand inventory with the earliest purchase date. still has on-hand inventory refers to qty_available > 0; earliest purchase date refers to MIN(purchase_date) */\nWITH earliest AS (\n    SELECT \n        product_id,\n        MIN(purchase_date) AS first_date\n    FROM inventory\n    WHERE qty_available > 0\n    GROUP BY product_id\n)\nSELECT \n    P.product_name,\n    I.location_id,\n    I.purchase_date\nFROM earliest  AS E\nJOIN inventory AS I \n     ON I.product_id   = E.product_id\n    AND I.purchase_date = E.first_date\nJOIN products  AS P \n     ON P.product_id   = I.product_id\nORDER BY P.product_name;\n\n/* Answer the following: For each product, what percentage of its orders were completely fulfilled? completely fulfilled refers to SUM(picked_qty) = qty_required for an order */\nWITH order_status AS (\n    SELECT \n        O.order_id,\n        O.product_id,\n        CASE WHEN SUM(PK.picked_qty) = O.qty_required THEN 1 ELSE 0 END AS full_flag\n    FROM orders AS O\n    JOIN picks  AS PK \n         ON PK.order_id = O.order_id\n    GROUP BY O.order_id, O.product_id, O.qty_required\n)\nSELECT \n    P.product_name,\n    ROUND(AVG(full_flag) * 100 ,2) AS pct_orders_fully_fulfilled\nFROM order_status AS OS\nJOIN products     AS P \n     ON P.product_id = OS.product_id\nGROUP BY P.product_name\nORDER BY pct_orders_fully_fulfilled DESC;\n\n/* Answer the following: Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "evidence": "",
            "raw_question": "What is the average total quantity across all final packaging combinations, considering only the leaf-level items within each combination after fully expanding any nested packaging relationships?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the total number of units picked for order 421? */\nSELECT SUM(units_picked)\nFROM Picks\nWHERE order_id = 421;\n\n/* Answer the following: Which products currently have fewer than 10 units remaining across all inventory lots? */\nSELECT P.product_name\nFROM Products AS P\nJOIN Inventory AS I ON P.product_id = I.product_id\nGROUP BY P.product_id, P.product_name\nHAVING SUM(I.units_remaining) < 10;\n\n/* Answer the following: For each product in order 421, what was the receipt date of the inventory lot that was picked first (FIFO)? */\nSELECT Pk.product_id,\n       MIN(I.received_date) AS first_receipt_date\nFROM Picks     AS Pk\nJOIN Inventory AS I ON Pk.inventory_id = I.inventory_id\nWHERE Pk.order_id = 421\nGROUP BY Pk.product_id;\n\n/* Answer the following: What is the average number of days between inventory receipt and pick events for all picks made in 2023? */\nSELECT AVG(DATEDIFF('day', I.received_date, P.pick_date))\nFROM Picks     AS P\nJOIN Inventory AS I ON P.inventory_id = I.inventory_id\nWHERE EXTRACT(year FROM P.pick_date) = 2023;\n\n/* Answer the following: Which employees picked over 500 units in total during May 2023? */\nSELECT E.employee_name\nFROM Employees AS E\nJOIN Picks     AS P ON E.employee_id = P.employee_id\nWHERE P.pick_date BETWEEN '2023-05-01' AND '2023-05-31'\nGROUP BY E.employee_id, E.employee_name\nHAVING SUM(P.units_picked) > 500;\n\n/* Answer the following: How many units of product 'A123' are currently on hand? */\nSELECT SUM(units_remaining)\nFROM Inventory\nWHERE product_id = 'A123';\n\n/* Answer the following: Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "evidence": "",
            "raw_question": "Which top-level packaging containers, meaning those not contained within any other packaging, have any item for which the total quantity accumulated across all nested levels in the hierarchy exceeds 500, and what are the names of both these containers and the corresponding items?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which products had a seasonality\u2013adjusted sales ratio that fell below 0.6 at least once in calendar year 2016?  (Seasonality-adjusted ratio = units_sold / 12-month centered moving average) */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2016-01-01' AND '2016-12-31'\n)\nSELECT p.product_name\nFROM cma\nJOIN products p ON p.product_id = cma.product_id\nGROUP BY p.product_name\nHAVING MIN(ratio) < 0.6;\n\n/* Answer the following: For the product called \u2018Widget X\u2019, what was the highest seasonality-adjusted units_sold value recorded in any month of 2020? */\nWITH cma AS (\n    SELECT\n        ms.sale_month,\n        ms.units_sold / NULLIF(\n            AVG(ms.units_sold) OVER (PARTITION BY ms.product_id\n                                      ORDER BY ms.sale_month\n                                      ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS sa_units\n    FROM monthly_sales ms\n    JOIN products p ON p.product_id = ms.product_id\n    WHERE p.product_name = 'Widget X'\n      AND ms.sale_month BETWEEN '2020-01-01' AND '2020-12-31'\n)\nSELECT MAX(sa_units) AS max_sa_units_2020\nFROM cma;\n\n/* Answer the following: During which month of 2018 did the product \u2018Gadget Z\u2019 experience its largest month-over-month increase in seasonality-adjusted units sold?  Return the month and the increase amount. */\nWITH cma AS (\n    SELECT\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS sa_units\n    FROM monthly_sales\n    WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Gadget Z')\n      AND sale_month BETWEEN '2018-01-01' AND '2018-12-31'\n),\ndiffs AS (\n    SELECT\n        sale_month,\n        sa_units - LAG(sa_units) OVER (ORDER BY sale_month) AS mom_increase\n    FROM cma\n)\nSELECT sale_month, mom_increase\nFROM diffs\nORDER BY mom_increase DESC\nLIMIT 1;\n\n/* Answer the following: Which product category recorded the highest average seasonality-adjusted sales ratio during the second quarter (April-June) of 2019? */\nWITH cma AS (\n    SELECT\n        p.category,\n        ms.units_sold / NULLIF(\n            AVG(ms.units_sold) OVER (PARTITION BY ms.product_id\n                                      ORDER BY ms.sale_month\n                                      ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales ms\n    JOIN products p ON p.product_id = ms.product_id\n    WHERE ms.sale_month BETWEEN '2019-04-01' AND '2019-06-30'\n)\nSELECT category, AVG(ratio) AS avg_q2_ratio\nFROM cma\nGROUP BY category\nORDER BY avg_q2_ratio DESC\nLIMIT 1;\n\n/* Answer the following: How many products showed a strictly increasing seasonality-adjusted sales ratio for every consecutive month of 2017? */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2017-01-01' AND '2017-12-31'\n),\nflag AS (\n    SELECT product_id\n    FROM (\n        SELECT\n            product_id,\n            ratio,\n            LAG(ratio) OVER (PARTITION BY product_id ORDER BY sale_month) AS prev_ratio\n        FROM cma\n    ) t\n    GROUP BY product_id\n    HAVING MIN(CASE WHEN prev_ratio IS NOT NULL AND ratio <= prev_ratio THEN 0 ELSE 1 END) = 1\n)\nSELECT COUNT(*) AS strictly_increasing_products_2017\nFROM flag;\n\n/* Answer the following: List the top 3 products by average seasonality-adjusted sales ratio over the full period 2016-2020, excluding any product that had fewer than 48 months of data. */\nWITH cma AS (\n    SELECT\n        product_id,\n        sale_month,\n        units_sold / NULLIF(\n            AVG(units_sold) OVER (PARTITION BY product_id\n                                  ORDER BY sale_month\n                                  ROWS BETWEEN 6 PRECEDING AND 6 FOLLOWING),0) AS ratio\n    FROM monthly_sales\n    WHERE sale_month BETWEEN '2016-01-01' AND '2020-12-31'\n),\nagg AS (\n    SELECT\n        product_id,\n        COUNT(*) AS months_cnt,\n        AVG(ratio) AS avg_ratio\n    FROM cma\n    GROUP BY product_id\n    HAVING months_cnt >= 48\n)\nSELECT p.product_name, agg.avg_ratio\nFROM agg\nJOIN products p ON p.product_id = agg.product_id\nORDER BY agg.avg_ratio DESC\nLIMIT 3;\n\n/* Answer the following: Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "evidence": "",
            "raw_question": "For order 423, identify the product IDs, aisles, and positions from which to pick the exact quantities needed for each order line, ensuring that the total picked quantity for each product matches the cumulative quantities ordered without exceeding the available inventory in warehouse 1. Calculate the quantities to be picked from each location by prioritizing inventory with earlier purchased dates and smaller quantities, and ensure that picking respects the sequence and cumulative quantities of the order lines for products with multiple entries.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which forecast run ID gave the highest total forecasted sales for product 4160 in 2018 when using weighted regression? weighted regression refers to weighted_regression = 1; total forecasted sales refers to SUM(forecast_sales) during 2018 */\nSELECT fd.forecast_id\nFROM forecast_detail AS fd\nJOIN forecast_run AS fr ON fr.forecast_id = fd.forecast_id\nWHERE fr.product_id = 4160\n  AND fr.weighted_regression = 1\n  AND fd.forecast_date BETWEEN '2018-01-01' AND '2018-12-31'\nGROUP BY fd.forecast_id\nORDER BY SUM(fd.forecast_sales) DESC\nLIMIT 1;\n\n/* Answer the following: List the first 12 months of training data used for forecast run 210. Training data refers to the months starting from fr.start_date within sales_monthly table. */\nSELECT sm.sale_date\nFROM sales_monthly AS sm\nJOIN forecast_run AS fr ON fr.product_id = sm.product_id\nWHERE fr.forecast_id = 210\n  AND sm.sale_date >= fr.start_date\nORDER BY sm.sale_date\nLIMIT 12;\n\n/* Answer the following: What is the average actual monthly sales for products 4160 and 7790 from January 2016 to December 2018 inclusive? */\nSELECT AVG(sales) \nFROM sales_monthly\nWHERE product_id IN (4160, 7790)\n  AND sale_date BETWEEN '2016-01-01' AND '2018-12-31';\n\n/* Answer the following: What is the maximum seasonality factor between time steps 7 and 30 for product 7790? */\nSELECT MAX(factor)\nFROM seasonality\nWHERE product_id = 7790\n  AND timestep BETWEEN 7 AND 30;\n\n/* Answer the following: For each product, how many time steps have a negative seasonality factor? negative refers to factor < 0 */\nSELECT product_id, COUNT(*) AS negative_steps\nFROM seasonality\nWHERE factor < 0\nGROUP BY product_id;\n\n/* Answer the following: Identify the product that recorded the lowest MAPE in 2018 among all weighted regression forecasts. lowest refers to MIN(mape); weighted regression refers to weighted_regression = 1 */\nSELECT fr.product_id\nFROM forecast_run AS fr\nJOIN forecast_error AS fe ON fe.forecast_id = fr.forecast_id\nWHERE fr.weighted_regression = 1\n  AND fe.year = 2018\nORDER BY fe.mape\nLIMIT 1;\n\n/* Answer the following: What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "evidence": "",
            "raw_question": "Calculate the average pick percentage for each product name, using a first-in-first-out approach that selects from inventory locations based on the earliest purchase date and smallest available quantity, ensuring that the picked quantity reflects only the overlapping range between each order\u2019s required quantity and the inventory\u2019s available quantity, and then grouping and ordering the results by product name?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For each product, what is the first month in 2019 when its ending inventory dropped below the minimum required level? */\nSELECT \n    product_id, \n    MIN(month) AS first_understock_month\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND ending_inventory < min_required\nGROUP BY product_id;\n\n/* Answer the following: Which products never required restocking in 2019 (i.e., their restocked quantity was always 0)? */\nSELECT \n    product_id\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY product_id\nHAVING SUM(restocked_quantity) = 0;\n\n/* Answer the following: How many units were restocked for each product across the whole year 2019? */\nSELECT \n    product_id, \n    SUM(restocked_quantity) AS total_units_restocked_2019\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY product_id;\n\n/* Answer the following: During 2019, in which month did the highest number of products require restocking? */\nSELECT \n    month, \n    COUNT(DISTINCT product_id) AS products_restocked\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\n  AND restocked_quantity > 0\nGROUP BY month\nORDER BY products_restocked DESC\nLIMIT 1;\n\n/* Answer the following: For every product, find the month in 2019 where its ending inventory exceeded the minimum required level by the greatest amount and show that surplus. */\nSELECT  i1.product_id,\n        i1.month,\n        i1.ending_inventory - i1.min_required AS max_surplus\nFROM inventory_monthly AS i1\nJOIN (\n      SELECT product_id,\n             MAX(ending_inventory - min_required) AS max_surplus\n      FROM inventory_monthly\n      WHERE month BETWEEN '2019-01' AND '2019-12'\n      GROUP BY product_id\n) AS i2\nON  i1.product_id = i2.product_id\nAND i1.ending_inventory - i1.min_required = i2.max_surplus\nWHERE i1.month BETWEEN '2019-01' AND '2019-12';\n\n/* Answer the following: What was the average ending inventory across all products for every month in 2019? */\nSELECT \n    month,\n    AVG(ending_inventory) AS avg_ending_inventory\nFROM inventory_monthly\nWHERE month BETWEEN '2019-01' AND '2019-12'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "n_examples": 6,
            "db_id": "oracle_sql"
        },
        {
            "question": "Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "evidence": "",
            "raw_question": "Which products were picked for order 421, and what is the average number of units picked for each product, using FIFO (First-In, First-Out) method?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which team scored the most total goals in the 2013/2014 Premier League season? */\nSELECT T.name\nFROM team AS T\nJOIN match AS M\n  ON T.id = M.home_team_id OR T.id = M.away_team_id\nJOIN league AS L\n  ON M.league_id = L.id\nWHERE L.name = 'Premier League'\n  AND M.season = '2013/2014'\nGROUP BY T.name\nORDER BY SUM(\n             CASE\n               WHEN T.id = M.home_team_id THEN M.home_goal\n               ELSE M.away_goal\n             END\n           ) DESC\nLIMIT 1;\n\n/* Answer the following: How many matches ended in a draw for each league in the 2016/2017 season? */\nSELECT L.name,\n       COUNT(*) AS draw_matches\nFROM match AS M\nJOIN league AS L ON M.league_id = L.id\nWHERE M.season = '2016/2017'\n  AND M.home_goal = M.away_goal\nGROUP BY L.name;\n\n/* Answer the following: What is the average number of goals per match in La Liga across all seasons? */\nSELECT AVG(M.home_goal + M.away_goal)\nFROM match AS M\nJOIN league AS L ON M.league_id = L.id\nWHERE L.name = 'La Liga';\n\n/* Answer the following: Which country hosted the most soccer matches between the 2010/2011 and 2014/2015 seasons (inclusive)? */\nSELECT C.name\nFROM match AS M\nJOIN country AS C ON M.country_id = C.id\nWHERE M.season BETWEEN '2010/2011' AND '2014/2015'\nGROUP BY C.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: For each season, which team had the highest number of away wins in Serie A and how many away wins did it have? */\nSELECT M.season,\n       T.name,\n       COUNT(*) AS away_wins\nFROM match AS M\nJOIN team  AS T ON M.away_team_id = T.id\nJOIN league AS L ON M.league_id  = L.id\nWHERE L.name = 'Serie A'\n  AND M.away_goal > M.home_goal\nGROUP BY M.season, T.name\nHAVING COUNT(*) = (\n        SELECT MAX(cnt)\n        FROM (\n              SELECT COUNT(*) AS cnt\n              FROM match AS M2\n              JOIN team AS T2 ON M2.away_team_id = T2.id\n              JOIN league AS L2 ON M2.league_id  = L2.id\n              WHERE L2.name = 'Serie A'\n                AND M2.away_goal > M2.home_goal\n                AND M2.season = M.season\n              GROUP BY T2.name\n             )\n      );\n\n/* Answer the following: What is the Bundesliga match with the largest goal difference? Return the date, the home team, the away team and the final score. */\nSELECT M.date,\n       HT.name AS home_team,\n       AT.name AS away_team,\n       M.home_goal,\n       M.away_goal\nFROM match AS M\nJOIN team AS HT ON M.home_team_id = HT.id\nJOIN team AS AT ON M.away_team_id = AT.id\nJOIN league AS L ON M.league_id = L.id\nWHERE L.name = 'Bundesliga'\nORDER BY ABS(M.home_goal - M.away_goal) DESC\nLIMIT 1;\n\n/* Answer the following: Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "n_examples": 6,
            "db_id": "EU_soccer"
        },
        {
            "question": "Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "evidence": "",
            "raw_question": "Based on monthly sales data starting in January 2016 and using a centered moving average to adjust for seasonality, which products had a seasonality-adjusted sales ratio that stayed consistently above 2 for every month in the year 2017?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the average loss rate across all vegetable-wholesale items? */\nSELECT AVG(loss_rate) \nFROM item_loss;\n\n/* Answer the following: Which item has the highest loss rate and what is that rate? */\nSELECT i.item_name, l.loss_rate\nFROM item_loss AS l\nJOIN items AS i USING (item_id)\nORDER BY l.loss_rate DESC\nLIMIT 1;\n\n/* Answer the following: How many items have a loss rate greater than one standard deviation above the overall average? */\nWITH stats AS (\n    SELECT AVG(loss_rate) AS avg_lr,\n           STDDEV_SAMP(loss_rate) AS sd_lr\n    FROM item_loss\n)\nSELECT COUNT(*) \nFROM item_loss, stats\nWHERE item_loss.loss_rate > stats.avg_lr + stats.sd_lr;\n\n/* Answer the following: Give each category and its average loss rate, ordered from highest to lowest. */\nSELECT c.category_name,\n       AVG(l.loss_rate) AS avg_loss_rate\nFROM item_loss AS l\nJOIN items      AS i USING (item_id)\nJOIN categories AS c USING (category_id)\nGROUP BY c.category_name\nORDER BY avg_loss_rate DESC;\n\n/* Answer the following: What was the average loss rate for the year 2022? */\nSELECT AVG(loss_rate)\nFROM item_loss\nWHERE year = 2022;\n\n/* Answer the following: List the 5 items in the \u201cLeafy Greens\u201d category with the lowest loss rates. */\nSELECT i.item_name,\n       l.loss_rate\nFROM item_loss   AS l\nJOIN items       AS i USING (item_id)\nJOIN categories  AS c USING (category_id)\nWHERE c.category_name = 'Leafy Greens'\nORDER BY l.loss_rate\nLIMIT 5;\n\n/* Answer the following: For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "evidence": "",
            "raw_question": "What is the average forecasted annual sales for products 4160 and 7790 during 2018, using monthly sales data starting from January 2016 for the first 36 months, applying seasonality adjustments from time steps 7 through 30, and employing a weighted regression method to estimate sales?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which category had the highest average wholesale price in 2021? highest average wholesale price refers to MAX(AVG(wholesale_price)); in 2021 refers to year = 2021 */\nSELECT category\nFROM veg_whsle\nWHERE year = 2021\nGROUP BY category\nORDER BY AVG(wholesale_price) DESC\nLIMIT 1;\n\n/* Answer the following: What is the total selling price for each year from 2020 to 2023? from 2020 to 2023 refers to year BETWEEN 2020 AND 2023 */\nSELECT year,\n       ROUND(SUM(selling_price), 2) AS total_selling_price\nFROM veg_whsle\nWHERE year BETWEEN 2020 AND 2023\nGROUP BY year;\n\n/* Answer the following: List the top 5 categories with the greatest total loss in 2022. greatest total loss refers to ORDER BY SUM(loss) DESC; in 2022 refers to year = 2022 */\nSELECT category\nFROM veg_whsle\nWHERE year = 2022\nGROUP BY category\nORDER BY SUM(loss) DESC\nLIMIT 5;\n\n/* Answer the following: What is the average profit per kilogram for 'Tomato' in 2023? 'Tomato' refers to category = 'Tomato'; in 2023 refers to year = 2023 */\nSELECT ROUND(AVG(profit), 2)\nFROM veg_whsle\nWHERE category = 'Tomato'\n  AND year = 2023;\n\n/* Answer the following: For each category, show the minimum selling price recorded in 2022. minimum selling price refers to MIN(selling_price); in 2022 refers to year = 2022 */\nSELECT category,\n       ROUND(MIN(selling_price), 2) AS min_selling_price\nFROM veg_whsle\nWHERE year = 2022\nGROUP BY category;\n\n/* Answer the following: Which year between 2020 and 2023 had the highest total wholesale price? highest total wholesale price refers to MAX(SUM(wholesale_price)); year BETWEEN 2020 AND 2023 refers to year BETWEEN 2020 AND 2023 */\nSELECT year\nFROM veg_whsle\nWHERE year BETWEEN 2020 AND 2023\nGROUP BY year\nORDER BY SUM(wholesale_price) DESC\nLIMIT 1;\n\n/* Answer the following: For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "evidence": "",
            "raw_question": "Using a recursive monthly inventory adjustment model starting from December 2018 inventory levels, where we restock a product if its ending inventory drops below the minimum required level, determine for each product the month in 2019 where the absolute difference between its ending inventory and the minimum required level is the smallest, and return the product_id, that month, and the absolute difference.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What is the average review score for every seller who has sold more than 500 items in total? */\nSELECT \n    O.seller_id,\n    AVG(R.score) AS avg_review_score\nFROM orders AS O\nJOIN reviews AS R  ON O.order_id = R.order_id\nGROUP BY O.seller_id\nHAVING SUM(O.quantity) > 500;\n\n/* Answer the following: Which product category (Spanish name) has the greatest number of items sold? */\nSELECT \n    C.category_local\nFROM categories   AS C\nJOIN products     AS P ON C.category_id = P.category_id\nJOIN orders       AS O ON P.product_id  = O.product_id\nGROUP BY C.category_id\nORDER BY SUM(O.quantity) DESC\nLIMIT 1;\n\n/* Answer the following: Find every seller whose average packing time is under 15 minutes and whose total sales value is above 50,000 USD. */\nSELECT \n    O.seller_id\nFROM orders  AS O\nJOIN packing AS P ON O.order_id = P.order_id\nGROUP BY O.seller_id\nHAVING AVG(P.packing_time_minutes) < 15\n   AND SUM(O.sale_price * O.quantity) > 50000;\n\n/* Answer the following: List the ten products with the highest sales volume together with their English category names. */\nSELECT\n    P.product_name,\n    C.category_en,\n    SUM(O.quantity) AS total_sold\nFROM products   AS P\nJOIN categories AS C ON P.category_id = C.category_id\nJOIN orders     AS O ON P.product_id  = O.product_id\nGROUP BY P.product_id\nORDER BY total_sold DESC\nLIMIT 10;\n\n/* Answer the following: Which seller has the highest average selling price among those who have processed at least 200 orders? */\nSELECT\n    O.seller_id\nFROM orders AS O\nGROUP BY O.seller_id\nHAVING COUNT(DISTINCT O.order_id) >= 200\nORDER BY AVG(O.sale_price) DESC\nLIMIT 1;\n\n/* Answer the following: How many sellers maintain a perfect average review score of 5 and have shipped more than 1,000 items? */\nSELECT COUNT(*) \nFROM (\n    SELECT \n        O.seller_id\n    FROM orders  AS O\n    JOIN reviews AS R ON O.order_id = R.order_id\n    GROUP BY O.seller_id\n    HAVING AVG(R.score) = 5\n       AND SUM(O.quantity) > 1000\n) AS perfect_sellers;\n\n/* Answer the following: Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "n_examples": 6,
            "db_id": "electronic_sales"
        },
        {
            "question": "Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "evidence": "",
            "raw_question": "Analyze the soccer match dataset to determine the champion team for each season across all countries and leagues, awarding 3 points for every win, 1 point for every tie, and 0 points for every loss. For each season, return the champion\u2019s team name, the league, the country, and the total points accumulated.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For each customer, what is their net transaction amount (deposits minus withdrawals) in the calendar year 2023? deposits refer to amount > 0; withdrawals refer to amount < 0; net refers to SUM(amount) */\nSELECT c.customer_id,\n       SUM(t.amount) AS net_amount_2023\nFROM customers      AS c\nJOIN accounts       AS a ON a.customer_id = c.customer_id\nJOIN transactions   AS t ON t.account_id  = a.account_id\nWHERE t.txn_date >= '2023-01-01'\n  AND t.txn_date <  '2024-01-01'\nGROUP BY c.customer_id;\n\n/* Answer the following: Which customer incurred the highest net withdrawal (i.e., lowest SUM(amount)) in January 2022? withdrawals are negative amounts, so the lowest total is the greatest withdrawal */\nSELECT c.customer_id\nFROM customers      AS c\nJOIN accounts       AS a ON a.customer_id = c.customer_id\nJOIN transactions   AS t ON t.account_id  = a.account_id\nWHERE t.txn_date >= '2022-01-01'\n  AND t.txn_date <  '2022-02-01'\nGROUP BY c.customer_id\nORDER BY SUM(t.amount) ASC\nLIMIT 1;\n\n/* Answer the following: What is the average monthly net amount (deposit minus withdrawal) across all customers for the year 2023? */\nWITH month_net AS (\n    SELECT DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_amt\n    FROM transactions AS t\n    WHERE t.txn_date >= '2023-01-01'\n      AND t.txn_date <  '2024-01-01'\n    GROUP BY DATE_TRUNC('month', t.txn_date)\n)\nSELECT AVG(net_amt) AS avg_monthly_net_2023\nFROM month_net;\n\n/* Answer the following: List the top three customers whose closing balance increased the most from June 2023 to July 2023. closing balance for a month is the cumulative sum of all amounts up to the last day of that month */\nWITH month_end AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_month\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    WHERE t.txn_date >= '2023-06-01'\n      AND t.txn_date <  '2023-08-01'\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), cumu AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_month) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM month_end\n), pivot AS (\n    SELECT customer_id,\n           MAX(CASE WHEN mon = '2023-06-01' THEN close_bal END) AS bal_jun,\n           MAX(CASE WHEN mon = '2023-07-01' THEN close_bal END) AS bal_jul\n    FROM cumu\n    GROUP BY customer_id\n)\nSELECT customer_id\nFROM pivot\nORDER BY (bal_jul - bal_jun) DESC\nLIMIT 3;\n\n/* Answer the following: For each customer, return the first month when their cumulative closing balance became negative. */\nWITH monthly AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date)        AS mon,\n           SUM(t.amount)                          AS net_mon\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), running AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_mon) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM monthly\n)\nSELECT customer_id,\n       MIN(mon) AS first_neg_month\nFROM running\nWHERE close_bal < 0\nGROUP BY customer_id;\n\n/* Answer the following: What percentage of customers have a growth rate above 5 % in their most recent month? growth rate = (latest_balance - prior_balance) / prior_balance * 100; if prior_balance = 0, growth rate = latest_balance * 100 */\nWITH month_net AS (\n    SELECT c.customer_id,\n           DATE_TRUNC('month', t.txn_date) AS mon,\n           SUM(t.amount)                   AS net_mon\n    FROM customers    AS c\n    JOIN accounts     AS a ON a.customer_id = c.customer_id\n    JOIN transactions AS t ON t.account_id  = a.account_id\n    GROUP BY c.customer_id, DATE_TRUNC('month', t.txn_date)\n), running AS (\n    SELECT customer_id,\n           mon,\n           SUM(net_mon) OVER (PARTITION BY customer_id ORDER BY mon) AS close_bal\n    FROM month_net\n), latest AS (\n    SELECT DISTINCT ON (customer_id)\n           customer_id, mon, close_bal,\n           LAG(close_bal) OVER (PARTITION BY customer_id ORDER BY mon) AS prev_bal\n    FROM running\n    ORDER BY customer_id, mon DESC\n), growth AS (\n    SELECT customer_id,\n           CASE\n              WHEN prev_bal = 0 OR prev_bal IS NULL\n                   THEN close_bal * 100\n              ELSE (close_bal - prev_bal) / prev_bal * 100\n           END AS growth_pct\n    FROM latest\n)\nSELECT 100.0 * SUM(CASE WHEN growth_pct > 5 THEN 1 END) / COUNT(*) AS pct_with_gt_5_growth\nFROM growth;\n\n/* Answer the following: For each customer, group all deposits and withdrawals by the first day of each month to obtain a monthly net amount, then calculate each month\u2019s closing balance by cumulatively summing these monthly nets. Next, determine the most recent month\u2019s growth rate by comparing its closing balance to the prior month\u2019s balance, treating deposits as positive and withdrawals as negative, and if the previous month\u2019s balance is zero, the growth rate should be the current month\u2019s balance multiplied by 100. Finally, compute the percentage of customers whose most recent month shows a growth rate of more than 5%.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "evidence": "",
            "raw_question": "For veg whsle data, can you generate a summary of our items' loss rates? Include the average loss rate, and also break down the count of items that are below, above, and within one standard deviation from this average.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: For every month after the very first one, what is the total user balance recorded in the previous month, counting negative balances as zero?  The result must be sorted chronologically. */\nSELECT\n        curr.month                                   AS month,\n        ( SELECT SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END )\n            FROM monthly_user_balances\n           WHERE month = curr.month - INTERVAL '1 month'\n        )                                           AS prev_month_total_balance\nFROM   ( SELECT DISTINCT month\n         FROM monthly_user_balances ) AS curr\nWHERE  curr.month >\n       ( SELECT MIN(month) FROM monthly_user_balances )        -- drop the first month itself\nORDER BY curr.month;\n\n\n/* Answer the following: Show, for every month except the first, the change (delta) in total balance compared with the previous month after turning all negative balances into zero.  List the month together with the delta, ordered by month. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n)\nSELECT\n       curr.month,\n       curr.total_pos_bal - prev.total_pos_bal  AS delta_from_prev\nFROM   month_totals  AS curr\nJOIN   month_totals  AS prev\n       ON prev.month = curr.month - INTERVAL '1 month'\nORDER  BY curr.month;\n\n\n/* Answer the following: Which month saw the single-largest jump (positive delta) in total balance versus the previous month when negatives are replaced with zero?  Return the month and the size of the jump. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n),\ndeltas AS (\n       SELECT\n              curr.month,\n              curr.total_pos_bal - prev.total_pos_bal AS delta_from_prev\n       FROM   month_totals AS curr\n       JOIN   month_totals AS prev\n              ON prev.month = curr.month - INTERVAL '1 month'\n)\nSELECT month, delta_from_prev\nFROM   deltas\nORDER  BY delta_from_prev DESC\nLIMIT  1;\n\n\n/* Answer the following: List the five users who had the highest non-negative balance in the month immediately preceding the latest month in the table. */\nWITH latest_month AS (\n       SELECT MAX(month) AS lm FROM monthly_user_balances\n),\nprev_month_balances AS (\n       SELECT\n              user_id,\n              CASE WHEN balance < 0 THEN 0 ELSE balance END AS pos_balance\n       FROM   monthly_user_balances, latest_month\n       WHERE  month = lm - INTERVAL '1 month'\n)\nSELECT user_id\nFROM   prev_month_balances\nORDER  BY pos_balance DESC\nLIMIT  5;\n\n\n/* Answer the following: Produce a running cumulative total of monthly positive balances (negative counted as 0) across all users, omitting the first month that only serves as baseline.  List month and cumulative_total. */\nWITH month_totals AS (\n       SELECT\n              month,\n              SUM( CASE WHEN balance < 0 THEN 0 ELSE balance END ) AS total_pos_bal\n       FROM   monthly_user_balances\n       GROUP  BY month\n),\nfiltered AS (\n       SELECT *\n       FROM   month_totals\n       WHERE  month >\n              ( SELECT MIN(month) FROM month_totals )\n)\nSELECT\n       month,\n       SUM(total_pos_bal) OVER (ORDER BY month) AS cumulative_total\nFROM   filtered\nORDER  BY month;\n\n\n/* Answer the following: For every user and every month except their first one, show that user\u2019s balance from the previous month (negative treated as 0). */\nWITH ranked AS (\n       SELECT\n              user_id,\n              month,\n              balance,\n              LAG(balance) OVER (PARTITION BY user_id ORDER BY month) AS prev_bal\n       FROM   monthly_user_balances\n)\nSELECT\n       user_id,\n       month,\n       CASE WHEN prev_bal IS NULL OR prev_bal < 0 THEN 0 ELSE prev_bal END AS prev_month_balance\nFROM   ranked\nWHERE  prev_bal IS NOT NULL\nORDER  BY user_id, month;\n\n\n/* Answer the following: For each month, calculate the total balance from all users for the previous month (measured as of the 1st of each month), replacing any negative balances with zero. Ensure that data from the first month is used only as a baseline for calculating previous total balance, and exclude it from the final output. Sort the results in ascending order by month. ",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "evidence": "",
            "raw_question": "For veg whsle data, can you analyze our financial performance over the years 2020 to 2023? I need insights into the average wholesale price, maximum wholesale price, minimum wholesale price, wholesale price difference, total wholesale price, total selling price, average loss rate, total loss, and profit for each category within each year. Round all calculated values to two decimal places.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the highest single-day ending balance reached by any customer during calendar year 2023? highest single-day ending balance refers to MAX(daily_balance); ending balance is the cumulative sum of deposits (transaction_type = 'DEPOSIT') minus everything else; calendar year 2023 refers to transaction_date BETWEEN '2023-01-01' AND '2023-12-31' (inclusive). */\nSELECT MAX(daily_balance)\nFROM (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id \n                  ORDER BY transaction_date\n                  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)       AS daily_balance\n    FROM transactions\n    WHERE transaction_date BETWEEN '2023-01-01' AND '2023-12-31'\n) AS D;\n\n/* Answer the following: List the 5 customers who experienced the longest consecutive run of days with a negative running balance at any time in their history. negative running balance refers to daily_balance < 0; longest consecutive run refers to MAX(streak_len) per customer; list 5 customers with the largest streak_len. */\nWITH daily AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id \n                  ORDER BY transaction_date)                              AS daily_balance\n    FROM transactions\n),\nneg AS (\n    SELECT *,\n           CASE WHEN daily_balance < 0 THEN 1 ELSE 0 END                  AS is_neg\n    FROM daily\n),\ngrp AS (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY day) -\n           ROW_NUMBER() OVER (PARTITION BY customer_id, is_neg ORDER BY day) AS grp_id\n    FROM neg\n),\nstreaks AS (\n    SELECT customer_id,\n           COUNT(*) AS streak_len\n    FROM grp\n    WHERE is_neg = 1\n    GROUP BY customer_id, grp_id\n)\nSELECT customer_id\nFROM streaks\nORDER BY streak_len DESC\nLIMIT 5;\n\n/* Answer the following: For every calendar month, how many customers had a 30-day rolling average running balance of more than 5,000 on at least one day within that month? 30-day rolling average refers to AVG(daily_balance) over the preceding 29 days plus current; more than 5,000 refers to > 5000. */\nWITH daily AS (\n    SELECT\n        customer_id,\n        DATE(transaction_date)                                            AS day,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' \n                 THEN amount ELSE -amount END)\n            OVER (PARTITION BY customer_id ORDER BY transaction_date)      AS daily_balance\n    FROM transactions\n),\nroll30 AS (\n    SELECT\n        customer_id,\n        day,\n        AVG(daily_balance) OVER (PARTITION BY customer_id\n                                 ORDER BY day\n                                 ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS avg30\n    FROM daily\n    QUALIFY COUNT(*) OVER (PARTITION BY customer_id ORDER BY day\n                           ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) = 30\n),\nflagged AS (\n    SELECT DISTINCT\n        customer_id,\n        DATE_TRUNC('month', day) AS month\n    FROM roll30\n    WHERE avg30 > 5000\n)\nSELECT month,\n       COUNT(DISTINCT customer_id) AS customers_above_5k\nFROM flagged\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: For each customer, return their first deposit date and their first withdrawal date. deposit refers to transaction_type = 'DEPOSIT'; withdrawal refers to transaction_type IN ('WITHDRAWAL','FEE', etc.). */\nSELECT\n    c.customer_id,\n    MIN(CASE WHEN t.transaction_type = 'DEPOSIT'     THEN t.transaction_date END) AS first_deposit_date,\n    MIN(CASE WHEN t.transaction_type <> 'DEPOSIT'    THEN t.transaction_date END) AS first_withdrawal_date\nFROM customers AS c\nJOIN transactions AS t ON t.customer_id = c.customer_id\nGROUP BY c.customer_id;\n\n/* Answer the following: Which customers have an average transaction amount greater than the overall average transaction amount, and what was each of their ending balances in the most recent full month? most recent full month refers to MAX(month) in transactions truncated to month. */\nWITH overall AS (\n    SELECT AVG(amount) AS overall_avg FROM transactions\n),\ncust_avg AS (\n    SELECT customer_id, AVG(amount) AS cust_avg FROM transactions GROUP BY customer_id\n),\nlatest_month AS (\n    SELECT DATE_TRUNC('month', MAX(transaction_date)) AS mth FROM transactions\n),\nending AS (\n    SELECT\n        t.customer_id,\n        SUM(CASE WHEN t.transaction_type = 'DEPOSIT' \n                 THEN t.amount ELSE -t.amount END)\n            OVER (PARTITION BY t.customer_id \n                  ORDER BY t.transaction_date\n                  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)       AS running_bal,\n        DATE_TRUNC('month', t.transaction_date)                           AS mth\n    FROM transactions AS t\n)\nSELECT DISTINCT\n       e.customer_id,\n       e.running_bal AS ending_balance\nFROM ending       AS e\nJOIN latest_month AS lm   ON e.mth = lm.mth\nJOIN cust_avg     AS ca   ON ca.customer_id = e.customer_id\nJOIN overall      AS o    ON ca.cust_avg > o.overall_avg\nQUALIFY e.transaction_date = MAX(e.transaction_date) OVER (PARTITION BY e.customer_id);\n\n/* Answer the following: For every customer, what percentage of their transactions are deposits? percentage of deposits = (deposit_count / total_count)*100. */\nWITH counts AS (\n    SELECT\n        customer_id,\n        COUNT(*)                                                AS total_cnt,\n        SUM(CASE WHEN transaction_type = 'DEPOSIT' THEN 1 ELSE 0 END) AS dep_cnt\n    FROM transactions\n    GROUP BY customer_id\n)\nSELECT\n    customer_id,\n    ROUND(dep_cnt * 100.0 / NULLIF(total_cnt,0), 2) AS pct_deposit\nFROM counts;\n\n/* Answer the following: For a bank database with customer transactions, calculate each customer's daily running balance (where deposits add to the balance and other transaction types subtract). For each customer and each day, compute the 30-day rolling average balance (only after having 30 days of data, and treating negative averages as zero). Then group these daily averages by month and find each customer's maximum 30-day average balance within each month. Sum these maximum values across all customers for each month. Consider the first month of each customer's transaction history as the baseline period and exclude it from the final results, presenting monthly totals of these summed maximum 30-day average balances.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "evidence": "",
            "raw_question": "Prepare a comprehensive performance report on our sellers, focusing on total sales, average item price, average review scores, and packing times. Ensure that the report includes only those sellers who have sold a quantity of more than 100 products and highlight the product category names in English with the highest sales volume.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following:  For each account, work out its balance for every calendar day between the account\u2019s first and last transaction (propagating the last known balance forward when no transaction occurs and turning negative balances into 0).  After that, find the highest daily balance each account reached in every month, and finally show, month-by-month, the sum of those monthly highs across all accounts. */\nSELECT mth,\n       SUM(max_daily_bal) AS total_max_balance\nFROM (\n        WITH all_days AS (\n            SELECT  account_id,\n                    generate_series(MIN(transaction_date),\n                                    MAX(transaction_date),\n                                    INTERVAL '1 day')::date AS day\n            FROM account_transactions\n            GROUP BY account_id\n        ),\n        daily_deltas AS (\n            SELECT  d.account_id,\n                    d.day,\n                    COALESCE(SUM(t.amount),0) AS delta\n            FROM all_days d\n            LEFT JOIN account_transactions t\n                   ON t.account_id = d.account_id\n                  AND t.transaction_date = d.day\n            GROUP BY d.account_id, d.day\n        ),\n        running_balance AS (\n            SELECT  account_id,\n                    day,\n                    GREATEST(\n                        SUM(delta) OVER (PARTITION BY account_id\n                                         ORDER BY day\n                                         ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                        0) AS balance\n            FROM daily_deltas\n        ),\n        monthly_max AS (\n            SELECT  account_id,\n                    DATE_TRUNC('month',day)::date       AS mth,\n                    MAX(balance)                        AS max_daily_bal\n            FROM running_balance\n            GROUP BY account_id, DATE_TRUNC('month',day)\n        )\n        SELECT * FROM monthly_max\n     ) x\nGROUP BY mth\nORDER BY mth;\n\n\n/* Answer the following:  Determine each warehouse\u2019s inventory level for every day between its earliest and latest stock movement, forward-filling any gaps and coercing negative levels to zero.  Then, for every quarter, obtain the highest daily level seen in each warehouse and total those peaks to get the company-wide quarterly inventory maximum. */\nSELECT qtr,\n       SUM(max_level) AS company_quarterly_peak\nFROM (\n        WITH days AS (\n            SELECT warehouse_id,\n                   generate_series(MIN(movement_date),\n                                   MAX(movement_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM warehouse_inventory\n            GROUP BY warehouse_id\n        ),\n        deltas AS (\n            SELECT d.warehouse_id,\n                   d.d,\n                   COALESCE(SUM(wi.quantity_change),0) AS delta\n            FROM days d\n            LEFT JOIN warehouse_inventory wi\n                   ON wi.warehouse_id = d.warehouse_id\n                  AND wi.movement_date = d.d\n            GROUP BY d.warehouse_id, d.d\n        ),\n        levels AS (\n            SELECT warehouse_id,\n                   d,\n                   GREATEST(\n                       SUM(delta) OVER (PARTITION BY warehouse_id\n                                        ORDER BY d\n                                        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS lvl\n            FROM deltas\n        ),\n        qmax AS (\n            SELECT warehouse_id,\n                   DATE_TRUNC('quarter',d)::date AS qtr,\n                   MAX(lvl)                     AS max_level\n            FROM levels\n            GROUP BY warehouse_id, DATE_TRUNC('quarter',d)\n        )\n        SELECT * FROM qmax\n     ) s\nGROUP BY qtr\nORDER BY qtr;\n\n\n/* Answer the following:  Build a per-project daily total of hours worked between first and last time-log entries, filling missing days with 0, never allowing the cumulative hours to be negative.  For each month, find the maximum daily hours logged for each project and then sum those maxima at the department level. */\nSELECT dept.department_id,\n       mth,\n       SUM(max_daily_hrs) AS dept_monthly_peak_hours\nFROM (\n        WITH base AS (\n            SELECT project_id,\n                   generate_series(MIN(log_date),\n                                   MAX(log_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM time_logs\n            GROUP BY project_id\n        ),\n        daily AS (\n            SELECT b.project_id,\n                   b.d,\n                   COALESCE(SUM(tl.hours),0) AS hrs\n            FROM base b\n            LEFT JOIN time_logs tl\n                   ON tl.project_id = b.project_id\n                  AND tl.log_date   = b.d\n            GROUP BY b.project_id, b.d\n        ),\n        cumu AS (\n            SELECT project_id,\n                   d,\n                   GREATEST(\n                       SUM(hrs) OVER (PARTITION BY project_id\n                                      ORDER BY d\n                                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS tot_hrs\n            FROM daily\n        ),\n        pmax AS (\n            SELECT project_id,\n                   DATE_TRUNC('month',d)::date AS mth,\n                   MAX(tot_hrs)               AS max_daily_hrs\n            FROM cumu\n            GROUP BY project_id, DATE_TRUNC('month',d)\n        )\n        SELECT p.project_id,\n               p.mth,\n               p.max_daily_hrs\n        FROM pmax p\n     ) pm\nJOIN projects pr       ON pr.project_id = pm.project_id\nJOIN departments dept  ON dept.department_id = pr.department_id\nGROUP BY dept.department_id, mth\nORDER BY dept.department_id, mth;\n\n\n/* Answer the following:  For every IoT sensor, generate a continuous daily series of energy consumption from its first to last reading by forward-filling missing days and replacing negatives with 0.  Identify each sensor\u2019s peak daily consumption every month and then compute the facility\u2019s overall monthly peak (sum of sensors\u2019 peaks). */\nSELECT month,\n       SUM(sensor_peak) AS facility_monthly_peak_kwh\nFROM (\n        WITH days AS (\n            SELECT sensor_id,\n                   generate_series(MIN(read_date),\n                                   MAX(read_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM energy_readings\n            GROUP BY sensor_id\n        ),\n        daily AS (\n            SELECT d.sensor_id,\n                   d.d,\n                   COALESCE(er.kwh,0) AS kwh\n            FROM days d\n            LEFT JOIN energy_readings er\n                   ON er.sensor_id = d.sensor_id\n                  AND er.read_date = d.d\n            GROUP BY d.sensor_id, d.d\n        ),\n        filled AS (\n            SELECT sensor_id,\n                   d,\n                   GREATEST(\n                       SUM(kwh) OVER (PARTITION BY sensor_id ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS cons\n            FROM daily\n        ),\n        mmax AS (\n            SELECT sensor_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(cons)                  AS sensor_peak\n            FROM filled\n            GROUP BY sensor_id, DATE_TRUNC('month',d)\n        )\n        SELECT * FROM mmax\n     ) t\nGROUP BY month\nORDER BY month;\n\n\n/* Answer the following:  Compute each mobile subscriber\u2019s data balance on a day-to-day basis between their initial and most recent usage record, forwarding balances when no usage is recorded and treating negatives as 0.  Per calendar month, retrieve every subscriber\u2019s highest daily balance and sum these per subscription plan. */\nSELECT plan_id,\n       month,\n       SUM(max_bal) AS total_plan_peak_mb\nFROM (\n        WITH seq AS (\n            SELECT subscriber_id,\n                   generate_series(MIN(usage_date),\n                                   MAX(usage_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM data_usage\n            GROUP BY subscriber_id\n        ),\n        deltas AS (\n            SELECT s.subscriber_id,\n                   s.d,\n                   COALESCE(SUM(du.delta_mb),0) AS delta\n            FROM seq s\n            LEFT JOIN data_usage du\n                   ON du.subscriber_id = s.subscriber_id\n                  AND du.usage_date   = s.d\n            GROUP BY s.subscriber_id, s.d\n        ),\n        bal AS (\n            SELECT subscriber_id,\n                   d,\n                   GREATEST(\n                       SUM(delta) OVER (PARTITION BY subscriber_id ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n                       0) AS balance\n            FROM deltas\n        ),\n        mpeak AS (\n            SELECT subscriber_id,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(balance)               AS max_bal\n            FROM bal\n            GROUP BY subscriber_id, DATE_TRUNC('month',d)\n        )\n        SELECT sp.plan_id,\n               mp.month,\n               mp.max_bal\n        FROM mpeak mp\n        JOIN subscribers sp ON sp.subscriber_id = mp.subscriber_id\n     ) u\nGROUP BY plan_id, month\nORDER BY plan_id, month;\n\n\n/* Answer the following:  Produce each stock\u2019s closing price for every trading day within its observed range by carrying the last known close forward on missing days (with 0 as floor).  Next, get the highest close per stock for every month, and finally compute the average of those monthly highs for each sector. */\nSELECT sector,\n       month,\n       AVG(monthly_high_close) AS sector_avg_monthly_high\nFROM (\n        WITH span AS (\n            SELECT symbol,\n                   generate_series(MIN(trade_date),\n                                   MAX(trade_date),\n                                   INTERVAL '1 day')::date AS d\n            FROM stock_prices\n            GROUP BY symbol\n        ),\n        closes AS (\n            SELECT s.symbol,\n                   s.d,\n                   sp.close_price\n            FROM span s\n            LEFT JOIN stock_prices sp\n                   ON sp.symbol     = s.symbol\n                  AND sp.trade_date = s.d\n        ),\n        filled AS (\n            SELECT symbol,\n                   d,\n                   MAX(close_price) OVER (PARTITION BY symbol ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS close_filled\n            FROM closes\n        ),\n        bounded AS (\n            SELECT symbol,\n                   d,\n                   COALESCE(close_filled,0) AS close_fix\n            FROM filled\n        ),\n        mhigh AS (\n            SELECT symbol,\n                   DATE_TRUNC('month',d)::date AS month,\n                   MAX(close_fix)             AS monthly_high_close\n            FROM bounded\n            GROUP BY symbol, DATE_TRUNC('month',d)\n        )\n        SELECT st.sector,\n               m.month,\n               m.monthly_high_close\n        FROM mhigh m\n        JOIN stocks st ON st.symbol = m.symbol\n     ) r\nGROUP BY sector, month\nORDER BY sector, month;\n\n\n/* Answer the following: For each customer, calculate their daily balances for every day between their earliest and latest transaction dates, including days without transactions by carrying forward the previous day's balance. Treat any negative daily balances as zero. Then, for each month, determine the highest daily balance each customer had during that month. Finally, for each month, sum these maximum daily balances across all customers to obtain a monthly total.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "evidence": "",
            "raw_question": "For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What were the total sales in the four weeks leading up to June 15, 2020? */\nSELECT SUM(sales) AS total_pre_jun15_2020\nFROM weekly_sales\nWHERE week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14';\n\n/* Answer the following: By what percentage did sales change in the four weeks after June 15 compared with the four weeks before June 15 in 2019? */\nSELECT\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2019-06-15' AND DATE '2019-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2019-05-18' AND DATE '2019-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2019-05-18' AND DATE '2019-06-14' THEN sales END) \n  AS pct_change_2019\nFROM weekly_sales\nWHERE year = 2019;\n\n/* Answer the following: For each of the years 2018, 2019, and 2020, what was the percentage change in sales for the four weeks after June 15 versus the four weeks before? */\nSELECT \n  year,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n  AS pct_change\nFROM weekly_sales\nWHERE year IN (2018,2019,2020)\nGROUP BY year\nORDER BY year;\n\n/* Answer the following: Which of the years 2018-2020 showed the largest positive percentage change in sales around June 15? */\nWITH year_changes AS (\n  SELECT \n    year,\n    (SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-06-15') AND DATE CONCAT(year,'-07-13') THEN sales END) -\n     SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n    ) * 100.0 /\n    SUM(CASE WHEN week_start_date BETWEEN DATE CONCAT(year,'-05-18') AND DATE CONCAT(year,'-06-14') THEN sales END)\n    AS pct_change\n  FROM weekly_sales\n  WHERE year IN (2018,2019,2020)\n  GROUP BY year\n)\nSELECT year\nFROM year_changes\nORDER BY pct_change DESC\nLIMIT 1;\n\n/* Answer the following: For each product category, what was the percentage change in sales around June 15, 2020? */\nSELECT \n  product_category,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2020-06-15' AND DATE '2020-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2020-05-18' AND DATE '2020-06-14' THEN sales END) AS pct_change_2020\nFROM weekly_sales\nWHERE year = 2020\nGROUP BY product_category\nORDER BY pct_change_2020 DESC;\n\n/* Answer the following: Show the regions that experienced a decline (negative percentage change) in sales around June 15, 2018. */\nSELECT \n  region,\n  (SUM(CASE WHEN week_start_date BETWEEN DATE '2018-06-15' AND DATE '2018-07-13' THEN sales END) -\n   SUM(CASE WHEN week_start_date BETWEEN DATE '2018-05-18' AND DATE '2018-06-14' THEN sales END)\n  ) * 100.0 /\n  SUM(CASE WHEN week_start_date BETWEEN DATE '2018-05-18' AND DATE '2018-06-14' THEN sales END) AS pct_change_2018\nFROM weekly_sales\nWHERE year = 2018\nGROUP BY region\nHAVING pct_change_2018 < 0;\n\n/* Answer the following: For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "evidence": "",
            "raw_question": "Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What were the total sales for every platform during the four weeks that immediately followed the product launch on 1 March 2021?  Four weeks after launch refers to sale_date BETWEEN '2021-03-01' AND '2021-03-28'. */\nSELECT platform,\n       SUM(sales_amount) AS total_sales\nFROM sales\nWHERE sale_date BETWEEN '2021-03-01' AND '2021-03-28'\nGROUP BY platform;\n\n/* Answer the following: For every region, what was the average weekly sales growth between the eight weeks before and the eight weeks after Black Friday 2022 (25 Nov 2022)? */\nSELECT region,\n       AVG(after_week.sales_sum - before_week.sales_sum) / NULLIF(before_week.sales_sum,0) * 100 AS avg_pct_growth\nFROM\n    (SELECT region,\n            strftime('%W', sale_date) AS wk,\n            SUM(sales_amount) AS sales_sum\n     FROM sales\n     WHERE sale_date BETWEEN date('2022-09-30','-8 weeks') AND '2022-11-24'\n     GROUP BY region, wk) AS before_week\nJOIN\n    (SELECT region,\n            strftime('%W', sale_date) AS wk,\n            SUM(sales_amount) AS sales_sum\n     FROM sales\n     WHERE sale_date BETWEEN '2022-11-25' AND date('2022-11-25','+8 weeks','-1 day')\n     GROUP BY region, wk) AS after_week\nON before_week.region = after_week.region AND before_week.wk = after_week.wk\nGROUP BY region;\n\n/* Answer the following: Which platform generated the highest share of sales among customers aged 25-34 during the second quarter of 2020 (1 Apr 2020 \u2013 30 Jun 2020)? */\nSELECT platform\nFROM sales\nWHERE age_band = '25-34'\n  AND sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY platform\nORDER BY SUM(sales_amount) DESC\nLIMIT 1;\n\n/* Answer the following: Calculate the percentage change in total sales for each customer type when comparing January 2020 with January 2021. */\nSELECT customer_type,\n       (SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2021-01' THEN sales_amount END) -\n        SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2020-01' THEN sales_amount END))\n       * 100.0 /\n       NULLIF(SUM(CASE WHEN strftime('%Y-%m', sale_date) = '2020-01' THEN sales_amount END),0) AS pct_change\nFROM sales\nWHERE strftime('%Y-%m', sale_date) IN ('2020-01','2021-01')\nGROUP BY customer_type;\n\n/* Answer the following: Which demographic segment saw the greatest decline in revenue in the two months following the COVID-19 lockdown that started on 15 March 2020 (analysis window: 15 Mar \u2013 14 May 2020 compared with 15 Jan \u2013 14 Mar 2020)? */\nSELECT demographic\nFROM (\n    SELECT demographic,\n           (SUM(CASE WHEN sale_date BETWEEN '2020-03-15' AND '2020-05-14' THEN sales_amount END) -\n            SUM(CASE WHEN sale_date BETWEEN '2020-01-15' AND '2020-03-14' THEN sales_amount END)) * 100.0 /\n            NULLIF(SUM(CASE WHEN sale_date BETWEEN '2020-01-15' AND '2020-03-14' THEN sales_amount END),0) AS pct_change\n    FROM sales\n    WHERE sale_date BETWEEN '2020-01-15' AND '2020-05-14'\n    GROUP BY demographic\n) \nORDER BY pct_change ASC\nLIMIT 1;\n\n/* Answer the following: List the three age bands with the highest average order value during 2021 inside the North America region. */\nSELECT age_band\nFROM sales\nWHERE region = 'North America'\n  AND strftime('%Y', sale_date) = '2021'\nGROUP BY age_band\nORDER BY AVG(sales_amount) DESC\nLIMIT 3;\n\n/* Answer the following: Analyze the average percentage change in sales between the 12 weeks before and after June 15, 2020, for each attribute type: region, platform, age band, demographic, and customer type. For each attribute type, calculate the average percentage change in sales across all its attribute values. Identify the attribute type with the highest negative impact on sales and provide its average percentage change in sales.",
            "n_examples": 6,
            "db_id": "bank_sales_trading"
        },
        {
            "question": "How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "evidence": "",
            "raw_question": "How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: For each season, which constructor won the championship? */\nSELECT DISTINCT ra.year,\n       c.name AS constructor_name\nFROM constructor_standings AS cs\nJOIN races AS ra ON ra.raceId = cs.raceId\nJOIN constructors AS c ON c.constructorId = cs.constructorId\nWHERE cs.position = '1'\nORDER BY ra.year;\n\n/* Answer the following: What is the full name of the youngest driver who has ever won a race? */\nSELECT d.forename || ' ' || d.surname AS full_name\nFROM drivers AS d\nJOIN results AS r ON r.driverId = d.driverId\nWHERE r.position = 1\nORDER BY d.dob DESC\nLIMIT 1;\n\n/* Answer the following: What was the average number of laps completed by all cars in the 2008 Monaco Grand Prix? */\nSELECT AVG(r.laps)\nFROM results AS r\nJOIN races  AS ra ON ra.raceId = r.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Monaco Grand Prix';\n\n/* Answer the following: Which country has hosted the most Formula-1 races? */\nSELECT c.country,\n       COUNT(*) AS total_races\nFROM races    AS ra\nJOIN circuits AS c ON c.circuitId = ra.circuitId\nGROUP BY c.country\nORDER BY total_races DESC\nLIMIT 1;\n\n/* Answer the following: How many constructors are registered with British nationality? */\nSELECT COUNT(*)\nFROM constructors\nWHERE nationality = 'British';\n\n/* Answer the following: List the drivers who have won at least 10 Grand Prix in total. */\nSELECT d.forename || ' ' || d.surname AS driver_name\nFROM drivers AS d\nJOIN results AS r ON r.driverId = d.driverId\nWHERE r.position = 1\nGROUP BY d.driverId\nHAVING COUNT(*) >= 10;\n\n/* Answer the following: For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Using only the data from the log table, compute for each web page  the number of unique user sessions where that page is either the first landing page or the exit page of the session based on the timestamp.",
            "evidence": "",
            "raw_question": "Using only the data from the log table, compute for each web page  the number of unique user sessions where that page is either the first landing page or the exit page of the session based on the timestamp.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which three driver-and-year combinations produced the highest single-season point totals, and what were those totals? */\nSELECT driverId,\n       year,\n       SUM(points) AS total_points\nFROM results\nGROUP BY year, driverId\nORDER BY total_points DESC\nLIMIT 3;\n\n/* Answer the following: For every year, what was the highest number of points scored by any single constructor that season? */\nSELECT y.year,\n       MAX(y.constructor_points) AS top_constructor_points\nFROM (\n        SELECT year,\n               constructorId,\n               SUM(points) AS constructor_points\n        FROM results\n        GROUP BY year, constructorId\n     ) AS y\nGROUP BY y.year\nORDER BY y.year;\n\n/* Answer the following: In which season did driver 1 collect his greatest total number of points, and how many did he earn?  */\nSELECT year,\n       SUM(points) AS total_points\nFROM results\nWHERE driverId = 1\nGROUP BY year\nORDER BY total_points DESC\nLIMIT 1;\n\n/* Answer the following: What is the average, across all seasons, of each season\u2019s best driver total (i.e., take the top driver for every season, then average those season-winning totals)? */\nSELECT AVG(season_best) AS avg_of_season_bests\nFROM (\n        SELECT year,\n               MAX(driver_points) AS season_best\n        FROM (\n                SELECT year,\n                       driverId,\n                       SUM(points) AS driver_points\n                FROM results\n                GROUP BY year, driverId\n             ) AS d\n        GROUP BY year\n     ) AS t;\n\n/* Answer the following: List the five constructors that have accumulated the greatest grand-total of points over all seasons, together with their totals. */\nSELECT constructorId,\n       SUM(points) AS total_points\nFROM results\nGROUP BY constructorId\nORDER BY total_points DESC\nLIMIT 5;\n\n/* Answer the following: What is the smallest non-zero seasonal point total ever recorded by driver 44, and in which year did it occur? */\nSELECT year,\n       total_points\nFROM (\n        SELECT year,\n               SUM(points) AS total_points\n        FROM results\n        WHERE driverId = 44\n        GROUP BY year\n        HAVING SUM(points) > 0\n     ) AS s\nORDER BY total_points\nLIMIT 1;\n\n/* Answer the following: Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "evidence": "",
            "raw_question": "Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which drivers have won at least 3 races in any season since 2010? */\nSELECT DISTINCT D.name , DS.year\nFROM driver_standings AS DS\nJOIN drivers AS D ON D.driver_id = DS.driver_id\nWHERE DS.year >= 2010\n  AND DS.wins >= 3;\n\n/* Answer the following: What are the top 5 teams with the lowest average pit-stop duration in the 2019 season? */\nSELECT C.name ,\n       AVG(P.duration_ms) AS avg_stop_ms\nFROM pit_stops AS P\nJOIN results      AS R ON R.race_id   = P.race_id \n                       AND R.driver_id = P.driver_id\nJOIN constructors AS C ON C.constructor_id = R.constructor_id\nJOIN races        AS Ra ON Ra.race_id = P.race_id\nWHERE Ra.year = 2019\nGROUP BY C.name\nORDER BY avg_stop_ms ASC\nLIMIT 5;\n\n/* Answer the following: How many races have been run on circuits whose length exceeds 5 kilometres? */\nSELECT COUNT(*)\nFROM races   AS Ra\nJOIN circuits AS C ON C.circuit_id = Ra.circuit_id\nWHERE C.length_km > 5;\n\n/* Answer the following: In which year did Lewis Hamilton lead the most total laps, and how many laps did he lead? */\nSELECT Ra.year ,\n       SUM(R.laps_led) AS total_laps_led\nFROM results  AS R\nJOIN races    AS Ra ON Ra.race_id = R.race_id\nJOIN drivers  AS D  ON D.driver_id = R.driver_id\nWHERE D.name = 'Lewis Hamilton'\nGROUP BY Ra.year\nORDER BY total_laps_led DESC\nLIMIT 1;\n\n/* Answer the following: List the circuits where the fastest speed recorded exceeded 350 km/h. */\nSELECT DISTINCT C.name\nFROM speed_trap AS S\nJOIN races      AS Ra ON Ra.race_id = S.race_id\nJOIN circuits   AS C  ON C.circuit_id = Ra.circuit_id\nGROUP BY C.name\nHAVING MAX(S.speed_kmh) > 350;\n\n/* Answer the following: Which drivers have started from pole position but failed to finish the race more than twice? */\nSELECT D.name\nFROM results AS R\nJOIN drivers AS D ON D.driver_id = R.driver_id\nWHERE R.grid_position = 1\n  AND R.status <> 'Finished'\nGROUP BY D.name\nHAVING COUNT(*) > 2;\n\n/* Answer the following: Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "evidence": "",
            "raw_question": "How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many total page views were recorded for the '/home' page? */\nSELECT COUNT(*) \nFROM page_views \nWHERE page_url = '/home';\n\n/* Answer the following: Which five pages were visited by the highest number of unique sessions? */\nSELECT page_url\nFROM page_views\nGROUP BY page_url\nORDER BY COUNT(DISTINCT session_id) DESC\nLIMIT 5;\n\n/* Answer the following: What is the average number of pages a visitor looks at within a single session? */\nSELECT AVG(cnt)\nFROM (\n    SELECT COUNT(*) AS cnt\n    FROM page_views\n    GROUP BY session_id\n) AS session_counts;\n\n/* Answer the following: Give the IDs of sessions that visited the '/login' page but never visited the '/logout' page. */\nSELECT DISTINCT pv1.session_id\nFROM page_views AS pv1\nWHERE pv1.page_url = '/login'\n  AND NOT EXISTS (\n      SELECT 1\n      FROM page_views AS pv2\n      WHERE pv2.session_id = pv1.session_id\n        AND pv2.page_url = '/logout'\n  );\n\n/* Answer the following: How many sessions began on the '/landing' page? */\nSELECT COUNT(*)\nFROM sessions\nWHERE start_page = '/landing';\n\n/* Answer the following: What is the maximum number of pages viewed in any single session? */\nSELECT MAX(cnt)\nFROM (\n    SELECT COUNT(*) AS cnt\n    FROM page_views\n    GROUP BY session_id\n) AS t;\n\n/* Answer the following: How many unique sessions visited the /regist/input page and then the /regist/confirm page, in that order?",
            "n_examples": 6,
            "db_id": "log"
        },
        {
            "question": "Identify the sessions with the minimal number of events occurring before the first '/detail' click or '/complete' conversion within the session, considering only events with non-empty search types. If multiple sessions share this minimum count, include all of them. For each session, display the associated paths and search types.",
            "evidence": "",
            "raw_question": "Identify the sessions with the minimal number of events occurring before the first '/detail' click or '/complete' conversion within the session, considering only events with non-empty search types. If multiple sessions share this minimum count, include all of them. For each session, display the associated paths and search types.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which page is the most common landing page and how many sessions began there? */\nSELECT al.page_url ,\n       COUNT(*) AS sessions_started\nFROM (\n        SELECT session_id ,\n               MIN(event_time) AS first_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS f\nJOIN activity_log AS al\n  ON al.session_id = f.session_id\n AND al.event_time = f.first_time\nGROUP BY al.page_url\nORDER BY sessions_started DESC\nLIMIT 1;\n\n/* Answer the following: How many unique sessions ended on the page \u201c/checkout\u201d? */\nSELECT COUNT(*) AS checkout_exit_sessions\nFROM (\n        SELECT session_id ,\n               MAX(event_time) AS last_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS l\nJOIN activity_log AS al\n  ON al.session_id = l.session_id\n AND al.event_time = l.last_time\nWHERE al.page_url = '/checkout';\n\n/* Answer the following: For every page, count the number of sessions in which it was both the landing and the exit page. */\nSELECT landing.page_url ,\n       COUNT(*) AS sessions_landing_and_exit\nFROM (\n        SELECT session_id ,\n               MIN(event_time) AS first_time ,\n               MAX(event_time) AS last_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS ses\nJOIN activity_log AS landing\n  ON landing.session_id = ses.session_id\n AND landing.event_time = ses.first_time\nJOIN activity_log AS exitp\n  ON exitp.session_id = ses.session_id\n AND exitp.event_time = ses.last_time\nWHERE landing.page_url = exitp.page_url\nGROUP BY landing.page_url;\n\n/* Answer the following: For each user, how many of their sessions started on \u201c/home\u201d? */\nSELECT al.user_id ,\n       COUNT(*) AS sessions_from_home\nFROM (\n        SELECT session_id ,\n               user_id ,\n               MIN(event_time) AS first_time\n        FROM activity_log\n        GROUP BY session_id\n     ) AS f\nJOIN activity_log AS al\n  ON al.session_id = f.session_id\n AND al.event_time = f.first_time\nWHERE al.page_url = '/home'\nGROUP BY al.user_id;\n\n/* Answer the following: What percentage of all sessions exited on \u201c/pricing\u201d? */\nWITH exit_pages AS (\n        SELECT al.session_id ,\n               al.page_url\n        FROM (\n                SELECT session_id ,\n                       MAX(event_time) AS last_time\n                FROM activity_log\n                GROUP BY session_id\n             ) AS le\n        JOIN activity_log AS al\n          ON al.session_id = le.session_id\n         AND al.event_time = le.last_time\n     ),\n     total_sessions AS (\n        SELECT COUNT(DISTINCT session_id) AS total\n        FROM activity_log\n     ),\n     pricing_exit AS (\n        SELECT COUNT(*) AS pricing\n        FROM exit_pages\n        WHERE page_url = '/pricing'\n     )\nSELECT 100.0 * pricing_exit.pricing / total_sessions.total AS pct_exit_pricing\nFROM pricing_exit , total_sessions;\n\n/* Answer the following: List the pages that never appeared as a landing page in any session. */\nWITH landing_pages AS (\n        SELECT DISTINCT al.page_url\n        FROM (\n                SELECT session_id ,\n                       MIN(event_time) AS first_time\n                FROM activity_log\n                GROUP BY session_id\n             ) AS f\n        JOIN activity_log AS al\n          ON al.session_id = f.session_id\n         AND al.event_time = f.first_time\n     )\nSELECT DISTINCT page_url\nFROM activity_log\nWHERE page_url NOT IN (SELECT page_url FROM landing_pages);\n\n/* Answer the following: Using the activity log table, compute the total number of unique user sessions where each web page appears as either a landing page (the first page visited in a session based on timestamp) or an exit page (the last page visited in a session based on timestamp), or both. Count each session only once per page even if the page serves as both landing and exit for that session. ",
            "n_examples": 6,
            "db_id": "log"
        },
        {
            "question": "Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "evidence": "",
            "raw_question": "Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: Which page is most frequently the very first page visited in a session? */\nSELECT page_url, COUNT(*) AS freq_first\nFROM visits\nWHERE visit_order = 1\nGROUP BY page_url\nORDER BY freq_first DESC\nLIMIT 1;\n\n/* Answer the following: How many sessions include at least two consecutive visits to the '/detail' page? two consecutive means the second visit has visit_order exactly one greater than the first within the same session. */\nSELECT COUNT(DISTINCT first.session_id)\nFROM visits AS first\nJOIN visits AS second\n  ON first.session_id = second.session_id\n AND second.visit_order = first.visit_order + 1\nWHERE first.page_url = '/detail'\n  AND second.page_url = '/detail';\n\n/* Answer the following: List the five pages most commonly visited immediately after a visit to the '/cart' page and show how many times each occurs. \u201cImmediately after\u201d refers to the next visit in the same session (visit_order + 1). */\nSELECT next.page_url, COUNT(*) AS freq\nFROM visits AS cur\nJOIN visits AS next\n  ON cur.session_id = next.session_id\n AND next.visit_order = cur.visit_order + 1\nWHERE cur.page_url = '/cart'\nGROUP BY next.page_url\nORDER BY freq DESC\nLIMIT 5;\n\n/* Answer the following: What is the average number of pages viewed per session for sessions that eventually reached the '/checkout' page? */\nSELECT AVG(page_count)\nFROM (\n  SELECT session_id, COUNT(*) AS page_count\n  FROM visits\n  GROUP BY session_id\n  HAVING SUM(CASE WHEN page_url = '/checkout' THEN 1 ELSE 0 END) > 0\n) AS t;\n\n/* Answer the following: Which calendar day saw the highest number of distinct sessions that included at least one visit to the '/search' page? */\nSELECT DATE(visit_time) AS day,\n       COUNT(DISTINCT session_id) AS sessions_with_search\nFROM visits\nWHERE page_url = '/search'\nGROUP BY day\nORDER BY sessions_with_search DESC\nLIMIT 1;\n\n/* Answer the following: Which user had the single session with the greatest number of visits to the '/product' page, and how many such visits did that session contain? */\nSELECT s.user_id, pv.prod_visits\nFROM (\n  SELECT session_id, COUNT(*) AS prod_visits\n  FROM visits\n  WHERE page_url = '/product'\n  GROUP BY session_id\n  ORDER BY prod_visits DESC\n  LIMIT 1\n) AS pv\nJOIN sessions AS s ON pv.session_id = s.session_id;\n\n/* Answer the following: Which three distinct third-page visits are most frequently observed immediately after two consecutive visits to the '/detail' page, and how many times does each third-page visit occur?",
            "n_examples": 6,
            "db_id": "log"
        },
        {
            "question": "In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "evidence": "",
            "raw_question": "In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Since 2010, which driver has accumulated the highest total number of pole positions and how many did he secure?  (pole position means grid = 1 in the race results) */\nSELECT d.surname ,\n       COUNT(*) AS poles\nFROM results   AS r\nJOIN races     AS ra ON ra.raceId = r.raceId\nJOIN drivers   AS d  ON d.driverId = r.driverId\nWHERE ra.year >= 2010\n  AND r.grid  = 1\nGROUP BY d.driverId\nORDER BY poles DESC\nLIMIT 1;\n\n/* Answer the following: What was the average finishing position of Valtteri Bottas in races he finished (status = 'Finished') during the 2017 season? */\nSELECT AVG(r.positionOrder)\nFROM results  AS r\nJOIN races    AS ra ON ra.raceId  = r.raceId\nJOIN drivers  AS d  ON d.driverId = r.driverId\nJOIN status   AS s  ON s.statusId = r.statusId\nWHERE ra.year = 2017\n  AND d.surname = 'Bottas'\n  AND s.status  = 'Finished';\n\n/* Answer the following: List the three circuits where Lewis Hamilton has won the most races.  (a win means position = 1) */\nSELECT c.name\nFROM results  AS r\nJOIN races    AS ra ON ra.raceId   = r.raceId\nJOIN circuits AS c  ON c.circuitId = ra.circuitId\nJOIN drivers  AS d  ON d.driverId  = r.driverId\nWHERE d.surname = 'Hamilton'\n  AND r.position = 1\nGROUP BY c.circuitId\nORDER BY COUNT(*) DESC\nLIMIT 3;\n\n/* Answer the following: In the 2008 season, which constructor recorded the fewest total points across all races and how many points did they score? */\nSELECT co.name ,\n       SUM(cs.points) AS total_points\nFROM constructorStandings AS cs\nJOIN races             AS ra ON ra.raceId     = cs.raceId\nJOIN constructors      AS co ON co.constructorId = cs.constructorId\nWHERE ra.year = 2008\nGROUP BY co.constructorId\nORDER BY total_points ASC\nLIMIT 1;\n\n/* Answer the following: How many unique drivers set at least one fastest lap in the 2019 season?  (fastest lap is indicated by rank = 1 in the results table) */\nSELECT COUNT(DISTINCT d.driverId)\nFROM results AS r\nJOIN races   AS ra ON ra.raceId  = r.raceId\nJOIN drivers AS d  ON d.driverId = r.driverId\nWHERE ra.year = 2019\n  AND r.rank  = 1;\n\n/* Answer the following: Which Formula 1 season had the highest average number of retirements per race?  (a retirement is any result whose status contains the word 'Retired') */\nSELECT ra.year\nFROM races  AS ra\nJOIN results AS r  ON r.raceId  = ra.raceId\nJOIN status  AS s  ON s.statusId = r.statusId\nGROUP BY ra.year\nORDER BY AVG(CASE WHEN s.status LIKE '%Retired%' THEN 1 ELSE 0 END) DESC\nLIMIT 1;\n\n/* Answer the following: In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "evidence": "",
            "raw_question": "In Formula 1 seasons since 2001, considering only drivers who scored points in a season, which five constructors have had the most seasons where their drivers scored the fewest total points among all point-scoring drivers in that season?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: In the first five laps of the 2022 Italian Grand Prix, how many overtakes occurred in each category? first five laps refers to lap_number BETWEEN 1 AND 5 */\nSELECT O.category , COUNT(*) AS num_overtakes\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Italian Grand Prix'\n  AND R.year = 2022\n  AND O.lap_number BETWEEN 1 AND 5\nGROUP BY O.category;\n\n/* Answer the following: Which driver performed the most overtakes in the 2021 season? most refers to MAX(COUNT(*)) */\nSELECT D.full_name\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id         = O.race_id\nJOIN drivers   AS D ON D.driver_id       = O.overtaker_driver_id\nWHERE R.year = 2021\nGROUP BY D.driver_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: List the races where pit-stop related overtakes outnumbered standard on-track passes. pit-stop refers to category = 'pit stop'; standard refers to category = 'standard' */\nSELECT R.name ,\n       R.year\nFROM races AS R\nJOIN overtakes AS O ON O.race_id = R.race_id\nGROUP BY R.race_id\nHAVING SUM(CASE WHEN O.category = 'pit stop' THEN 1 ELSE 0 END) >\n       SUM(CASE WHEN O.category = 'standard' THEN 1 ELSE 0 END);\n\n/* Answer the following: For the 2020 season, what is the average lap number at which each category of overtake occurred? */\nSELECT O.category ,\n       AVG(O.lap_number) AS avg_lap\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.year = 2020\nGROUP BY O.category;\n\n/* Answer the following: In the 2023 Bahrain Grand Prix, which three laps registered the highest number of start-related overtakes? start-related refers to category = 'start'; top 3 refers to LIMIT 3 */\nSELECT O.lap_number ,\n       COUNT(*) AS num_start_overtakes\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Bahrain Grand Prix'\n  AND R.year = 2023\n  AND O.category = 'start'\nGROUP BY O.lap_number\nORDER BY num_start_overtakes DESC\nLIMIT 3;\n\n/* Answer the following: How many different drivers made at least one retirement-related overtake in the 2019 Singapore Grand Prix? retirement-related refers to category = 'retirement' */\nSELECT COUNT(DISTINCT O.overtaker_driver_id)\nFROM overtakes AS O\nJOIN races     AS R ON R.race_id = O.race_id\nWHERE R.name = 'Singapore Grand Prix'\n  AND R.year = 2019\n  AND O.category = 'retirement';\n\n/* Answer the following: In the first five laps of the race, how many overtakes occurred in each category\u2014retirements, pit stops, start-related overtakes, and standard on-track passes?",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "evidence": "",
            "raw_question": "For each year, which driver and which constructor scored the most points? I want the full name of each driver.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: What was the Grand Prix that featured the highest total number of pit stops in a single race, and how many stops were made? */\nSELECT R.name,\n       R.year,\n       COUNT(*) AS total_pit_stops\nFROM races AS R\nJOIN pit_stops AS P ON P.raceId = R.raceId\nGROUP BY R.raceId\nORDER BY total_pit_stops DESC\nLIMIT 1;\n\n/* Answer the following: List the five drivers who have recorded the fastest single lap times in Formula 1 history, showing each driver\u2019s best lap time and the race in which it occurred. */\nSELECT D.forename || ' ' || D.surname  AS driver_name,\n       L.milliseconds                  AS fastest_lap_ms,\n       R.name                          AS race_name\nFROM lap_times  AS L\nJOIN (\n        SELECT driverId,\n               MIN(milliseconds) AS best_time\n        FROM lap_times\n        GROUP BY driverId\n     ) AS B ON B.driverId  = L.driverId\n            AND B.best_time = L.milliseconds\nJOIN drivers AS D ON D.driverId = L.driverId\nJOIN races   AS R ON R.raceId   = L.raceId\nORDER BY fastest_lap_ms ASC\nLIMIT 5;\n\n/* Answer the following: During the 2021 season, how many races did each constructor win? */\nSELECT C.name  AS constructor_name,\n       COUNT(*) AS wins_2021\nFROM results      AS Res\nJOIN constructors AS C ON C.constructorId = Res.constructorId\nJOIN races        AS R ON R.raceId        = Res.raceId\nWHERE R.year = 2021\n  AND Res.position = 1\nGROUP BY C.constructorId;\n\n/* Answer the following: In the 2019 British Grand Prix, which driver gained the most positions from the starting grid to the final classification, and by how many positions? */\nSELECT D.forename || ' ' || D.surname AS driver_name,\n       (Res.grid - Res.position)      AS positions_gained\nFROM races   AS R\nJOIN results AS Res ON Res.raceId = R.raceId\nJOIN drivers AS D   ON D.driverId = Res.driverId\nWHERE R.year = 2019\n  AND R.name = 'British Grand Prix'\nORDER BY positions_gained DESC\nLIMIT 1;\n\n/* Answer the following: What was the average number of pit stops per driver per race in the 2020 season? */\nSELECT AVG(stops_per_driver) AS avg_stops_per_driver_2020\nFROM (\n        SELECT P.raceId,\n               P.driverId,\n               COUNT(*) AS stops_per_driver\n        FROM pit_stops AS P\n        JOIN races     AS R ON R.raceId = P.raceId\n        WHERE R.year = 2020\n        GROUP BY P.raceId, P.driverId\n     ) AS T;\n\n/* Answer the following: Which driver has achieved the most pole positions in Formula 1, and how many poles do they have? */\nSELECT D.forename || ' ' || D.surname AS driver_name,\n       COUNT(*)                       AS total_poles\nFROM qualifying AS Q\nJOIN drivers    AS D ON D.driverId = Q.driverId\nWHERE Q.position = 1\nGROUP BY D.driverId\nORDER BY total_poles DESC\nLIMIT 1;\n\n/* Answer the following: Considering all races where pit stop data is available, and focusing on instances when a driver was not behind another car on the previous lap but is behind on the current lap (accounting for retirements, pit-stop entries, pit-stop exits, and race starts), how many times has each type of overtake occurred in Formula 1?",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "evidence": "",
            "raw_question": "Using only the data from the \u2018results\u2019 table, find the three years in which the sum of the highest total points earned by any driver and the highest total points earned by any constructor in that year (both calculated by summing up points from the \u2018results\u2019 table) is smallest, and list those three years in order of ascending total.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: Which driver scored the highest total points in the 2005 season? */\nSELECT d.forename || ' ' || d.surname\nFROM drivers AS d\nJOIN results AS r          ON r.driverId = d.driverId\nJOIN races   AS ra         ON ra.raceId  = r.raceId\nWHERE ra.year = 2005\nGROUP BY d.driverId\nORDER BY SUM(r.points) DESC\nLIMIT 1;\n\n/* Answer the following: Give the constructors that won more than three races in the 1988 season. */\nSELECT c.name\nFROM constructors AS c\nJOIN results      AS r  ON r.constructorId = c.constructorId\nJOIN races        AS ra ON ra.raceId       = r.raceId\nWHERE ra.year = 1988 \n  AND r.positionOrder = 1               -- a win\nGROUP BY c.constructorId\nHAVING COUNT(*) > 3;\n\n/* Answer the following: Which drivers achieved pole position in the first Formula 1 race they ever started?  (Pole position = grid = 1.) */\nSELECT DISTINCT d.forename || ' ' || d.surname\nFROM drivers  AS d\nJOIN results  AS r  ON r.driverId = d.driverId\nJOIN races    AS ra ON ra.raceId  = r.raceId\nWHERE r.grid = 1\n  AND ra.date = (\n        SELECT MIN(ra2.date)\n        FROM results r2\n        JOIN races  ra2 ON ra2.raceId = r2.raceId\n        WHERE r2.driverId = d.driverId\n      );\n\n/* Answer the following: How many races saw both Ayrton Senna and Alain Prost finish on the podium?  (Podium = positionOrder \u2264 3.) */\nSELECT COUNT(*)\nFROM (\n    SELECT ra.raceId\n    FROM races   ra\n    JOIN results r1 ON r1.raceId = ra.raceId\n    JOIN drivers d1 ON d1.driverId = r1.driverId\n    JOIN results r2 ON r2.raceId = ra.raceId\n    JOIN drivers d2 ON d2.driverId = r2.driverId\n    WHERE d1.forename = 'Ayrton' AND d1.surname = 'Senna' AND r1.positionOrder <= 3\n      AND d2.forename = 'Alain'  AND d2.surname = 'Prost' AND r2.positionOrder <= 3\n) AS both_on_podium;\n\n/* Answer the following: List the circuits that hosted a Grand Prix every season from 2000 through 2010 inclusive. */\nSELECT ci.name\nFROM circuits AS ci\nJOIN races    AS ra ON ra.circuitId = ci.circuitId\nWHERE ra.year BETWEEN 2000 AND 2010\nGROUP BY ci.circuitId\nHAVING COUNT(DISTINCT ra.year) = 11;\n\n/* Answer the following: For each driver who won at least one race in 1999, provide their total number of wins that season. */\nSELECT d.forename || ' ' || d.surname AS driver,\n       COUNT(*)                       AS wins\nFROM drivers  AS d\nJOIN results  AS r  ON r.driverId = d.driverId\nJOIN races    AS ra ON ra.raceId  = r.raceId\nWHERE ra.year = 1999\n  AND r.positionOrder = 1\nGROUP BY d.driverId;\n\n/* Answer the following: Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "evidence": "",
            "raw_question": "Which constructors had the top 3 combined points from their best driver and team, and in which years did they achieve them?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: What is the average number of pit\u2013stops made by drivers who were classified as \u201cFinished\u201d at the end of a race? */\nSELECT AVG(P.stops)\nFROM (\n        SELECT raceId ,\n               driverId ,\n               MAX(stop) AS stops          -- number of stops a driver made in that race\n        FROM pitStops\n        GROUP BY raceId , driverId\n     ) AS P\nJOIN results   AS R ON R.raceId  = P.raceId  AND R.driverId = P.driverId\nJOIN status    AS S ON S.statusId = R.statusId\nWHERE S.status = 'Finished';\n\n\n/* Answer the following: Which drivers have raced for more than three different constructors during their Formula 1 career? */\nSELECT D.forename || ' ' || D.surname  AS driver_name\nFROM drivers  AS D\nJOIN results  AS R ON R.driverId = D.driverId\nGROUP BY D.driverId\nHAVING COUNT(DISTINCT R.constructorId) > 3;\n\n\n/* Answer the following: In which season did Lewis Hamilton record his highest average points per race, and what was that average? */\nSELECT Ra.year ,\n       AVG(R.points) AS avg_points\nFROM   drivers   AS D\nJOIN   results   AS R  ON R.driverId = D.driverId\nJOIN   races     AS Ra ON Ra.raceId  = R.raceId\nWHERE  D.forename = 'Lewis'\n  AND  D.surname  = 'Hamilton'\nGROUP  BY Ra.year\nORDER  BY avg_points DESC\nLIMIT  1;\n\n\n/* Answer the following: How many Grands Prix were won by a driver who started from pole-position?  (pole-position \u2192 grid = 1; winner \u2192 positionOrder = 1) */\nSELECT COUNT(*)\nFROM   results\nWHERE  grid = 1\n  AND  positionOrder = 1;\n\n\n/* Answer the following: Which constructor has the best (i.e., lowest) average finishing position in races from 2010 onward, considering only constructors with at least 50 classified finishes? */\nSELECT C.name\nFROM   constructors AS C\nJOIN   results      AS R  ON R.constructorId = C.constructorId\nJOIN   races        AS Ra ON Ra.raceId       = R.raceId\nWHERE  Ra.year >= 2010\n  AND  R.positionOrder IS NOT NULL\nGROUP  BY C.constructorId\nHAVING COUNT(*) >= 50\nORDER  BY AVG(R.positionOrder) ASC\nLIMIT  1;\n\n\n/* Answer the following: How many drivers scored points in their very first Formula 1 race? */\nSELECT COUNT(DISTINCT R.driverId)\nFROM   results AS R\nJOIN  (\n        SELECT driverId ,\n               MIN(raceId) AS debutRace\n        FROM   results\n        GROUP  BY driverId\n      ) AS Debut\n      ON Debut.driverId = R.driverId\n     AND Debut.debutRace = R.raceId\nWHERE  R.points > 0;\n\n\n/* Answer the following: Calculate the overall average first round and average last round of races missed by Formula 1 drivers across all years. Include only drivers who missed fewer than three races in a given year and who switched teams between their appearances immediately before and after their hiatus (i.e., the constructor ID for the race right before their first missed race must be different from the constructor ID for the race right after their last missed race in that year). Do not group results by year; return just the overall averages across the entire dataset.",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "evidence": "",
            "raw_question": "Among Formula 1 drivers who raced during the 1950s, which drivers completed a season in that decade with the same constructor in both the first and the last race they participated in, while also taking part in at least two distinct race rounds during that season?",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many distinct drivers recorded at least one successful on-track overtake (excluding pit-lane moves, retirements and start-lap position changes) during the 2022 season? */\nSELECT COUNT(DISTINCT PC.driver_id)\nFROM position_changes AS PC\nJOIN races AS R \n  ON R.race_id = PC.race_id\nWHERE R.season = 2022\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1;\n\n/* Answer the following: List the Grand Prix names in 2021 where Max Verstappen lost a net total of two positions or more through on-track passes (ignoring pit sequences, retirements and the first lap). */\nSELECT DISTINCT R.grand_prix\nFROM races AS R\nJOIN drivers AS D       ON D.full_name = 'Max Verstappen'\nJOIN position_changes AS PC \n  ON PC.race_id  = R.race_id \n AND PC.driver_id = D.driver_id\nWHERE R.season = 2021\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY R.grand_prix\nHAVING SUM(\n           CASE \n             WHEN PC.new_position > PC.old_position THEN 1   -- he was overtaken\n             WHEN PC.new_position < PC.old_position THEN -1  -- he overtook someone\n             ELSE 0\n           END\n         ) >= 2;\n\n/* Answer the following: What is the total number of on-track passes (excluding pit-lane moves, retirements and start moves) that took place at the Italian GP since 2018? */\nSELECT COUNT(*) \nFROM position_changes AS PC\nJOIN races AS R \n  ON R.race_id = PC.race_id\nWHERE R.grand_prix = 'Italian Grand Prix'\n  AND R.season >= 2018\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1;\n\n/* Answer the following: Which driver made the most on-track overtakes during the 2020 season? */\nSELECT D.full_name\nFROM drivers AS D\nJOIN position_changes AS PC \n  ON PC.driver_id = D.driver_id\nJOIN races AS R            ON R.race_id = PC.race_id\nWHERE R.season = 2020\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY D.full_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n/* Answer the following: Give the names of drivers who finished on the podium (final position \u2264 3) in a race where they were never overtaken on-track after the first lap. */\nSELECT DISTINCT D.full_name\nFROM results AS Res                 -- final classified results\nJOIN drivers AS D   ON D.driver_id = Res.driver_id\nWHERE Res.final_position <= 3\n  AND NOT EXISTS (\n        SELECT 1\n        FROM position_changes AS PC\n        WHERE PC.race_id   = Res.race_id\n          AND PC.driver_id = Res.driver_id\n          AND PC.change_type = 'on_track'\n          AND PC.lap_number > 1\n          AND PC.new_position > PC.old_position      -- was overtaken\n      );\n\n/* Answer the following: For each season since 2015, show the circuit that witnessed the highest number of on-track overtakes (excluding pit-lane, retirements, and first-lap moves). */\nSELECT R.season,\n       R.circuit,\n       COUNT(*) AS on_track_passes\nFROM position_changes AS PC\nJOIN races AS R ON R.race_id = PC.race_id\nWHERE R.season >= 2015\n  AND PC.change_type = 'on_track'\n  AND PC.lap_number > 1\nGROUP BY R.season, R.circuit\nHAVING COUNT(*) = (\n        SELECT MAX(pass_cnt)\n        FROM (\n              SELECT COUNT(*) AS pass_cnt\n              FROM position_changes AS PC2\n              JOIN races AS R2 ON R2.race_id = PC2.race_id\n              WHERE R2.season = R.season\n                AND PC2.change_type = 'on_track'\n                AND PC2.lap_number > 1\n              GROUP BY R2.circuit\n        ) AS sub\n      );\n\n/* Answer the following: Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops (both at pit entry and exit), retirements, or position changes that occurred during the first lap of a race (considered as start movements).",
            "n_examples": 6,
            "db_id": "f1"
        },
        {
            "question": "Calculate the average first and last rounds of races missed by drivers each year. Only include drivers who missed fewer than three races annually and who switched teams between the race immediately before their first missed race and the race immediately after their last missed race.",
            "evidence": "",
            "raw_question": "Calculate the average first and last rounds of races missed by drivers each year. Only include drivers who missed fewer than three races annually and who switched teams between the race immediately before their first missed race and the race immediately after their last missed race.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n/* Answer the following: How many active users signed up in each month of 2023? active refers to status = 'active'; signed up refers to signup_date */\nSELECT \n    EXTRACT(MONTH FROM signup_date) AS month, \n    COUNT(*) AS active_users\nFROM users\nWHERE signup_date >= '2023-01-01' \n  AND signup_date <  '2024-01-01'\n  AND status = 'active'\nGROUP BY month\nORDER BY month;\n\n/* Answer the following: What is the average number of orders per user in each age bucket (18-25, 26-35, 36-45, 46+)? */\nSELECT\n    CASE\n        WHEN u.age BETWEEN 18 AND 25 THEN '18-25'\n        WHEN u.age BETWEEN 26 AND 35 THEN '26-35'\n        WHEN u.age BETWEEN 36 AND 45 THEN '36-45'\n        ELSE '46+'\n    END AS age_bucket,\n    AVG(o.order_cnt) AS avg_orders\nFROM (\n        SELECT user_id, COUNT(*) AS order_cnt\n        FROM orders\n        GROUP BY user_id\n     ) AS o\nJOIN users u ON u.user_id = o.user_id\nGROUP BY age_bucket;\n\n/* Answer the following: For each country, how many users are older than 60? */\nSELECT \n    country, \n    COUNT(*) AS senior_users\nFROM users\nWHERE age > 60\nGROUP BY country;\n\n/* Answer the following: Which five cities have the highest number of users in their 30s? users in their 30s refers to age BETWEEN 30 AND 39 */\nSELECT \n    city, \n    COUNT(*) AS users_in_30s\nFROM users\nWHERE age BETWEEN 30 AND 39\nGROUP BY city\nORDER BY users_in_30s DESC\nLIMIT 5;\n\n/* Answer the following: How many premium users did we acquire each quarter in 2022? premium users refers to plan = 'premium' */\nSELECT \n    CONCAT('Q', EXTRACT(QUARTER FROM signup_date)) AS quarter,\n    COUNT(*) AS premium_signups\nFROM users\nWHERE signup_date >= '2022-01-01' \n  AND signup_date <  '2023-01-01'\n  AND plan = 'premium'\nGROUP BY quarter\nORDER BY quarter;\n\n/* Answer the following: What percentage of users are inactive for each device type? inactive refers to status = 'inactive' */\nSELECT \n    device_type,\n    100.0 * SUM(CASE WHEN status = 'inactive' THEN 1 ELSE 0 END) / COUNT(*) AS inactive_percentage\nFROM users\nGROUP BY device_type;\n\n/* Answer the following: How many users are there in each age category (20s, 30s, 40s, 50s, and others)?",
            "n_examples": 6,
            "db_id": "log"
        },
        {
            "question": "Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops, retirements, or movements at the start of the race.",
            "evidence": "",
            "raw_question": "Provide the full names of drivers who have been overtaken on track more times than they have overtaken others on track during race laps, excluding position changes due to pit stops, retirements, or movements at the start of the race.",
            "prompt": "/* Some extract examples are provided based on similar problems: */\n\n/* Answer the following: How many distinct sessions never reached either the '/detail' page or the '/complete' conversion? */\nSELECT COUNT(DISTINCT session_id)\nFROM activity_log\nWHERE session_id NOT IN (\n    SELECT DISTINCT session_id\n    FROM activity_log\n    WHERE path IN ('/detail', '/complete')\n);\n\n/* Answer the following: For each user session, what is the total time in seconds between the first and the last recorded event? */\nSELECT \n    session_id,\n    MAX(event_time) - MIN(event_time) AS session_duration_seconds\nFROM activity_log\nGROUP BY session_id;\n\n/* Answer the following: List the five most-frequently visited paths that immediately preceded a '/complete' conversion, ordered by their occurrence count. */\nWITH preceded AS (\n    SELECT\n        a.session_id,\n        a.path AS preceding_path\n    FROM activity_log AS a\n    JOIN activity_log AS b\n      ON a.session_id = b.session_id\n     AND a.event_time  = (\n            SELECT MAX(event_time)\n            FROM activity_log\n            WHERE session_id = b.session_id\n              AND event_time <  b.event_time\n        )\n    WHERE b.path = '/complete'\n)\nSELECT preceding_path, COUNT(*) AS cnt\nFROM preceded\nGROUP BY preceding_path\nORDER BY cnt DESC\nLIMIT 5;\n\n/* Answer the following: For each session, how many distinct non-empty search types were used? */\nSELECT\n    session_id,\n    COUNT(DISTINCT search_type) AS distinct_search_types\nFROM activity_log\nWHERE search_type <> ''\nGROUP BY session_id;\n\n/* Answer the following: What is the average number of '/detail' clicks per session? */\nWITH per_session AS (\n    SELECT session_id, COUNT(*) AS detail_clicks\n    FROM activity_log\n    WHERE path = '/detail'\n    GROUP BY session_id\n)\nSELECT AVG(detail_clicks) AS avg_detail_clicks\nFROM per_session;\n\n/* Answer the following: Which sessions achieved a '/complete' conversion without any prior '/detail' clicks? */\nWITH first_detail AS (\n    SELECT session_id, MIN(event_time) AS first_detail_time\n    FROM activity_log\n    WHERE path = '/detail'\n    GROUP BY session_id\n), first_complete AS (\n    SELECT session_id, MIN(event_time) AS first_complete_time\n    FROM activity_log\n    WHERE path = '/complete'\n    GROUP BY session_id\n)\nSELECT c.session_id\nFROM first_complete AS c\nLEFT JOIN first_detail  AS d\n  ON c.session_id = d.session_id\nWHERE d.first_detail_time IS NULL \n   OR c.first_complete_time < d.first_detail_time;\n\n/* Answer the following: For each user session in the activity log table, identify the number of events that occurred before the first '/detail' click or '/complete' conversion, counting only events that have a non-empty search type. Find the sessions with the minimum count of such pre-click/pre-conversion events. If multiple sessions share this minimum count, include all of them in the results. Return each qualifying session along with the corresponding path and search type.",
            "n_examples": 6,
            "db_id": "log"
        }
    ]
}