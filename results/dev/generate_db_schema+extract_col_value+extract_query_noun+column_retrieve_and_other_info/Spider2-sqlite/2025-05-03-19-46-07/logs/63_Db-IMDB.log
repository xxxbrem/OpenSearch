############################## Human at step extract_col_value ##############################

/* Some extract examples are provided based on similar problems: */
/* Answer the following: Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course. most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A'; */
#reason: The question requires display in order: "name of the course", "full name"."A" is filtering condition.
#columns: course.name, student.f_name, student.l_name, registration.grade, registration.student_id
#values: "A"

/* Answer the following:How much more votes for episode 1 than for episode 5? more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5)) */
#reason: The question requires display in order: "How much more vote". The definition of "more vote" is SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5)). 1, 5 are filtering conditions.
#columns: Episode.episode, Vote.votes
#values: "1", "5"

/* Answer the following: What is the average score of the movie "The Fall of Berlin" in 2019? Average score refers to Avg(rating_score); */
#reason: The question requires display in order: "average score". Average score is Avg(rating_score), "The Fall of Berlin",2019 are filtering conditions.
#columns: ratings.rating_score, ratings.rating_id, ratings.rating_timestamp_utc, movies.movie_title
#values: "The Fall of Berlin", "2019"

/* Answer the following: How many distinct orders were there in 2003 when the quantity ordered was less than 30? "year(orderDate) = '2003'; quantityOrdered < 30;" */
#reason:  The question requires display in order: "How many distinct orders"." in 2003", "less than 30" are filtering conditions.
#columns: orderdetails.orderNumber, orderdetails.quantityOrdered, orders.orderDate
#values: "30", "2003"

/* Answer the following: What is the average grade for all completed Mathematics courses? completed refers to ClassStatus = 2; */
SELECT AVG(E.Grade)
FROM Enrollments AS E
JOIN Courses AS C ON E.CourseID = C.ID
WHERE C.Department = 'Mathematics' 
  AND E.ClassStatus = 2;

/* Answer the following: List the first and last names of students who have completed at least three Science courses. completed refers to ClassStatus = 2; at least three refers to COUNT(*) ≥ 3; */
SELECT S.FirstName , S.LastName
FROM Students AS S
JOIN Enrollments AS E ON S.ID = E.StudentID
JOIN Courses    AS C ON E.CourseID = C.ID
WHERE C.Department = 'Science'
  AND E.ClassStatus = 2
GROUP BY S.ID
HAVING COUNT(*) >= 3;

/* Answer the following: What is the highest grade achieved in any completed History course? completed refers to ClassStatus = 2; highest grade refers to MAX(Grade); */
SELECT MAX(E.Grade)
FROM Enrollments AS E
JOIN Courses AS C ON E.CourseID = C.ID
WHERE C.Department = 'History'
  AND E.ClassStatus = 2;

/* Answer the following: For every English course, give the course name and the number of students who have completed it. completed refers to ClassStatus = 2; */
SELECT C.CourseName ,
       COUNT(*) AS CompletedStudents
FROM Courses     AS C
JOIN Enrollments AS E ON C.ID = E.CourseID
WHERE C.Department = 'English'
  AND E.ClassStatus = 2
GROUP BY C.ID , C.CourseName;

/* Answer the following: Which students have grades higher than the overall average grade of all completed English courses? completed refers to ClassStatus = 2; */
SELECT DISTINCT S.FirstName , S.LastName
FROM Students     AS S
JOIN Enrollments  AS E ON S.ID = E.StudentID
JOIN Courses      AS C ON E.CourseID = C.ID
WHERE C.Department = 'English'
  AND E.ClassStatus = 2
  AND E.Grade >
      ( SELECT AVG(E2.Grade)
        FROM Enrollments AS E2
        JOIN Courses     AS C2 ON E2.CourseID = C2.ID
        WHERE C2.Department = 'English'
          AND E2.ClassStatus = 2 );



/* Database schema */
Database Management System: SQLite
#Database name: Db-IMDB
## Table Movie:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1538, 2263, 2491]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt0137947', 'tt0327437', 'tt1821385']
title: The type is TEXT, Which does not inlude Null and is Non-Unique. Values format like: ['Khubsoorat', 'Kucch To Hai', 'Bhupathi']
year: The type is TEXT, Which does not inlude Null and is Non-Unique. Values format like: [1985, 1987, 1962]
rating: The type is REAL, Which does not inlude Null and is Non-Unique. Values format like: [3, 1, 6]
num_votes: The type is INTEGER, Which does not inlude Null and is Non-Unique. Values format like: [836, 184585, 522]

## Table Genre:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [294, 45, 104]
Name: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['Drama, Romance, Thriller            ', 'Comedy, Crime, Family            ', 'Crime, Horror, Mystery            ']
GID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [57, 71, 185]

## Table Language:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [18, 12, 15]
Name: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['Mandarin', 'Swiss German', 'Kannada']
LAID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [23, 19, 17]

## Table Country:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [28, 14, 31]
Name: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['Hong Kong', 'Spain', 'Iceland']
CID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [30, 8, 9]

## Table Location:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [18, 293, 225]
Name: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['Harrods, Brompton Road, Knightsbridge, London, England, UK', 'Bangkok, Thailand', 'Ye Olde Cheshire Cheese, Fleet Street, London, UK']
LID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [408, 540, 149]

## Table M_Location:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [252, 2169, 1378]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt6747420', 'tt0102835', 'tt0046427']
LID: The type is REAL, Which inlude Null and is Non-Unique. Values format like: [499, 85, 494]
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [2726, 286, 563]

## Table M_Country:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [3204, 3043, 678]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt0068929', 'tt2401719', 'tt2658126']
CID: The type is REAL, Which inlude Null and is Non-Unique. Values format like: [33, 21, 6]
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1257, 303, 1075]

## Table M_Language:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1005, 3041, 374]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt0286640', 'tt6040012', 'tt0286934']
LAID: The type is INTEGER, Which does not inlude Null and is Non-Unique. Values format like: [30, 2, 6]
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1666, 2942, 2500]

## Table M_Genre:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [364, 2748, 1708]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt0147843', 'tt1603862', 'tt0125556']
GID: The type is INTEGER, Which does not inlude Null and is Non-Unique. Values format like: [127, 115, 318]
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [3221, 1669, 1600]

## Table Person:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [33694, 24660, 33216]
PID: The type is TEXT, Which inlude Null and is Non-Unique. Values format like: ['nm2864164', 'nm0610268', 'nm0045393']
Name: The type is TEXT, Which inlude Null and is Non-Unique. Values format like: [' Soma Adhikari', ' Ishtiaq', ' Uma Kamesh']
Gender: The type is TEXT, Which inlude Null and is Non-Unique. Value of this column must in: ['Male', 'Female']

## Table M_Producer:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [2730, 10145, 7955]
MID: The type is TEXT, Which does not inlude Null and is Non-Unique. Values format like: ['tt2957126', 'tt0073191', 'tt0438153']
PID: The type is TEXT, Which inlude Null and is Non-Unique. Values format like: [' nm1402514', ' nm0201951', ' nm8753450']
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1563, 544, 5426]

## Table M_Director:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [3149, 2179, 3017]
MID: The type is TEXT, Which does not inlude Null and is Unique. Values format like: ['tt0272735', 'tt7218518', 'tt1688092']
PID: The type is TEXT, Which does not inlude Null and is Non-Unique. Values format like: ['nm0665374', 'nm5455809', 'nm3085237']
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [1163, 3268, 2485]

## Table M_Cast:
index: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [66166, 41024, 79917]
MID: The type is TEXT, Which does not inlude Null and is Non-Unique. Values format like: ['tt5780570', 'tt2369154', 'tt0338721']
PID: The type is TEXT, Which inlude Null and is Non-Unique. Values format like: [' nm1175047', ' nm6929455', ' nm1930468']
ID: The type is INTEGER, Which does not inlude Null and is Unique. Values format like: [19876, 19678, 54307]

#Forigen keys:


#Database Description:
The database `Db-IMDB` is designed to store and manage information related to movies, including their genres, languages, countries, filming locations, and associated personnel such as producers, directors, and cast members. It provides detailed metadata about movies, including ratings, votes, and production details, as well as relationships between movies and their attributes.

#Tables Descriptions:

1. **Movie**:  
   Contains detailed information about movies, including their unique identifiers (`MID`), titles, release years, ratings, and the number of votes they received.

2. **Genre**:  
   Stores information about movie genres, including unique genre identifiers (`GID`) and descriptive names.

3. **Language**:  
   Contains information about languages used in movies, including unique language identifiers (`LAID`) and names.

4. **Country**:  
   Stores information about countries associated with movies, including unique country identifiers (`CID`) and names.

5. **Location**:  
   Contains information about filming locations, including unique location identifiers (`LID`) and descriptive names.

6. **M_Location**:  
   Represents the relationship between movies (`MID`) and their filming locations (`LID`). Each record is uniquely identified by an `ID`.

7. **M_Country**:  
   Represents the relationship between movies (`MID`) and their associated countries (`CID`). Each record is uniquely identified by an `ID`.

8. **M_Language**:  
   Represents the relationship between movies (`MID`) and their associated languages (`LAID`). Each record is uniquely identified by an `ID`.

9. **M_Genre**:  
   Represents the relationship between movies (`MID`) and their associated genres (`GID`). Each record is uniquely identified by an `ID`.

10. **Person**:  
    Contains information about individuals associated with movies, including their unique identifiers (`PID`), names, and genders.

11. **M_Producer**:  
    Represents the relationship between movies (`MID`) and their producers (`PID`). Each record is uniquely identified by an `ID`.

12. **M_Director**:  
    Represents the relationship between movies (`MID`) and their directors (`PID`). Each record is uniquely identified by an `ID`.

13. **M_Cast**:  
    Represents the relationship between movies (`MID`) and their cast members (`PID`). Each record is uniquely identified by an `ID`.

#Foreign Keys:
- **M_Location**: `MID` references `Movie.MID`, `LID` references `Location.LID`.
- **M_Country**: `MID` references `Movie.MID`, `CID` references `Country.CID`.
- **M_Language**: `MID` references `Movie.MID`, `LAID` references `Language.LAID`.
- **M_Genre**: `MID` references `Movie.MID`, `GID` references `Genre.GID`.
- **M_Producer**: `MID` references `Movie.MID`, `PID` references `Person.PID`.
- **M_Director**: `MID` references `Movie.MID`, `PID` references `Person.PID`.
- **M_Cast**: `MID` references `Movie.MID`, `PID` references `Person.PID`.


Attention:
1. if the question have when\where\which, pay attention to pick table.column related to time, location and name in #columns
2. Please answer the question in the following format without any other content:
```
#reason: Analysis of which columns and values might be relevant to the question. Note that when dealing with questions about time, who, which, what, etc., you should keep column related to time, names, and locations in the #column.(format: The question query xxx, the related column include table.column, the values include values)
#columns: The top 10 columns relevant to the question( format: table.column_1, table.column_2 ...)
#values: Potential filter values that the question might query(format: "value1", "value2" ...)
```
/* Answer the following: From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit? */


############################## AI at step extract_col_value ##############################

```
#reason: The question queries actors' active career span and checks for gaps in movie appearances. The relevant columns include actor names, movie years, and actor IDs. The values include the year range and actor IDs.
#columns: Person.PID, Person.Name, Movie.year, M_Cast.MID
#values: "3"
```

############################## Human at step extract_query_noun ##############################

Please extract all nouns and phrases from the following sentence, separating the results directly with a comma( format: "noun_1", "noun_2","phrases" ):
From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?

############################## AI at step extract_query_noun ##############################

"year", "actor", "film", "last", "actors", "database", "gap", "years", "movie", "appearance", "span", "career", "film credit", "first year", "last year", "new movie appearance", "active career", "single film credit"

############################## Human at step column_retrieve_and_other_info ##############################

现在我们定义一个问句的语法原子单元如下:
Q: 询问词: 如 calculate\ Include\ List\ List out\ List all\ give\ state\ Name\ In which\ How many\  which\ what\ who\ when\ provide\ Tally\ identify\ Find\ mention\ write等
J: 判断词： 如 Do\ Did\ If\ Is\ Are等
I: 查询内容: 查询的主体内容, 如: name, ID, date, location, item, biggest city.
C: 条件句: 通过介词和连词引入的查询的要求或属性, 如大于、等于、排序、聚合等. 介词和连词有: of\ have\ with\ that\ by. 条件句的形式例子有: with condition\ have condition\ of attribute\ that was condition


一个问题通过这些原子串联起来。常见的串联方式有
QIC(询问句): List the student with score more than 80: Q: 'List' I: 'the student' C: 'with score more than 80'
JC(判断句): State if Tom is a Cat? : J: 'State if C: is a Cat?'
C(条件句): For all people in Beijing
现在请你针对下面的问题, 把问题中的内容按照上述原子定义提取出来
问题如下: From the first year each actor appeared in a film to the last, how many actors in the database never had a gap longer than three consecutive years without at least one new movie appearance, meaning there is no four-year span anywhere in their active career without at least a single film credit?

请按照下面的json格式进行回答:

```json
[{"Type":"类型(QIC,JC,C)",
"Extract":{//不存在的填null
    "Q":"询问词",
    "J":"判断词",
    "I":['查询内容a', '查询内容b'],//只有查询内容用and或alongside连接时,才分成多个实体填入List
    "C":["条件句a","属性b"]
}},
{}]
```

############################## AI at step column_retrieve_and_other_info ##############################

```json
[{
    "Type": "QIC",
    "Extract": {
        "Q": "how many",
        "J": null,
        "I": ["actors"],
        "C": [
            "from the first year each actor appeared in a film to the last",
            "never had a gap longer than three consecutive years without at least one new movie appearance",
            "there is no four-year span anywhere in their active career without at least a single film credit"
        ]
    }
}]
```

